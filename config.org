#+title: Emacs Configuration
#+startup: inlineimages

* Table of contents                                                     :TOC_3:
- [[#introduction][Introduction]]
  - [[#what-is-this-and-who-is-it-for][What is this and who is it for?]]
  - [[#dependencies][Dependencies]]
  - [[#installation][Installation]]
  - [[#custom-keybindings][Custom Keybindings]]
  - [[#fixes-and-improvements][Fixes and improvements]]
- [[#early-init-file][Early Init file]]
  - [[#file-header][File Header]]
  - [[#start-time-optimizations][Start time optimizations]]
  - [[#user-interface][User Interface]]
- [[#main-configuration-file][Main Configuration file]]
  - [[#file-header-1][File Header]]
  - [[#initial-setup][Initial Setup]]
  - [[#bootstrap][Bootstrap]]
    - [[#package-management][Package management]]
    - [[#organize-configuration-directory][Organize configuration directory]]
    - [[#startup-profiler][Startup Profiler]]
  - [[#appearance][Appearance]]
    - [[#font][Font]]
    - [[#theme][Theme]]
    - [[#theme-faces][Theme Faces]]
  - [[#functions][Functions]]
    - [[#custom-functions][Custom Functions]]
    - [[#function-aliases][Function Aliases]]
  - [[#keybindings][Keybindings]]
    - [[#change-default-keybindings-layout][Change default keybindings layout]]
    - [[#global-keybindings][Global Keybindings]]
  - [[#defaults][Defaults]]
    - [[#general][General]]
    - [[#indentation][Indentation]]
    - [[#tabs-tab-line][Tabs (tab-line)]]
    - [[#scrolling][Scrolling]]
    - [[#fringe-and-line-numbers][Fringe and line numbers]]
    - [[#backup-autosave-and-lockfiles][Backup, Autosave and Lockfiles]]
  - [[#features][Features]]
    - [[#icons][Icons]]
    - [[#project-management][Project Management]]
    - [[#workspaces][Workspaces]]
    - [[#file-explorer][File Explorer]]
    - [[#dashboard][Dashboard]]
    - [[#modeline][Modeline]]
    - [[#search-multiple-files][Search Multiple Files]]
    - [[#interactive-visual-replace][Interactive Visual Replace]]
    - [[#org-mode][Org mode]]
    - [[#spellcheck][Spellcheck]]
    - [[#review-code-completion][REVIEW Code Completion]]
    - [[#generic-completion-framework][Generic Completion Framework]]
    - [[#window-switcher][Window Switcher]]
    - [[#git-integration][Git Integration]]
    - [[#templates-and-snippets][Templates and Snippets]]
    - [[#review-multiple-cursors][REVIEW Multiple Cursors]]
    - [[#cutcopy-whole-line-or-region][Cut/Copy whole line or region]]
    - [[#presentations][Presentations]]
    - [[#terminal-colors][Terminal Colors]]
    - [[#move-text][Move text]]
    - [[#scroll-on-jump][Scroll on Jump]]
    - [[#hydras][Hydras]]
    - [[#other-smaller-additions][Other smaller additions]]
  - [[#programming-languages][Programming languages]]
    - [[#review-markdown][REVIEW Markdown]]
    - [[#yaml][YAML]]
    - [[#c][C#]]
    - [[#terraform][Terraform]]
    - [[#hcl-hashicorp-configuration-language][HCL (Hashicorp Configuration Language)]]
    - [[#dockerfile][Dockerfile]]
    - [[#lisp][Lisp]]
    - [[#latex][Latex]]
  - [[#personal-settings][Personal Settings]]
  - [[#final-setup][Final Setup]]

* Introduction
** What is this and who is it for?

This emacs configuration allows you to use Org mode and still have access to "modern" keybindings.

Many of the keybindings are replaced with what I consider "standard" keybinds, like those you would find in Sublime Text, Atom and VSCode. Likewise, many of the features you would expect from some of these editors are also implemented here.

The goal of this configuration is to provide a comfortable experience editing Org mode files to programmers that are accustomed to modern text editors.

** Dependencies

In order for everything to work correctly, you should have the following installed on your system:

- ripgrep
- fd
- fzf
- aspell or hunspell
- git
- marked (or some other markdown parser)
- python
- node.js + vmd package

For markdown, you need to customize the command to run the markdown parser if you use something else.

** Installation

Eventually, this config will work on windows, but for now, only unix is supported.

optional backup:
cp ~/.emacs.d ~/.emacs.d_backup

installation:
cd ~/.emacs.d/
git clone https://github.com/kyukee/emacs-config.git

then, inside emacs, open the command menu with M-x and run 'all-the-icons-install-fonts'

** Custom Keybindings

The conversion to use "modern" keybinds is mostly dealt with by [[https://github.com/darkstego/wakib-keys][wakib-keys]].
I customized the commands and changed a few keys but it's still similar to the default package.

The following image shows all the keys you need to know to get started:

#+ATTR_ORG: :width 1200
[[./config-resources/keyboard-layout-ctrl.png]]

The wakib-keys package defines a lot more bindings that are more oriented towars speed and productivity.
If you're interested, go check it out.

Note: this image was done using [[http://www.keyboard-layout-editor.com/#/][Keyboard Layout Editor]].

** Fixes and improvements

Todo:
- [X] workspaces in dashboard
- [X] org mode: when pressing enter at the end of line that starts with '-', it adds two spaces
- [X] setting scroll margin messes up org indent mode. the first/last line sometimes appears unindented
- [X] change project name in the modeline (the name itself + its appereance)
- [X] change org souce block header highlight color
- [X] home key should toggle between row 0 and first character in line (beginning and indentation, in emacs terms)
- [X] when line number is 0-9, and it changes to a greater value, the numbers column width changes and the whole buffers moves.
- [X] disable completion for plain text modes (org-mode)
- [X] config.org should open with 2 levels of headings
- [X] add tabs like Sublime Text or somehow show tabs in current project
- [X] disable tab-line in dashboard
- [X] hidden tab-bar reappears when doing: M-x ESC
- [X] mode-line lighter for current indentation settings isn't there anymore
- [X] add icon to custom projectile doom-modeline segment
- [X] workspaces in dashboard icon
- [X] org-indent messes up hl-line-mode. it only has one face for the indentation. this creates a gap from line number to line. fix by changing bg of curr line number
- [X] background colour of org document keywords is not the same as normal background
- [X] ctrl+shift+left/right doesnt work
- [X] a hex color should count as a full word when selecting it (double click or C-S-left/right) (disable subword navigation)
- [X] selecting with S-<home> and pressing delete only removes indentation (untabify)
- [X] make alt+arrow work in org mode for headlines without shift (custom function)
- [X] use straight.el so only packages declared in the config file are loaded
- [X] compare latest version with old version in git. load time went from 0.7-0.8 -> 1.0-1.2 seconds.
- [X] package-quickstart needs to be deleted after package update or else there's an error. sometimes also custom.el
- [X] arrow indicating visual line doesn't appear
- [X] figure out how to deal with new file (C-n) while using bufler groups
- [X] bufler groups show same file 2 times, in its own group and without a group
- [X] make C-backspace delete until first non whitespace character
- [X] make new line indicator appear only on right fringe
- [X] bufler workspace name in modeline doesn't fade to grey in inactive window
- [X] magit and dired buffers end up without  any bufler workspace
- [X] C-k should not copy to clipboard
- [X] make visual-regexp work with active region as input
- [X] org-indent sometimes does not indent the top-most line in the buffer (looks like changing line numbers font height fixed it)
- [X] add projectile hydras
- [X] add treemacs hydras
- [X] query-replace with current selection as input (Replace+ package maybe?)
- [X] M-o isnt working for C-o and flyspell-correct
- [X] why does reloading the init file mess up doom-modeline (and why does it only happen in the currently open buffer)
- [X] when dashboard is opened with a hydra, the hydra menu stays open
- [X] for every package, use as much use-package integration as possible
- [X] C-backspace deletes previous word. it should only delete whitespace
- [X] swiper sometimes shows the match behind the modeline
- [X] regarding doom-modeline buffer name segment, when the file is deleted and there is a forbidden icon, there should be an extra space before it.
- [ ] ctrl+shift+o to open directory in sidebar
- [ ] use flycheck for elisp (for config file)
- [ ] error indicator in fringe for flyspell and flycheck
- [ ] git gutter on left and flycheck gutter on right side
- [ ] add keybindings tables in config.org
- [ ] alt-shift-up/down conflict in org mode with multiple cursors (mc bind disabled for now)
- [ ] commenting inside source block jumps to top of block. happens with just 'emacs -Q' and comment-dwim
- [ ] maybe incorporate previous/next concept from wakib-emacs? (it uses ';')
- [ ] add shortcuts for dashboard and init file (maybe hydras)
- [ ] new keybindings for project find and project replace
- [ ] when opening a treemacs workspace in dashboard, it should ask for a file
- [ ] vr/replace doesnt auto open org headings
- [ ] use 'C-.' to fix any type of error
- [ ] apostrophes should not be selected when selecting words
- [ ] replace "cua-selection-mode" with "set-rectangular-region-anchor" from "rectangular-region-mode" (figure out what's the best option)
- [ ] org-mode unordered lists should also have bullets (org-superstar seems to solve this)
- [ ] replace org-bullets with org-superstar
- [ ] counsel-find-file should order items alphabetically
- [ ] improve swiper regex groups colours for matches
- [ ] opening a new file in terminal should add a new buffer to existing emacs frame (maybe use emacsclient)
- [ ] allow C-page up/down to cycle when at first/last tab
- [ ] use C-S-page up/down to move tabs
- [ ] allow jumping between git hunks (git-gutter) or modified buffer areas
- [ ] use smerge hydra for better merging conflict resolution (https://github.com/alphapapa/unpackaged.el#hydra)
- [ ] be able to see git gutter, company errors and visual line arrows all at the same time, without conflicts
- [ ] when flyspell is active, show indicator, along with selected dictionary language
- [ ] C-tab = tab-recent doesnt work (also for C-S-tab)
- [ ] look at other modelines (spaceline and telephone-line)
- [ ] add mouse-over boxes to modeline custom segments
- [ ] being able to change the directory of a search (C-S-f)
- [ ] add functions converting indentation to tabs/spaces
- [ ] improve appearance of tab-line arrows (they appear when the bar is too full)
- [ ] make C-f and C-h use similar colors
- [ ] add C-S-s (save all)
- [ ] for every package, add a quote from their git repo explaining what the package does
- [ ] remove dashboard from initial bufler group
- [ ] give every doom modeline segment a mouse-over menu
- [ ] change bufler group for dashboard and magit-status
- [ ] swiper always uses multiple cursor after pressing RET. Changing from C-m fixes it, but now it doesn't work with C-r.


also:
- [ ] look at vscode settings + extensions and import anything I like
- [ ] look at sublime settings + extensions and import anything I like
- [ ] when this config is developed enough, see what it needs to work on Windows

* Early Init file

Emacs HEAD (27+) introduces early-init.el, which is run before init.el, before package and UI initialization happens.

** File Header

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;; early-init.el --- Emacs Early Init File          -*- lexical-binding: t -*-
;;; GNU Emacs Configuration - Early Init

#+END_SRC

** Start time optimizations

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;; A common optimization is to temporarily reduce the frequency of garbage collection during initialization.
(setq gc-cons-threshold most-positive-fixnum)

;; FileNameHandler
(defvar file-name-handler-alist-original file-name-handler-alist)
(setq file-name-handler-alist nil)

;; Restore values after startup
(add-hook 'after-init-hook
  (lambda ()
    (setq gc-cons-threshold (* 16 8 1024 1024) ; 16MB
          file-name-handler-alist file-name-handler-alist-original)))
#+END_SRC

** User Interface

For the GUI changes that deserve to be in early-init. It is more efficient to disable UI elements before they are even loaded than to load them with the wrong configuration than change them.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;; Only show cursor in the active window.
(setq-default cursor-in-non-selected-windows nil)

;;Default frame position
(setq default-frame-alist
  `((height . 60) (width . 100)))

;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

;; show column number alongside line number
(column-number-mode 1)

;; display relative line numbers
(global-display-line-numbers-mode)
(setq display-line-numbers-type 'visual)

;; highlight current line
(global-hl-line-mode +1)

;; avoid flashing the default emcas modeline while starting
(setq mode-line-format nil)

;; Do not resize the frame at this early stage.
(setq frame-inhibit-implied-resize t)
#+END_SRC

* Main Configuration file
** File Header

#+BEGIN_SRC emacs-lisp :tangle yes
;;; config.el --- Emacs Configuration File          -*- lexical-binding: t -*-
;;; GNU Emacs Configuration

#+END_SRC

** Initial Setup

Things to do before we start making changes

#+BEGIN_SRC emacs-lisp :tangle yes
;; when an error occurs during startup, automatically open debugger
(setq debug-on-error t)
#+END_SRC

** Bootstrap
*** Package management
**** Package: straight

straight.el is used to make the init-file the sole source of truth for package operations.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq straight-use-package-by-default         t
      straight-check-for-modifications        '(find-when-checking))

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

**** Package: use-package

#+BEGIN_SRC emacs-lisp :tangle yes
(straight-use-package 'use-package)

;; Configure `use-package' prior to loading it.
(setq use-package-expand-minimally t
      use-package-compute-statistics t
      use-package-enable-imenu-support t
      use-package-verbose t)
#+END_SRC

**** Package: pretty-hydra

nicer syntax for declaring hydras with use-package

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package pretty-hydra)
#+END_SRC

**** Basic usage

To install a package temporarily (until you restart Emacs):
    - M-x straight-use-package

To install a package permanently, place a call to straight-use-package in your init-file, like:
    - (straight-use-package 'el-patch)

To update all packages to their most recent version:
    - M-x straight-pull-all

A note about ":init" and ":config".
    - init is executed before a package is loaded (even if deferred)
    - config is executed after a package is loaded

*** Organize configuration directory
**** Package: no-littering

Make emacs configuration directory more organized and keep it clean.
'no-littering' should be loaded as early as possible since it changes where other packages will save their files.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package no-littering)
#+END_SRC

*** Startup Profiler
**** Package: esup                                              :disabled:

This isn't in the same section as the other features because it needs to loaded as early as possible to get accurate results.

not using it because it doesn't really work well with early-init file

#+BEGIN_SRC emacs-lisp :tangle no
(use-package esup
  :commands (esup)
  :config
  (setq esup-depth 0))
#+END_SRC

**** Package: benchmark-init

#+BEGIN_SRC emacs-lisp :tangle no
(use-package benchmark-init
  :config
  (benchmark-init/activate)
  :hook (after-init . benchmark-init/deactivate))
#+END_SRC

**** Basic usage

When using the profiler, just uncoment the line that disables the package.
Comment and uncoment that line to enable/disable the feature.

To see the results, run:
    - benchmark-init/show-durations-tabulated
    - benchmark-init/show-durations-tree

** Appearance

Most GUI changes are done in early-init.el

*** Font
**** Source block: set-face-attribute

Some of my font options:
    - IBM Plex Mono
    - Cartograph CF

The unit for the 'height' attribute is 1/10pt, which means a height of 100 is 10pt.

#+BEGIN_SRC emacs-lisp :tangle yes
(set-face-attribute 'default nil :font "Cartograph CF-12")

(custom-set-faces
  '(mode-line ((t (:family "Cartograph CF" :height 110))))
  '(mode-line-inactive ((t (:family "Cartograph CF" :height 110))))
  '(tab-line-tab ((t (:family "Cartograph CF" :height 110))))
  '(line-number ((t (:family "Cartograph CF" :height 110))))
  '(line-number-current-line ((t (:family "Cartograph CF" :height 110))))
  '(treemacs-file-face ((t (:family "Cartograph CF" :height 110)))))
#+END_SRC

*** Theme
**** Package: cyberpunk-theme

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package cyberpunk-theme
  :config
    (load-theme 'cyberpunk t))
#+END_SRC

*** Theme Faces
**** Source block: custom-theme-set-faces

#+BEGIN_SRC emacs-lisp :tangle yes
(setq custom--inhibit-theme-enable nil)
(with-eval-after-load "cyberpunk-theme"
  (custom-theme-set-faces
   'cyberpunk

   ;; defaults
   '(default ((t (:background "#14141D" :foreground "#bdbdb3"))))
   '(fringe ((t (:background "#14141D" :foreground "#dcdccc"))))
   '(region ((t (:extend t :background "#5e153c"))))
   '(error ((t (:foreground "#D92027" :weight bold))))
   '(whitespace-tab ((t (:background nil))))
   '(whitespace-trailing ((t (:background nil))))
   '(font-lock-keyword-face ((t (:foreground "#21D7D7"))))

   ;; line numbers
   '(line-number ((t (:foreground "gray30"))))
   '(line-number-current-line ((t (:background "#14141D" :foreground "#dedede"))))

   ;; tab-line
   '(tab-line ((t (:background "#14141D" :foreground "white" :height 1.0))))
   '(tab-line-tab ((t (:inherit tab-line :background "#14141D" :foreground "#dedede"))))                ; selected but window not in focus
   '(tab-line-tab-current ((t (:inherit tab-line-tab :overline "#12F292"))))                            ; selected
   '(tab-line-tab-inactive ((t (:inherit tab-line-tab :foreground "gray50"))))                          ; not selected
   '(tab-line-highlight ((t (:inherit tab-line-tab :background "orange" :foreground "#efefef"))))       ; on mouse-over

   ;; modeline
   '(doom-modeline-bar-inactive ((t (:background "#1A1A1A"))))
   '(doom-modeline-bar ((t (:background "#251F33"))))
   '(doom-modeline-buffer-path ((t (:inherit (mode-line-emphasis) :foreground "gray60"))))
   '(doom-modeline-project-dir ((t (:inherit (doom-modeline-buffer-path) :foreground "#12F292"))))
   '(doom-modeline-persp-buffer-not-in-persp ((t (:inherit (font-lock-comment-face italic)))))
   '(doom-modeline-persp-name ((t (:inherit (font-lock-doc-face italic bold)))))
   '(mode-line ((t (:background "#251F33" :foreground "gray60" :box (:line-width -1 :color "#0d1a1e")))))
   '(mode-line-inactive ((t (:background "#1A1A1A" :foreground "#4D4D4D" :box (:line-width -1 :color "#0d1a1e")))))
   '(mode-line-highlight ((t (:box (:line-width 2 :color "gray70")))))
   '(mode-line-buffer-id ((t (:foreground "gray70" :weight bold))))  ;; #21D7D7
   '(mode-line-emphasis ((t (:foreground "#12F292" :weight bold))))
   '(doom-modeline-info ((t (:foreground "gray60" ))))

   ;; ivy
   '(minibuffer-prompt ((t (:background "#02242b" :foreground "medium spring green"))))
   '(highlight ((t (:background "#333333"))))
   '(ivy-current-match ((t (:box nil :underline "#dc8cc3" :weight extra-bold))))
   '(ivy-minibuffer-match-face-1 ((t (:background "#444444"))))
   '(ivy-minibuffer-match-face-2 ((t (:background "#666666" :weight bold))))
   '(ivy-minibuffer-match-face-3 ((t (:background "#5654ca" :weight bold))))
   '(ivy-minibuffer-match-face-4 ((t (:background "#8b4887" :weight bold))))
   '(ivy-posframe ((t (:background "#1B1821"))))   ; 13141A
   '(ivy-posframe-border ((t (:background "#A13878"))))

   ;; flyspell
   '(flyspell-incorrect ((t (:underline (:style wave :color "red2")))))
   '(flyspell-duplicate ((nil)))

   ;; org mode
   '(org-todo ((t (:foreground "#ffa500" :box (:line-width 1 :style none) :weight bold))))
   '(org-done ((t (:foreground "#00ff00" :box (:line-width 1 :style none) :weight bold))))
   '(org-block ((t (:background "#151424"))))
   '(org-block-begin-line ((t (:background "#151424" :foreground "#008ED1"))))
   '(org-block-end-line ((t (:background "#151424" :foreground "#008ED1"))))
   '(org-ellipsis ((t (:foreground "gainsboro"))))
   '(org-level-3 ((t (:foreground "#A840F4"))))
   '(org-document-title ((t (:background "#14141D" :foreground "#add8e6" :weight bold :height 1.5))))
   '(org-checkbox ((t (:background "#14141D" :foreground "#dddddd"))))
   '(org-document-info ((t (:foreground "#add8e6" :weight bold))))
   '(org-document-info-keyword ((t (:foreground "#8B8989"))))

   ;; other packages
   '(dashboard-banner-logo-title ((t (:foreground "#A840F4" :height 1.0))))

   '(diff-hl-insert ((t (:background "green4" :foreground "green4"))))
   '(diff-hl-change ((t (:background "yellow4" :foreground "yellow4"))))
   '(diff-hl-delete ((t (:background "red4" :foreground "red4"))))

   ;; '(anzu-replace-highlight ((t (:foreground "red"))))
   ;; '(anzu-replace-to ((t (:foreground "green"))))

   '(vr/match-0 ((t (:background "#5654ca" :foreground "#ffffff"))))
   '(vr/match-1 ((t (:background "#8b4887" :foreground "#ffffff"))))
))
#+END_SRC

** Functions
*** Custom Functions

General user created functions.
These functions aren't associated with any package since they only use default emacs functionality.

**** Source block: emacs reload, quit, etc

#+BEGIN_SRC emacs-lisp :tangle yes
(defun my/reload-init-file ()
  "Reload emacs cofiguration"
  (interactive)
  (message "Reloading init.el...")
  (load-file user-init-file)
  (message "Reloading init.el... done."))


(defun my/kill-emacs ()
  "save some buffers, then exit unconditionally"
  (interactive)
  (save-some-buffers nil t)
  (kill-emacs))


(defun my/toggle-fullscreen ()
  "Toggle fullscreen"
  (interactive)
  (toggle-frame-fullscreen))
#+END_SRC

**** Source block: select and navigate text

#+BEGIN_SRC emacs-lisp :tangle yes
(defun my/select-current-line ()
  "Select the current line"
  (interactive)
  (beginning-of-line) ; move to end of line
  (set-mark (line-end-position)))


(defun my/genius-beginning-of-line ()
  "Move point to the first non-whitespace character on this line.
 If point was already at that position, move point to beginning of line.
 If line is empty, indent the line relative to the preceding line.
 "
  (interactive "^")
  (let ((oldpos (point)))
    (back-to-indentation)
    (and (= oldpos (point))
         (progn (move-beginning-of-line nil)
                (when (=
                       (line-beginning-position)
                       (line-end-position))
                  (save-excursion
                    (indent-according-to-mode)))))))


(defun my/smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))
#+END_SRC

**** Source block: move, indent and delete text

#+BEGIN_SRC emacs-lisp :tangle yes
(defun my/delete-word-no-clipboard (arg)
  "If the next character is whitespace, delete whitespace until the next character.
Otherwise, delete characters forward until encountering the end of a word.
With argument, do this that many times. Argument can be negative to go backwards.
If the argument is negative, look at previous character instead of next one.
This command does not push text to `kill-ring'."
  (interactive "p")
  (if (or (and (looking-at "[ \t\n]") (> arg 0)) (and (looking-back "[ \t\n]") (< arg 0)))
      (let ((pos (point)))
        (re-search-forward "[^ \t\n]" nil t arg)
        (forward-char (- (cl-signum arg)))
        (if (= pos (point))
            (delete-region
             (point)
             (progn
               (forward-word arg)
               (point)))
          (delete-region pos (point))
          ))
    (delete-region
     (point)
     (progn
       (forward-word arg)
       (point)))
    ))


(defun my/backward-delete-word-no-clipboard (arg)
  "If the next character is whitespace, delete whitespace until the next character.
Otherwise, delete characters forward until encountering the end of a word.
With argument, do this that many times.
This command does not push text to `kill-ring'."
  (interactive "p")
  (my/delete-word-no-clipboard (- arg)))


(defun my/indent-region-custom(numSpaces)
  (progn
    ;; default to start and end of current line
    (setq regionStart (line-beginning-position))
    (setq regionEnd (line-end-position))
    ;; if there's a selection, use that instead of the current line
    (when (use-region-p)
      (setq regionStart (region-beginning))
      (setq regionEnd (region-end)))
    (save-excursion ; restore the position afterwards
      (goto-char regionStart) ; go to the start of region
      (setq start (line-beginning-position)) ; save the start of the line
      (goto-char regionEnd) ; go to the end of region
      (setq end (line-end-position)) ; save the end of the line
      (indent-rigidly start end numSpaces) ; indent between start and end
      (setq deactivate-mark nil) ; restore the selected region
      )))


(defun my/untab-region (N)
  (interactive "p")
  (my/indent-region-custom (- N)))

(defun my/tab-region (N)
  (interactive "p")
  (if (active-minibuffer-window)
      (minibuffer-complete)     ; tab is pressed in minibuffer window -> do completion
    (my/indent-region-custom N) ; call my/indent-region-custom
    ))

;; can't use this yet because it would interfere with ivy
;;(bind-key "<backtab>" 'untab-region)
;;(bind-key "<tab>" 'tab-region)

#+END_SRC

**** Source block: other

#+BEGIN_SRC emacs-lisp :tangle yes
(defun my/set-buffer-large-fringe ()
  "The fringe is smaller than default because of the git gutter functionality.
   Some buffers like magit and bufler use the fringe for indicators and need more space.
   Other buffers that allow folding and unfolding with tab should also use this."
  (setq left-fringe-width 16
        right-fringe-width 8))


(defun my/set-buffer-dashboard-fringe ()
  (setq left-fringe-width 12
        right-fringe-width 12))


;; used as such: (my/pad-string "some string" 10)
(defun my/pad-string (string size)
  (let* ((padding (- size (length string)))
         (lpad (+ (length string) padding))
         (lformat (format "%%%ds" lpad))
         (rformat (format "%%%ds" (- size))))
    (format rformat (format lformat string))))


;; taken from doom-modeline indentation segment
(defun my/get-buffer-indentation-size ()
  (let ((lookup-var
         (seq-find (lambda (var)
                     (and var (boundp var) (symbol-value var)))
                   (cdr (assoc major-mode doom-modeline-indent-alist)) nil)))
    (if lookup-var
        (symbol-value lookup-var)
      tab-width)))


(defun my/copy-file-path (&optional @dir-path-only-p)
  "Copy the current buffer's file path or dired path to `kill-ring'.
    Result is full path.
    If `universal-argument' is called first, copy only the dir path.
    If in dired, copy the file/dir cursor is on, or marked files.
    If a buffer is not file and not dired, copy value of `default-directory' (which is usually the “current” dir when that buffer was created)
    URL `http://ergoemacs.org/emacs/emacs_copy_file_path.html'
    Version 2017-09-01"
  (interactive "P")
  (let (($fpath
         (if (string-equal major-mode 'dired-mode)
             (progn
               (let (($result (mapconcat 'identity (dired-get-marked-files) "\n")))
                 (if (equal (length $result) 0)
                     (progn default-directory )
                   (progn $result))))
           (if (buffer-file-name)
               (buffer-file-name)
             (expand-file-name default-directory)))))
    (kill-new
     (if @dir-path-only-p
         (progn
           (message "Directory path copied: 「%s」" (file-name-directory $fpath))
           (file-name-directory $fpath))
       (progn
         (message "File path copied: 「%s」" $fpath)
         $fpath )))))
#+END_SRC

*** Function Aliases
**** Source block: menu-bar

Give the toggle menu function a nicer name so its easier to find if necessary.

#+BEGIN_SRC emacs-lisp :tangle yes
(defalias 'toggle-menu-bar 'toggle-menu-bar-mode-from-frame)
#+END_SRC

**** Source block: bookmarks

Consolidate names for functions related to bookmarks.
These are the function used for bookmarks:

- bookmark-add-or-open
- bookmark-remove
- bookmark-rename

#+BEGIN_SRC emacs-lisp :tangle yes
(defalias 'bookmark-add-or-open 'counsel-bookmark)
(defalias 'bookmark-remove 'bookmark-delete)
#+END_SRC

** Keybindings
*** Change default keybindings layout
**** Information

I don't like the default emacs keybindings, so I use some packages to change them.

Wakib changes emacs keybindings to be more modern and ergonomic.
This package should be near the top of the this file's features list, so there isn't any error when assigning keybindings to the wakib keymap.

**** History

Here's my adventure with emacs and keybindings:
I grew up with Sublime Text, Atom and VSCode and these all share a (mostly) common set of keybinds.
These are the keybinds I'm interested in using.
I tried standard Emacs keybinds for a short amount of time and I wasn't impressed at all.

Here's my history with trying to use "standard" keybinds packages in emacs:

- ergoemacs-mode
	At first I tried using ergoemacs-mode, but that created a lot of conflicts when my config grew in size as I added more functinality.
	I also had issues with reloading my config file.

- cua-mode
	Then I tried using cua-mode, but it wasn't "standard" enough to my liking.
	The way 'C-x' works in particular was a problem, since I would like to cut a whole line by default when I press C-x and there is no active region selected.

- manual bindings in config
	The next attempt was to bind every key manually in my emacs config file.
	This gave me a lot of control and knowledge over what exactly was happening in terms of keybinds, which I liked.
	It was almost perfect, but not quite there yet.
	I was able to set up all the bindings that are prefixed by Control and I was also able to bind C-x, C-h and C-g to '<menu> x', '<menu> h' and '<menu> g', respectively.
	The problem is that Emacs makes rebinding C-c quite difficult.

- wakib-keys
	I found out a package that was able to deal with the C-c rebind issue, and decided to just use it instead of dealing with all the trouble of rebinding C-c myself.
	Since wakib-keys override the global keymap binds, this involved transferring some of my keybinds to the wakib keymap (wakib-keys-overriding-map).
	It also adds some new keybindings for things that I didn't originally want, but that I think might be useful.
	Finally, I was able to achieve the behavior I wanted

**** Package: wakib-keys

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package wakib-keys
  :init
  (wakib-keys 1)
  :hook
  (after-change-major-mode . wakib-update-major-mode-map)
  (menu-bar-update . wakib-update-minor-mode-maps))
#+END_SRC

*** Global Keybindings
**** Source block: bind-key

Here are keybinds that apply globally and don't depend on any package.
The ones that use functions from some package are defined in that package's section.

Some of these are slight alterations to wakib, such as modifying the functions of the keybinds.
Others add convenient things like zoom, reloading, fullscreen, etc.

#+BEGIN_SRC emacs-lisp :tangle yes
;; reload emacs config file
(bind-key "<f5>" 'my/reload-init-file wakib-keys-overriding-map)

;; make 'C-SPC' select in a rectangle instead of the normal selection
(bind-key "C-SPC" 'cua-rectangle-mark-mode wakib-keys-overriding-map)

;; alternative way to quit emacs besides C-x C-c
(bind-key "C-q" 'my/kill-emacs wakib-keys-overriding-map)

;; add a fullscreen toggle
(bind-key "<f11>" 'my/toggle-fullscreen wakib-keys-overriding-map)

(bind-key "C-+" 'text-scale-increase wakib-keys-overriding-map)
(bind-key "C--" 'text-scale-decrease wakib-keys-overriding-map)

(bind-key "<escape>" 'keyboard-escape-quit wakib-keys-overriding-map)

(bind-key "C-l" 'my/select-current-line wakib-keys-overriding-map)

(bind-key "C-<left>" 'backward-word wakib-keys-overriding-map)
(bind-key "C-<right>" 'forward-word wakib-keys-overriding-map)

(bind-key "M-o" nil wakib-keys-overriding-map) ;; the default bind interferes with ivy (show options command)

(bind-key "<backspace>" 'backward-delete-char-untabify)

(bind-key "C-<delete>" 'my/delete-word-no-clipboard wakib-keys-overriding-map)
(bind-key "C-<backspace>" 'my/backward-delete-word-no-clipboard wakib-keys-overriding-map)

;; cant use bind-key for C-c keybinds
(global-set-key (kbd "C-c h") help-map)

(bind-key "<home>" 'my/smarter-move-beginning-of-line wakib-keys-overriding-map)

;; switch to a recent tab
(bind-key "<C-tab>" 'tab-recent wakib-keys-overriding-map)

;;     on Linux, the menu/apps key syntax is <menu>
;;     on Windows, the menu/apps key syntax is <apps>
;;     make the syntax equal
(define-key key-translation-map (kbd "<apps>") (kbd "<menu>"))
#+END_SRC

** Defaults

Stuff that already comes with emacs. No package installation required.

*** General

Some nice-to have things and general settings.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq custom-file                 (expand-file-name "etc/custom.el" user-emacs-directory)  ;; Put Customize blocks in a separate file
      inhibit-startup-screen      t                   ;; disable default startup screen
      uniquify-buffer-name-style  'forward            ;; for files with the same name, include part of directory name at the beginning of the buffer name
      shift-select-mode           t                   ;; allow marks to be set when shift arrow-ing
      focus-follows-mouse         t                   ;; allow using mouse to switch between windows
      browse-url-browser-function 'browse-url-generic ;; links and html files should be opened in a browser, instead of emacs
      browse-url-generic-program  "xdg-open"
      ring-bell-function          'ignore             ;; disable bell
      blink-cursor-interval       1                   ;; change cursor blink speed. default is 0.5
      require-final-newline       t)                  ;; On save, automatically add final newline

;; open new buffers in an already existing frame
;; (setq ns-pop-up-frames nil)




;; When using "show-paren-mode", if code contains an angled bracket (">") is treated as a matching paren, which creates a mismatch.
;; This disables matching for the angle bracket character.
(modify-syntax-entry ?< ".")
(modify-syntax-entry ?> ".")

;; Only require to type 'y' or 'n' instead of 'yes' or 'no' when prompted
(fset 'yes-or-no-p 'y-or-n-p)

;; Try to always use utf8
(prefer-coding-system 'utf-8)

;; load file with 'Customize' settings
(when (file-exists-p custom-file)
  (load custom-file))




;; On save, automatically remove trailling whitespace
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; For all text modes, use visual-line-mode
(add-hook 'text-mode-hook 'visual-line-mode)

;; auto refresh dired when file changes
(add-hook 'dired-mode-hook 'auto-revert-mode)




;; automatically reload files from disk when changed externally
(global-auto-revert-mode 1)

;; replace the active region just by typing text and delete the selected text by hitting the Backspace key
(delete-selection-mode 1)

;; highlight matching parentheses
(show-paren-mode 1)

;; automatically add a pair to braces and quotes
(electric-pair-mode 1)
#+END_SRC

*** Indentation

#+BEGIN_SRC emacs-lisp :tangle yes
;; set default tab width globally
(setq-default tab-width 4)

;; use spaces for indentation by default
(setq-default indent-tabs-mode nil)

;; make tabs appear visible as a “|” (pipe) character
(global-whitespace-mode)								; make all whitespace visible
(setq whitespace-style '(face tabs tab-mark trailing))  ; only show tabs and trailing whitespace
(custom-set-faces
 '(whitespace-tab ((t (:foreground "#636363"))))    	; set tab character color
 '(whitespace-trailing ((t (:underline (:style wave :color "yellow2")))))
)

;; set tab character.
;; 8614 is the unicode number of a double right arrow
;; 124 is the unicode number of a pipe
(setq whitespace-display-mappings
  '((tab-mark 9 [124 9] [92 9])))

(setq backward-delete-char-untabify-method 'untabify)

;; functions to call from the M-x menu
(defun my/switch-indentation-use-spaces ()
  "Use spaces for indentation"
  (interactive)
  (setq indent-tabs-mode nil))

(defun my/switch-indentation-use-tabs  ()
  "Use tabs for indentation"
  (interactive)
  ;; (local-set-key (kbd "TAB") 'tab-to-tab-stop)
  (setq indent-tabs-mode t))
#+END_SRC

*** Tabs (tab-line)

#+BEGIN_SRC emacs-lisp :tangle yes
;; disable "close" (x) button for each tab
(setq tab-line-close-button-show nil)

;; disable "new tab" (+) button at the right end of the tab-line
(setq tab-line-new-button-show nil)

;; redefine function for tab names
(defun my/tab-line-tab-name-buffer (buffer &optional _buffers)
  (format "  %s  " (buffer-name buffer)))
(setq tab-line-tab-name-function #'my/tab-line-tab-name-buffer)
#+END_SRC

*** Scrolling

#+BEGIN_SRC emacs-lisp :tangle yes
;; try to improve scrolling in emacs. still not ideal though

(setq scroll-conservatively 100)  ;; this value shoul not be higher than 100, or else swiper has issues
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
(setq scroll-margin 3)
(setq scroll-preserve-screen-position 't)
;;(pixel-scroll-mode)   ; this makes it a bit laggy
#+END_SRC

*** Fringe and line numbers

#+BEGIN_SRC emacs-lisp :tangle yes
;; only show an indicator on the right fringe and not the left fringe
(setq-default visual-line-fringe-indicators '(nil right-curly-arrow))

;; make numbers column width a little bigger so it never changes size and moves the buffer. (refering to line numbers)
;; with a value of 3 digits, the buffer only moves when the line number is 1000 or hifher
(setq-default display-line-numbers-width 4)

;; set size in pixels of left and right fringes (default is 8)
(fringe-mode '(4 . 8))
#+END_SRC

*** Backup, Autosave and Lockfiles

#+BEGIN_SRC emacs-lisp :tangle yes
;; change auto-save location
(setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

;; put auto-save files in designated folder
(setq auto-save-default t)


;; disable file backup
(setq backup-inhibited t)


;; stop emacs from creating temoporary symbolic link file named “#something”
(setq create-lockfiles nil)
#+END_SRC

** Features

Add features by installing emacs packages.

*** Icons
**** Package: all-the-icons

Allow Emacs to use icons in various UI elements.

Important: The first time this package is installed, you need to run 'all-the-icons-install-fonts' to install fonts.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package all-the-icons
  :config
  (setq all-the-icons-color-icons t))
#+END_SRC

*** Project Management
**** Package: projectile

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package projectile
  :config
  (setq projectile-completion-system 'ivy)
  ;; (setq projectile-indexing-method 'hybrid)
  (projectile-mode 1)
  :pretty-hydra
  ((:title "Projectile" :color teal :quit-key "q")
   ("Find file"
    (("ff"  projectile-find-file-dwim "file dwim")
     ("fd"  projectile-find-file-in-directory "file curr dir")
     ("r"   projectile-recentf "file recent"))
    "Search Text"
    (("a"   projectile-ag "search text in project with ag"))
    "Buffers"
    (("b"   projectile-switch-to-buffer "switch to buffer"))
    "Projects"
    (("s"   counsel-projectile-switch-project "switch to project")
     ("o"   counsel-projectile-switch-open-project "switch to open project")))))
#+END_SRC

**** Basic usage

To use a non-repository folder as a project, create a blank '.projectile' file in the folder to mark the project root.
See [[https://docs.projectile.mx/projectile/projects.html#ignoring-file]] for what to write in this file.

Quick version of what to write in .projectile:
'-' to ignore
'+' to keep and ignore everything else
'!' to override .gitignore

*** Workspaces
**** Information

Also called Layouts, Perspectives, Sessions.

What I want for this feature is to be able to save and load lists of files using workspaces.
Workspaces should be able to be composed of multiple items. Each item can be a project, normal folder or normal file.
I use the name 'workspaces' in this section, but it's interchangeable with other names for this type of thing in emacs.

Restoring the window sizes, positions and layouts is not so important for me.

Specific features I want:

  - when in a workspace, show list of open buffers, restricted to that workspace
  - cycle between all the buffers in the current workspace
  - save, load and switch workspaces
  - when switching workspaces, automatically prompt for file to open or go to last visited file
  - save or load a single workspace. each workspace has it's own file or section. it shouldn't be all or nothing
  - give workspaces a custom name
  - integration with dashboard package (needs a way of getting list of existing workspaces)
  - show current workspace in the modeline


Another idea I've had is the following:
  - whenever you enter a projectile project, the sidebar and tab-bar automatically show information from only that project.
  - for everthing else, the sidebar shows the current file's parent directory and the tab-bar shows all the non-project files.


Currently using: bufler with optional bufler-tabs-mode

**** Package: persp-mode                                        :disabled:

#+BEGIN_SRC emacs-lisp :tangle no
(use-package persp-mode
  :config
  (setq persp-auto-resume-time -1
        persp-auto-save-opt 0
        persp-auto-save-num-of-backups 0
        persp-set-last-persp-for-new-frames nil
        persp-reset-windows-on-nil-window-conf t
        persp-autokill-buffer-on-remove t
        persp-add-buffer-on-after-change-major-mode t
        persp-kill-foreign-buffer-behaviour 'kill)
  (persp-mode 1))


(persp-load-state-from-file (expand-file-name "var/persp-mode/persp-auto-save" user-emacs-directory))

#+END_SRC


#+BEGIN_SRC emacs-lisp :tangle no
(use-package perspective
  :config
  (persp-mode))

(persp-turn-off-modestring)

(setq persp-state-default-file (expand-file-name "var/persp-mode/persp-auto-save" user-emacs-directory))
;; (add-hook 'after-init-hook (persp-state-load persp-state-default-file))

(bind-key "C-b" 'projectile-switch-to-buffer wakib-keys-overriding-map)

(add-to-list 'persp-filter-save-buffers-functions
             (lambda (b) (string-prefix-p "todo" (buffer-name b)))
             )
#+END_SRC

**** Package: bufler

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package bufler
  :init
  ;; always switch workspace when switching buffers with bufler
  (setq bufler-workspace-switch-buffer-sets-workspace t)

  ;; redefine lighter function
  (defun my/bufler-workspace-mode-lighter ()
    "Return lighter string for mode line."
    (frame-parameter nil 'bufler-workspace-path-formatted))

  :config
  (bufler-tabs-mode 1)
  (tab-bar-mode 0)

  (defun my/bufler-workspace-set-from-buffer-name (buffer-name)
    (let ((selected-buffer (get-buffer buffer-name)))
      (bufler-workspace-frame-set
       (butlast (bufler-group-tree-leaf-path (bufler-buffers) selected-buffer)))))

  (setf bufler-groups
        (bufler-defgroups
          (group
           ;; Subgroup collecting all named workspaces.
           (auto-workspace))
          (group
           ;; Subgroup collecting all `help-mode' and `info-mode' buffers.
           (group-or "*Help/Info*"
                     (mode-match "*Help*" (rx bos "help-"))
                     (mode-match "*Info*" (rx bos "info-"))))
          (group
           ;; Subgroup collecting all special buffers (i.e. ones that are not
           ;; file-backed), except `magit-status-mode' buffers (which are allowed to fall
           ;; through to other groups, so they end up grouped with their project buffers).
           (group-and "*Special*"
                      (lambda (buffer)
                        (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
                                             buffer)
                                    (funcall (mode-match "Dired" (rx bos "dired"))
                                             buffer)
                                    (funcall (mode-match "Scratch" (rx bos "lisp-interaction"))
                                             buffer)
                                    (funcall (auto-file) buffer))
                          "*Special*")))
           (group
            ;; Subgroup collecting these "special special" buffers
            ;; separately for convenience.
            (name-match "**Special**"
                        (rx bos "*" (or "Messages" "Warnings" "Backtrace") "*")))
           (group
            ;; Subgroup collecting all other Magit buffers, grouped by directory.
            (mode-match "*Magit* (non-status)" (rx bos (or "magit" "forge") "-"))
            (auto-directory))

           ;; Subgroup for Helm buffers.
           (mode-match "*Helm*" (rx bos "helm-"))
           ;; Remaining special buffers are grouped automatically by mode.
           (auto-mode))

          (group
           (group-or "Magit Status"
                     (mode-match "**Magit**" (rx bos "magit-status"))))

          (group
           (group-or "Agenda and Notes"
                     ;; Subgroup collecting buffers in `org-directory' (or "~/org" if
                     ;; `org-directory' is not yet defined).
                     (dir (if (bound-and-true-p org-directory)
                              org-directory
                            "~/Documents/Notes/org/"))))
          (group
           (group-or "All Files"
                     (filename-match "Files" (rx bol (zero-or-more anything)))
                     ;; (mode-match "Dashboard" (rx bos "dashboard"))
                     (mode-match "Scratch" (rx bos "lisp-interaction"))
                     )
           (group
            ;; Subgroup collecting buffers in a projectile project.
            (auto-projectile)))
          ))

  :bind (:map wakib-keys-overriding-map
              ("C-S-b" . bufler)
              ("C-b" . bufler-switch-buffer)
              ("C-<prior>" . tab-line-switch-to-prev-tab)
              ("C-<next>" . tab-line-switch-to-next-tab))

  :hook (;; focus current buffer workspace everytime a file is opened
         ;; (find-file . (lambda () (call-interactively #'bufler-workspace-focus-buffer)))
         (bufler-list-mode . my/set-buffer-large-fringe)
         ;; focus the workspace of the "scratch" buffer at startup, which is the "All Files" workspace
         (dashboard-mode . (lambda() (my/bufler-workspace-set-from-buffer-name "*scratch*")))
         ))
#+END_SRC

**** Basic usage

*Keybindings*

Default keymap

| Keybind | Action                                                        |
|---------+---------------------------------------------------------------|
| C-b     | switch to buffer in current workspace                         |
| C-u C-b | switch to buffer in any workspace (and also switch workspace) |
| C-S-b   | show bufler workspace list                                    |

Inside bufler workspace list

| Keybind | Action                   |
|---------+--------------------------|
| ?       | show available keybinds  |
| f       | focus selected workspace |
| q       | close bufler window      |

**** History

Packages I looked at:

  treemacs workspaces:
    - a workspace can only have projects or folders (but it's possible to use bookmarks for files)
    - Can not list all buffers in current workspace
    - can use projectile and bookmarks to cover some functionality

  eyebrowse:
    - does not save files, only layouts
    - works like i3 workspaces
    - the way it works is that you assign a workspace to a certain purpose and only open certain projects in there

  bufler (bufler-workspace-mode):
    - bufler-list is good for managing buffers. works like magit
    - the tab-bar integration is nice
    - does not save files
    - I tried to use desktop-save-mode for saving stuff, but wasnt very happy with it
    - bufler-workspace-mode allows to automatically switch workspaces when switching buffers
    - can use bookmarks to cover some functionality

  projectile + bookmarks:
    - needs a special file in a project directory to give it a custom name
    - it's not ideal for normal non-repo folders

  perspective and persp-mode (shared):
    - doesn't really have a concept of projects, only buffers
    - saves and loads all perspectives at once. on file load, all buffers from all saved perspectives are opened
    - persp-mode is more popular and supported, while perspective is simpler and nicer to configure

  perspective:
    - the list of buffers in current perspective works better than persp-mode

  persp-mode:
    - it's a pain to setup and the documentation is pretty lacking (these are related)
    - cant make it load save file at startup without resuming session
    - the list of buffers in current perspective shows a bunch or useless buffers

*** File Explorer
**** Information

Since I am using Treemacs worspaces I will explain my view on projects and workspaces.
Here is my ideal usage of workspaces/projects:

- each project has a name that can be easily configured
- a list of projects appears in the dashboard (with their custom names)
- you can search all files in a project
- the project name appears in the modeline
- all of the previous items should also work with a standard folder (even if it's not a repository)

That last item is very important. It's the reason why I projectile by itself isn't enough.

This is a desired but not required feature:
- no files are saved on project directory, or as few as possible. everthing should be saved in the '.emacs.d' folder

Taking this into account, projectile is a good start but it doesnt give me everything I want, so I'm also using Treemacs workspaces.

**** Package: treemacs

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package treemacs
  :hook (treemacs-mode . (lambda() (display-line-numbers-mode -1)))  ;; dont show line numbers in the sidebar
  :bind (:map treemacs-mode-map
              ("<mouse-1>" . treemacs-single-click-expand-action)))  ;; single mouse click to open files and folders


;; you actually have to always run this manually
;;(setq treemacs-display-current-project-exclusively t)


;; (defun my-treemacs-switch-workspace (ws)
;;   (setf (treemacs-current-workspace) (treemacs--select-workspace-by-name ws))
;;   (treemacs--invalidate-buffer-project-cache)
;;   (treemacs--rerender-after-workspace-change)
;;   (treemacs-select-window)
;;   (run-hooks 'treemacs-switch-workspace-hook)
;;   )

;; (defun dashboard-insert-treemacs-workspaces (list-size)
;;   (treemacs--maybe-load-workspaces)
;;   (dashboard-insert-section
;;    "Workspaces:"
;;    (dashboard-subseq (mapcar 'treemacs-workspace->name (treemacs-workspaces)) 0 list-size)
;;    list-size
;;    "w"
;;    `(lambda (&rest ignore) (my-treemacs-switch-workspace ,el))
;;    el)
#+END_SRC

**** Package: treemacs integrations

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package treemacs-projectile
:after treemacs projectile)

(use-package treemacs-magit
:after treemacs magit)
#+END_SRC

*** Dashboard
**** Package: hide-mode-line

#+BEGIN_SRC emacs-lisp :tangle yes
;; hide the modeline in the dashboard buffer
(use-package hide-mode-line)
#+END_SRC

**** Package: page-break-lines

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package page-break-lines
  :config
  ;; some fonts make the line break too long or too short.
  ;; so we just use something that is common and we know that works
  (custom-set-faces
   '(page-break-lines ((t (:family "Noto Sans Mono")))))

  (global-page-break-lines-mode 1))
#+END_SRC

**** Package: dashboard

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dashboard
  :defer nil
  :after hide-mode-line page-break-lines
  :config
  (dashboard-setup-startup-hook)

  (defun dashboard-insert-persp-mode (list-size)
    (dashboard-insert-section
     "Perspectives:"
     bufler-workspace-name
     list-size
     "p"
     `(lambda (&rest ignore) (persp-switch ,el))
     el))

  (defun my/open-dashboard ()
    (interactive)
    (switch-to-buffer (get-buffer "*dashboard*")))

  (add-to-list 'dashboard-item-generators '(perspectives . dashboard-insert-persp-mode))

  ;;  (add-to-list 'dashboard-heading-icons '(treemacs-workspaces . "book"))
  ;;  (dashboard-modify-heading-icons '((treemacs-workspaces . "book")))

  (setq dashboard-items            '((projects  . 5)
                                     (bookmarks . 5)
                                     (recents   . 5)
                                     (agenda    . 5))
        dashboard-center-content    t
        dashboard-set-heading-icons t
        dashboard-set-init-info     t
        dashboard-set-footer        nil
        dashboard-set-navigator     t
        dashboard-startup-banner    (expand-file-name "config-resources/Emacs-logo.svg" user-emacs-directory)
        dashboard-banner-logo-title (format "GNU Emacs version %d.%d" emacs-major-version emacs-minor-version)
        dashboard-init-info         (format "%d packages loaded with straight. finished in %s"
                                            (length (hash-table-keys straight--success-cache)) (emacs-init-time))
        dashboard-navigator-buttons `(((,(all-the-icons-octicon "dashboard" :height 1.1 :v-adjust 0.0)
                                        "config file"
                                        "Open Config File"
                                        (lambda (&rest _) (find-file "~/.emacs.d/config.org"))))))

  :hook ((dashboard-mode . (lambda () (tab-line-mode -1)))
         (dashboard-mode . hide-mode-line-mode)
         (dashboard-mode . my/set-buffer-dashboard-fringe)))
#+END_SRC

*** Modeline
**** Package: doom-modeline

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package doom-modeline
  :init
  (setq doom-modeline-height                   24
        doom-modeline-major-mode-icon          nil
        doom-modeline-major-mode-color-icon    nil
        doom-modeline-indent-info              t
        doom-modeline-buffer-state-icon        t
        doom-modeline-buffer-modification-icon t
        doom-modeline-buffer-file-name-style   'truncate-upto-project)

  :config
  ;; ------ Segment - Bufler ------
  (doom-modeline-def-segment my/bufler-workspace
    "Display current bufler workspace name"
    (if (and (boundp 'bufler-workspace-tabs-mode) bufler-workspace-tabs-mode)
        (let ((active (doom-modeline--active)))
          (when-let (text
                     (propertize (format " %s" (replace-regexp-in-string "Projectile:" "" (my/bufler-workspace-mode-lighter)))
                                 'face '(:foreground "gray60")))
            (if active
                text
              (propertize text 'face 'mode-line-inactive))))
      ""))


  ;; ------ Segment - Buffer Position ------
  ;; Provides information to the buffer position segment
  (setq-default mode-line-position
                '((mode-line-percent-position (" " mode-line-percent-position))
                  (line-number-mode
                   (column-number-mode
                    (column-number-indicator-zero-based " %06l L,%03c C" " %l:%C")
                    " %l")
                   (column-number-mode (column-number-indicator-zero-based " :%c" " :%C")))
                  (:eval (when (or line-number-mode mode-line-percent-position column-number-mode) " "))))

  (doom-modeline-def-segment my/buffer-position
    '("" mode-line-position))


  ;; ------ Segment - VCS ------
  (doom-modeline-def-segment my/vcs
    "Displays the current branch, colored based on its state."
    (let ((active (doom-modeline--active)))
      (when-let ((icon doom-modeline--vcs-icon)
                 (text doom-modeline--vcs-text))
        (concat
         (doom-modeline-spc)
         (doom-modeline-spc)
         (propertize
          (concat
           (if active
               icon
             (doom-modeline-propertize-icon icon 'mode-line-inactive))
           (doom-modeline-vspc))
          'mouse-face 'mode-line-highlight
          'help-echo (get-text-property 1 'help-echo vc-mode)
          'local-map (get-text-property 1 'local-map vc-mode))
         (if active
             text
           (propertize text 'face 'mode-line-inactive))))))

  ;; ------ Segment - Buffer Name ------
  ;; when the buffer is modified only show icon with 'modified' font, not the file name
  (defsubst doom-modeline--buffer-name-custom ()
    "The current buffer name."
    ;; Only display the buffer name if the window is small, but doesn't need to
    ;; respect file-name style.
    (if (and (not (eq doom-modeline-buffer-file-name-style 'file-name))
             doom-modeline--limited-width-p)
        (propertize "%b"
                    'face (cond ((doom-modeline--active) 'doom-modeline-buffer-file)
                                (t 'mode-line-inactive))
                    'mouse-face 'mode-line-highlight
                    'help-echo "Buffer name
mouse-1: Previous buffer\nmouse-3: Next buffer"
                    'local-map mode-line-buffer-identification-keymap)
      (when-let ((name (or doom-modeline--buffer-file-name
                           (doom-modeline-update-buffer-file-name))))
        (if (doom-modeline--active)
            name
          (propertize name 'face 'mode-line-inactive)))))

  (doom-modeline-def-segment buffer-info
    "Combined information about the current buffer, including the current working
directory, the file name, and its state (modified, read-only or non-existent)."
    (concat
     (doom-modeline-spc)
     (doom-modeline--buffer-state-icon)
     (doom-modeline--buffer-mode-icon)
     (doom-modeline--buffer-name-custom)))


  ;; ------ Segment - Buffer encoding and line endings ------
  ;; this is modified to add or remove spaces, to make it look nicer
  (doom-modeline-def-segment my/buffer-encoding
    "Displays the eol and the encoding style of the buffer the same way Atom does."
    (when doom-modeline-buffer-encoding
      (let ((face (if (doom-modeline--active) 'mode-line 'mode-line-inactive))
            (mouse-face 'mode-line-highlight))
        (concat
         (doom-modeline-spc)
         ;; eol type
         (let ((eol (coding-system-eol-type buffer-file-coding-system)))
           (propertize
            (pcase eol
              (0 "LF  ")
              (1 "CRLF  ")
              (2 "CR  ")
              (_ ""))
            'face face
            'mouse-face mouse-face
            'help-echo (format "End-of-line style: %s\nmouse-1: Cycle"
                               (pcase eol
                                 (0 "Unix-style LF")
                                 (1 "DOS-style CRLF")
                                 (2 "Mac-style CR")
                                 (_ "Undecided")))
            'local-map (let ((map (make-sparse-keymap)))
                         (define-key map [mode-line mouse-1] 'mode-line-change-eol)
                         map)))
         ;; coding system
         (propertize
          (let ((sys (coding-system-plist buffer-file-coding-system)))
            (cond ((memq (plist-get sys :category)
                         '(coding-category-undecided coding-category-utf-8))
                   "UTF-8")
                  (t (upcase (symbol-name (plist-get sys :name))))))
          'face face
          'mouse-face mouse-face
          'help-echo 'mode-line-mule-info-help-echo
          'local-map mode-line-coding-system-map)
         ))))


  ;; ------ Modeline Segments ------
  (doom-modeline-def-modeline 'my/main
    '(" " my/bufler-workspace my/vcs bar window-number matches buffer-info remote-host parrot " " selection-info)
    '(objed-state grip irc mu4e gnus github debug repl lsp minor-modes input-method indent-info my/buffer-encoding process checker major-mode my/buffer-position " "))

  ;; ------ Setup Modeline ------
  (defun setup-initial-doom-modeline ()
    (interactive)
    (doom-modeline-set-modeline 'my/main 'default))

  :hook ((after-init . doom-modeline-mode)
         (doom-modeline-mode . setup-initial-doom-modeline)))
#+END_SRC

The default doom modeline, for reference:

#+BEGIN_EXAMPLE
(doom-modeline-def-modeline 'main
  '(bar workspace-name window-number modals matches buffer-info remote-host buffer-position word-count parrot selection-info)
  '(objed-state misc-info persp-name battery grip irc mu4e gnus github debug repl lsp minor-modes input-method indent-info buffer-encoding major-mode process vcs checker))
#+END_EXAMPLE

**** Package: spaceline                                         :disabled:

#+BEGIN_SRC emacs-lisp :tangle no
(use-package spaceline)

;(spaceline-toggle-minor-modes-off)
;(spaceline-toggle-buffer-modified-on)
;(spaceline-toggle-buffer-id-on)
;(spaceline-toggle-version-control-on)
;(spaceline-toggle-selection-info-on)
;(spaceline-toggle-input-method-on)
;(spaceline-toggle-buffer-encoding-abbrev-on)
;(spaceline-toggle-buffer-encoding-on)
;(spaceline-toggle-line-column-on)
;(spaceline-toggle-buffer-position-on)
;(spaceline-toggle-hud-off)


(spaceline-compile
  ; left side
  '(((persp-name)
     :fallback evil-state
     :face highlight-face
     :priority 100)
    (anzu :priority 95)
    auto-compile
    ((buffer-modified buffer-id remote-host)
     :priority 98)
    (major-mode :priority 79)
    (process :when active)
    ((flycheck-error flycheck-warning flycheck-info)
     :when active
     :priority 89)
    (erc-track :when active)
    (version-control :when active
                     :priority 78)
    )
  ; right side
  '(which-function
    (python-pyvenv :fallback python-pyenv)
    (purpose :priority 94)
    (selection-info :priority 95)
    input-method
    ((buffer-encoding-abbrev
      point-position
      line-column)
     :separator " | "
     :priority 96)
    (global :when active)
    (buffer-position :priority 99)
    (hud :priority 99)))



;;(spaceline-emacs-theme)
#+END_SRC

**** Package: telephone-line                                    :disabled:

#+BEGIN_SRC emacs-lisp :tangle no
(use-package telephone-line)

(telephone-line-defsegment* telephone-line-my-buffer-modified-segment ()
"Circle thatchanges color based on buffer modification status"
    (if (buffer-modified-p)
        (propertize (telephone-line-raw " ") 'face '(:foreground "dark orange" :weight bold))
      (telephone-line-raw " ")))

(telephone-line-defsegment* telephone-line-my-bufler-workspaces ()
"Display current bufler workspace name"
  (if (and (boundp 'bufler-workspace-tabs-mode) bufler-workspace-tabs-mode)
      (propertize (format " %s" (replace-regexp-in-string "Projectile:" "" (my/bufler-workspace-mode-lighter)))
                  'face '(:foreground "dark orange" :weight bold))
    "a"))


  (telephone-line-defsegment my-coding-segment ()
    (when (telephone-line-selected-window-active)
      (let* ((code (symbol-name buffer-file-coding-system))
             (eol-type (coding-system-eol-type buffer-file-coding-system))
             (eol (cond
                   ((eq 0 eol-type) "unix")
                   ((eq 1 eol-type) "dos")
                   ((eq 2 eol-type) "mac")
                   (t "-"))))
        (format  "%s " eol))))

(setq telephone-line-secondary-left-separator 'telephone-line-nil)

(defface my-red '((t (:foreground "white" :background "red3"))) "")
(defface my-cyan '((t (:foreground "dim grey" :background "cyan"))) "")

(setq telephone-line-faces
      '((evil . (my-red . my-red))
        (accent . (telephone-line-accent-active . telephone-line-accent-inactive))
        (nil . (mode-line . mode-line-inactive))))

(setq telephone-line-lhs
      '((evil   . (telephone-line-my-bufler-workspaces))
        (accent . (telephone-line-vc-segment
                   telephone-line-erc-modified-channels-segment
                   telephone-line-process-segment))
        (nil    . (telephone-line-my-buffer-modified-segment
                   telephone-line-file-name-absolute-path-segment))))
(setq telephone-line-rhs
      '((nil    . (telephone-line-atom-eol-segment
                   telephone-line-atom-encoding-segment))
        (accent . (telephone-line-major-mode-segment))
        (evil   . (telephone-line-airline-position-segment))))

(telephone-line-mode)
#+END_SRC

**** Package: mood-line                                         :disabled:

#+BEGIN_SRC emacs-lisp :tangle no
(use-package mood-line)
(setq mood-line-show-encoding-information t)
(setq mood-line-show-eol-style t)
(mood-line-mode)
#+END_SRC

**** bufler segment

This part is the bufler segment, without the doom-modeline specific stuff.
This can be used to define a segment for any modeline.

#+BEGIN_SRC emacs-lisp :tangle no
(doom-modeline-def-segment my/bufler-workspace
  "Display current bufler workspace name"
  (if (and (boundp 'bufler-workspace-tabs-mode) bufler-workspace-tabs-mode)
      (propertize (format "  %s" (replace-regexp-in-string "Projectile:" "" (my/bufler-workspace-mode-lighter)))
                  'face '(:foreground "gray60" :weight bold))
    ""))

;; note: should use something like (all-the-icons-alltheicon "git") instead
#+END_SRC

*** Search Multiple Files
**** Information

My option for this is rg.

Other options are:
- deadgrep
- ripgrep
- ag

**** Package: rg

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package rg
  :bind
  (:map wakib-keys-overriding-map
        ("C-S-f" . rg-search-current-dir))  ;; replace 'occur' with rg
  :config
  (rg-define-search rg-search-current-dir
    "Search in the directory of the currently open file or buffer"
    :query ask
    :format literal
    :files "everything"
    :dir "current"
    :flags ("--hidden")))
#+END_SRC

*** Interactive Visual Replace
**** Package: pcre2el

#+BEGIN_SRC emacs-lisp :tangle yes
;; provides a regex backend to be used by visual-regexp-steroids
;; this is to avoid having python installed as a dependency
(use-package pcre2el)
#+END_SRC

**** Package: visual-regexp

#+BEGIN_SRC emacs-lisp :tangle yes
;; you can use actual regex with this package, instead of emacs specific regex
;; this seems better than Anzu for my uses
(use-package visual-regexp
  :init
  ;; visual-regexp-steroids allows using python engine
  ;; (setq vr/engine 'pcre2el)
#+END_SRC

**** visual-regexp patch: search whole buffer

This is a change to allow searching the whole buffer.
Copied from a fork of the visual-regexp repository: https://github.com/grahnen/visual-regexp.el/commit/248f5716f8de092c1915d91821681aed7b31f808

#+BEGIN_SRC emacs-lisp :tangle yes
(defvar vr--full-buffer 'nil)
(setq vr--full-buffer t)

(defun vr--set-target-buffer-start-end ()
  (if vr--full-buffer
      (setq vr--target-buffer-start (point-min)
            vr--target-buffer-end (point-max))
    (setq vr--target-buffer-start
          (if (region-active-p)
              (region-beginning)
            (point))
          vr--target-buffer-end
          (if (region-active-p)
              (region-end)
            (point-max)))))
#+END_SRC

**** visual-regexp patch: use region as input

This next part changes the package's base code to allow using active region as the input regex pattern.
The parts that were changed have comments that identify them.

#+BEGIN_SRC emacs-lisp :tangle yes
:config
;; these are my own variables
(defvar my/visual-regexp-region-flag nil)
(defvar my/visual-regexp-region-val "default string")

;; use active region as replace regexp defeult input
(defun my/visual-replace-from-active-region (beginning end)
  (interactive "r")
  (setq my/visual-regexp-region-flag t)
  (setq my/visual-regexp-region-val (buffer-substring-no-properties (region-beginning) (region-end)))
  (goto-char beginning)
  (deactivate-mark)
  (call-interactively 'vr/query-replace))

;; wrapper function that checks if there is an active region or not
(defun my/visual-replace-with-active-region-support ()
  (interactive)
  (if (region-active-p)
      (call-interactively 'my/visual-replace-from-active-region)
    (call-interactively 'vr/query-replace)))

;; this is the core function that was changed
(defun vr--set-regexp-string ()
  (save-excursion
    ;; deactivate mark so that we can see our faces instead of region-face.
    (deactivate-mark)
    (setq vr--in-minibuffer 'vr--minibuffer-regexp)
    (setq vr--last-minibuffer-contents "")
    (custom-reevaluate-setting 'vr/match-separator-string)
    (let* ((minibuffer-allow-text-properties t)
           (history-add-new-input nil)
           (text-property-default-nonsticky
            (cons '(separator . t) text-property-default-nonsticky))
           ;; seperator and query-replace-from-to-history copy/pasted from replace.el
           (separator
            (when vr/match-separator-string
              (propertize "\0"
                          'display vr/match-separator-string
                          'separator t)))
           (query-replace-from-to-history
            (append
             (when separator
               (mapcar (lambda (from-to)
                         (concat (query-replace-descr (car from-to))
                                 separator
                                 (query-replace-descr (cdr from-to))))
                       (symbol-value vr/query-replace-defaults-variable)))
             (symbol-value vr/query-replace-from-history-variable)))

           ;; Changes I made: the next two lines
           (my-var my/visual-regexp-region-flag))
      (setq my/visual-regexp-region-flag nil)

      (setq vr--regexp-string
            (read-from-minibuffer
             " " ;; prompt will be set in vr--minibuffer-setup

             ;; I also added these three lines
             (if my-var
                 my/visual-regexp-region-val
               nil)

             vr/minibuffer-keymap
             nil 'query-replace-from-to-history))
      (let ((split (vr--query-replace--split-string vr--regexp-string)))
        (if (not (consp split))
            (add-to-history vr/query-replace-from-history-variable vr--regexp-string nil t)
          (add-to-history vr/query-replace-from-history-variable (car split) nil t)
          (add-to-history vr/query-replace-to-history-variable (cdr split) nil t)
          (add-to-history vr/query-replace-defaults-variable split nil t))))))
#+END_SRC

**** Package: visual-regexp part 2

#+BEGIN_SRC emacs-lisp :tangle yes
  :bind
  (:map wakib-keys-overriding-map
        ("C-h" . my/visual-replace-with-active-region-support)))

;; using C-7 inside swiper seems better. it does the same thing
;; (bind-key "C-S-h" 'vr/mc-mark wakib-keys-overriding-map)
#+END_SRC

*** Org mode
**** Package: async

The code below executes org-babel-tangle asynchronously when config.org is saved.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package async
  :config
  (defvar *config-file* (expand-file-name "config.org" user-emacs-directory)
    "The configuration file.")

  (defvar *config-last-change* (nth 5 (file-attributes *config-file*))
    "Last modification time of the configuration file.")

  (defvar *show-async-tangle-results* nil
    "Keeps *emacs* async buffers around for later inspection.")

  (defun my/config-updated ()
    "Checks if the configuration file has been updated since the last time."
    (time-less-p *config-last-change*
                 (nth 5 (file-attributes *config-file*))))

  (defun my/config-tangle ()
    "Tangles the user configuration org file asynchronously."
    (when (my/config-updated)
      (setq *config-last-change*
            (nth 5 (file-attributes *config-file*)))
      (my/async-babel-tangle *config-file*)))

  (defun my/async-babel-tangle (org-file)
    "Tangles an org file asynchronously."
    (let ((init-tangle-start-time (current-time))
          (file (buffer-file-name))
          (async-quiet-switch "-q"))
      (async-start
       `(lambda ()
          (require 'org)
          (org-babel-tangle-file ,org-file))
       (unless *show-async-tangle-results*
         `(lambda (result)
            (if result
                (message "SUCCESS: %s successfully tangled (%.2fs)."
                         ,org-file
                         (float-time (time-subtract (current-time)
                                                    ',init-tangle-start-time)))
              (message "ERROR: %s as tangle failed." ,org-file)))))))
  )
#+END_SRC

**** Package: org

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org
  :straight org-plus-contrib
  :demand t
  :config
  (setq org-startup-indented              t             ;; indent text to heading level
        org-startup-folded                'content      ;; set initial view to 'content' (show all headlines)
        org-descriptive-links             t             ;; highlight links
        org-agenda-dim-blocked-tasks      t             ;; dim blocked tasks
        org-agenda-skip-deadline-if-done  t             ;; avoid showing unecessary tasks
        org-agenda-skip-scheduled-if-done t
        org-agenda-skip-archived-trees    nil
        org-cycle-separator-lines         2             ;; set how may real newlines are necessary to display a newline when folded.
        org-todo-keywords                 '((sequence "TODO" "ONGOING" "REVIEW" "|" "DONE" "CANCEL"))  ;; default todo keywords
        org-directory                     "~/Documents/Notes/org/"   ;; set agenda location
        org-agenda-files                  '("~/Documents/Notes/org/")
        org-log-done                      (quote time)  ;; insert a note in a task when it is marked as done, which includes a timestamp
        org-support-shift-select          t             ;; allows using the shif key for selecting text
        org-fontify-done-headline         t             ;; grey out completed tasks
        org-src-preserve-indentation      t             ;; do not put two spaces on the left
        org-src-tab-acts-natively         t             ;; make tab behave as it would normally for that language
        org-ellipsis                      " ⤵"          ;; Changing the org-mode ellipsis
        ;; setq org-ellipsis              " ▼"
        org-image-actual-width            nil)          ;; if there is something like #+ATTR_ORG: width="200", resize to 200, otherwise don't resize

  ;; customize face for 'DONE' headings
  (custom-set-faces '(org-headline-done
                      ((((class color) (min-colors 16) (background dark))
                        (:foreground "dim gray")))))

  ;; allow C-S-<arrow> selection of text
  (eval-after-load "org"
    '(progn
       (define-key org-mode-map (kbd "<C-S-left>") nil)
       (define-key org-mode-map (kbd "<C-S-right>") nil)
       (define-key org-mode-map (kbd "<C-S-up>") nil)
       (define-key org-mode-map (kbd "<C-S-down>") nil)))

  :bind
  (:map org-mode-map
        ("C-d g" . counsel-org-goto)
        ("C-d C-<up>" . org-previous-visible-heading)
        ("C-d C-<down>" . org-next-visible-heading))

  :hook ((after-save . my/config-tangle)
         (org-mode . (lambda ()
                       "Beautify Org Checkbox Symbol"
                       (push '("[ ]" .  "☐") prettify-symbols-alist)
                       (push '("[X]" . "☑" ) prettify-symbols-alist)
                       (push '("[-]" . "❍" ) prettify-symbols-alist)
                       ;; replace text of org blocks with symbols
                       ;; (push '("#+BEGIN_SRC" . "↦" ) prettify-symbols-alist)
                       ;; (push '("#+END_SRC" . "⇤" ) prettify-symbols-alist)
                       ;; (push '("#+BEGIN_EXAMPLE" . "↦" ) prettify-symbols-alist)
                       ;; (push '("#+END_EXAMPLE" . "⇤" ) prettify-symbols-alist)
                       ;; (push '("#+BEGIN_QUOTE" . "↦" ) prettify-symbols-alist)
                       ;; (push '("#+END_QUOTE" . "⇤" ) prettify-symbols-alist)
                       ;; (push '("#+begin_quote" . "↦" ) prettify-symbols-alist)
                       ;; (push '("#+end_quote" . "⇤" ) prettify-symbols-alist)
                       ;; (push '("#+begin_example" . "↦" ) prettify-symbols-alist)
                       ;; (push '("#+end_example" . "⇤" ) prettify-symbols-alist)
                       ;; (push '("#+begin_src" . "↦" ) prettify-symbols-alist)
                       ;; (push '("#+end_src" . "⇤" ) prettify-symbols-alist)
                       (prettify-symbols-mode)))))

#+END_SRC

**** Package: org-bullets

Org Bullets

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-bullets
    :hook (org-mode . org-bullets-mode))
#+END_SRC

**** Package: toc-org

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package toc-org
  :hook (org-mode . toc-org-mode))
#+END_SRC

*** Spellcheck
**** Package: flyspell

#+BEGIN_SRC emacs-lisp :tangle yes
;; defer is used to only load package when mode is activated
(use-package flyspell
  :defer t
  :config
  ;; set backend and language
  (setq ispell-program-name "aspell"
        ispell-local-dictionary "en_US")
  :bind
  (:map wakib-keys-overriding-map
        ("C-." . flyspell-correct-at-point))
  :hook (org-mode . flyspell-mode)) ;; automatically enable spellchecker for org files (doesn't affect source blocks)
#+END_SRC

**** Package: flyspell-correct-ivy

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package flyspell-correct-ivy
  :config
  (setq flyspell-correct-interface #'flyspell-correct-ivy)
  :bind
  (:map flyspell-mouse-map
   ("<mouse-2>" . nil)
   ("<mouse-3>" . flyspell-correct-word)))
#+END_SRC

**** Basic usage

Use hydra menu to enable/disable.

*** REVIEW Code Completion
**** Package: company

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package company
  :config
  (setq company-global-modes '(not org-mode))
  (global-company-mode 1))
#+END_SRC

*** Generic Completion Framework
**** Information

Helm and ivy are Emacs frameworks for incremental completions and narrowing selections.

Completion framework being used:

Ivy + Swiper + Counsel

ivy is the mechanism that handles all selection lists, narrowing
    them down using a variety of possible builders (regular expressions of
    flexible matching).  It also provides a base interface for any
    function that needs to receive input based on a list of candidates.

counsel provides a superset of functions for navigating the file
    system, switching buffers, etc. that expand on the basic features
    supported by Ivy.  For instance, switching buffers with Counsel offers
    a preview of their contents in the window, whereas regular Ivy does
    not.

swiper is a tool for performing searches, powered by Ivy, all while
    presenting a preview of the results.

**** Package: ivy

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ivy
  :defer 0.1
  :diminish
  :custom
  (ivy-use-virtual-buffers t)
  (ivy-count-format "%d/%d ")
  (ivy-wrap t)
  (ivy-re-builders-alist
   '((t . ivy--regex-plus)))  ; also try: ivy--regex-fuzzy
  (ivy-initial-inputs-alist nil)
  ;; (ivy-sort-functions-alist
  ;;     '((t)
  ;;       (counsel-find-file . ivy-sort-file-function-default)))
  :config
  (ivy-mode)
  :bind
  (:map ivy-minibuffer-map
        ("TAB" . ivy-alt-done)))
#+END_SRC

**** Package: counsel

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package counsel
  :after ivy
  :config (counsel-mode)
  :bind
  (:map wakib-keys-overriding-map
        ("C-p" . counsel-fzf)
        ("C-o" . counsel-find-file)
        ("C-S-v" . counsel-yank-pop)))
#+END_SRC

**** Package: swiper

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package swiper
  :after ivy
  :config
  (defun swiper-isearch-with-selection ()
    "Swiper-isearch, but uses active selection as input if it exists"
    (interactive)
    (if (region-active-p) (swiper-isearch-thing-at-point)
      (swiper-isearch nil)))
  :bind
  (:map wakib-keys-overriding-map
        ("C-f" . swiper-isearch-with-selection))   ;; replace 'isearch' with swiper
  (:map swiper-map
        ("C-r" . swiper-mc))   ;; put a cursor on every swiper search result
)
#+END_SRC

**** Package: flx

Ivy sorts large lists using flx's scoring mechanism, if it's installed.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package flx)
#+END_SRC

**** Package: ivy-prescient

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package prescient
  :custom
  (prescient-history-length 50)
  (prescient-filter-method '(literal regexp))
  :config
  (prescient-persist-mode 1))

(use-package ivy-prescient
  :after (prescient ivy)
  :custom
  (ivy-prescient-sort-commands
   ;; things that shouldnt be sorted go n this list
   '(:not swiper swiper-isearch ivy-switch-buffer counsel-switch-buffer flyspell-correct-ivy counsel-find-file find-file bufler-workspace-switch-buffer bufler-switch-buffer))
  (ivy-prescient-excluded-commands '(counsel-find-file find-file))
  (ivy-prescient-retain-classic-highlighting t)
  (ivy-prescient-enable-filtering nil)
  (ivy-prescient-enable-sorting t)
  :config
  (ivy-prescient-mode 1))
#+END_SRC

**** Package: ivy-rich

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ivy-rich
  :custom
  (ivy-rich-path-style 'abbreviate)
  :config
  (setcdr (assq t ivy-format-functions-alist)
          #'ivy-format-function-line)
  (ivy-rich-mode 1))

(use-package all-the-icons-ivy-rich
  :custom
  (all-the-icons-ivy-rich-icon-size 1.0)
  :config (all-the-icons-ivy-rich-mode 1))
#+END_SRC

**** Package: ivy-posframe

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ivy-posframe
  :custom
  (ivy-posframe-parameters
   '((left-fringe           . 2)
     (right-fringe          . 2)
     (internal-border-width . 2)))
  (ivy-posframe-height-alist
   '((swiper               . 1)
     (swiper-isearch       . 1)
     (flyspell-correct-ivy . 10)
     (t . 20)))
  (ivy-posframe-display-functions-alist
   '((complete-symbol      . ivy-posframe-display-at-point)
     (swiper               . ivy-display-function-fallback)
     (swiper-isearch       . ivy-display-function-fallback)
     (flyspell-correct-ivy . ivy-posframe-display-at-point)
     (t                    . ivy-posframe-display-at-frame-center)))
  :config (ivy-posframe-mode 1))
#+END_SRC

**** Package: counsel-projectile

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package counsel-projectile)
#+END_SRC

**** Package: isearch (improvements)

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package isearch
  :straight nil
  :custom
  (search-whitespace-regexp ".*?")
  (isearch-lax-whitespace t)
  (isearch-regexp-lax-whitespace nil)
  :bind
  (:map isearch-mode-map
        ("j" . isearch-repeat-backward)
        ("k" . isearch-repeat-forward)))
#+END_SRC

**** Package: counsel-fzf configuration

note:
do not hide project files in .gitignore
use ~/.config/fd/ignore to ignore files

#+BEGIN_SRC emacs-lisp :tangle yes
(when (zerop (length (getenv "FZF_DEFAULT_COMMAND")))
    (setenv "FZF_DEFAULT_COMMAND"
            (and (executable-find "fd")
                 (concat "fd"
                         " "
                         "--type"
                         " "
                         "'file'"
                         " "
                         "--hidden"
                         " "
                         "--no-ignore-vcs"
                         " "
                         "--ignore-case"
                         " "
                         "--exclude"
                         " "
                         "'.git/*'"))))
#+END_SRC

**** Basic usage

When using swiper, press C-7 to add a cursor to all highlighted items

*** Window Switcher
**** Package: switch-window

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package switch-window
  :bind
  (:map wakib-keys-overriding-map
        ("M-H" . switch-window)))    ;; for some reason writing it as M-S-h doesn't work
#+END_SRC

*** Git Integration
**** Package: magit

#+BEGIN_QUOTE
Magit is a complete text-based user interface to Git. It fills the glaring gap between the Git command-line interface and various GUIs, letting you perform trivial as well as elaborate version control tasks with just a couple of mnemonic key presses.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package magit
  :hook (magit-mode . my/set-buffer-large-fringe))
#+END_SRC

**** Package: diff-hl

#+BEGIN_QUOTE
Emacs package for highlighting uncommitted changes
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package diff-hl
  :config
  (global-diff-hl-mode)
  (diff-hl-flydiff-mode)  ;; see changes in real time
  :hook ((magit-pre-refresh . diff-hl-magit-pre-refresh)
         (magit-post-refresh . diff-hl-magit-post-refresh)
         (org-mode . (lambda () (diff-hl-mode -1)))))         ;; disable git gutter for org mode
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
(use-package git-gutter
  :config
  (setq git-gutter:update-interval 1)
  (global-git-gutter-mode)

  ;; lines that are 'inserted' cause problems with org headings ellipsis symbol
  (defun disable-gutter()
    (interactive)
    (diff-hl-mode 0))

  :hook
  (org-mode . disable-gutter))
#+END_SRC

*** TODO Templates and Snippets
**** Package: yasnippet

#+BEGIN_SRC emacs-lisp :tangle no
(use-package yasnippet-snippets
  :defer t)

(use-package yasnippet
  :hook
  ((prog-mode . yas-minor-mode))
  :config
  (require 'yasnippet-snippets)
  (yas-reload-all))

(use-package ivy-yasnippet
  :bind ("M-y" . ivy-yasnippet))
#+END_SRC

*** REVIEW Multiple Cursors
**** Package: multiple-cursors

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package multiple-cursors
  :init
  (custom-set-variables `(mc/always-run-for-all ,t))
  :config
  (define-key mc/keymap [remap keyboard-quit] 'mc/keyboard-quit)
  (define-key rectangular-region-mode-map [remap keyboard-quit] 'rrm/keyboard-quit)
  ;; use C-7 to add a cursor to every swiper selection
  (add-to-list 'mc/cmds-to-run-once 'swiper-mc)
  :bind
  (("M-S" . set-rectangular-region-anchor)
   :map mc/keymap
     ("M-S-<down>" . mc/mark-next-like-this)
     ("M-S-<up>" . mc/mark-previous-like-this)
     ("<C-down-mouse-1>" . mc/add-cursor-on-click)))
#+END_SRC

*** Cut/Copy whole line or region
**** Package: whole-line-or-region

when C-x or C-c are pressed with no active selection, cut/copy the line instead
default behaviour is to do the operation between the cursor and the mark, which is hidden

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package whole-line-or-region
  :bind (:map wakib-keys-overriding-map
              ("C-c" . whole-line-or-region-kill-ring-save)
              ("C-x" . whole-line-or-region-kill-region)
              ("C-k" . whole-line-or-region-delete-region)))

;; Comment code lines, command reacts based on the major mode.
;; (bind-key "C-«" 'whole-line-or-region-comment-dwim wakib-keys-overriding-map)
#+END_SRC

*** Presentations
**** Package: ox-reveal

Write in Org mode and export to HTML with reveal.js

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ox-reveal
  :config
  ;; (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
  (setq org-reveal-root        "~/.reveal/reveal.js-master"
        org-reveal-title-slide "%t"))     ;; set content of initial slide to %t - Title
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
;; necessary to highlight source code
(use-package htmlize)
#+END_SRC

*** Terminal Colors
**** Package: ansi-color

Deals with terminal escape codes in compilation-mode.
This should make compilation buffers handle ANSI escape sequences instead of displaying them as raw strings.
This mostly helps by adding support for terminal colors.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ansi-color
  :config
  (setq compilation-scroll-output t) ;; the compilation buffer always scrolls to follow output as it comes in

  (defun my/ansi-colorize-buffer ()
    (let ((buffer-read-only nil))
      (ansi-color-apply-on-region (point-min) (point-max))))

  :hook (compilation-filter . my/ansi-colorize-buffer))
#+END_SRC

*** Move text
**** Package: drag-stuff

Moving text both horizontally and vertically.
I use the M + arrow keys for this. Since this interferes with org-mode, we use the default org-mode keybinds when the cursor is in a org-heading.

#+BEGIN_SRC emacs-lisp :tangle yes
;; alt+up/down to move line or region
(use-package drag-stuff
  :config

  ;; alt + left/right to indent blocks of text
  ;; moving text left and right doesn't actually use this package
  (defun my/meta-right-org-heading-detect ()
    "Executes a different function if the cursor is in a org heading.
Otherwise, just execute the normal behaviour"
    (interactive)
    (if (and (equal major-mode 'org-mode) (org-at-heading-p))
        (org-do-demote)
      (my/tab-region (my/get-buffer-indentation-size))))

  (defun my/meta-left-org-heading-detect ()
    "Executes a different function if the cursor is in a org heading.
Otherwise, just execute the normal behaviour"
    (interactive)
    (if (and (equal major-mode 'org-mode) (org-at-heading-p))
        (org-do-promote)
      (my/untab-region (my/get-buffer-indentation-size))))

  (defun my/meta-up-org-heading-detect ()
    "Executes a different function if the cursor is in a org heading.
Otherwise, just execute the normal behaviour"
    (interactive)
    (if (org-at-heading-p)
        (org-move-subtree-up)
      (call-interactively 'drag-stuff-up)))

  (defun my/meta-down-org-heading-detect ()
    "Executes a different function if the cursor is in a org heading.
Otherwise, just execute the normal behaviour"
    (interactive)
    (if (org-at-heading-p)
        (org-move-subtree-down)
      (call-interactively 'drag-stuff-down)))

  :bind
  (:map wakib-keys-overriding-map
        ("M-<left>" . my/meta-left-org-heading-detect)
        ("M-<right>" . my/meta-right-org-heading-detect)
        ("M-<up>" . my/meta-up-org-heading-detect)
        ("M-<down>" . my/meta-down-org-heading-detect)))
#+END_SRC

*** Scroll on Jump
**** Package: scroll-on-jump                                    :disabled:

#+BEGIN_SRC emacs-lisp :tangle no
(use-package scroll-on-jump
  :config
  (setq scroll-on-jump-duration 0.6)
  :straight
  (scroll-on-jump
    :type git
    :host gitlab
    :repo "ideasman42/emacs-scroll-on-jump")
  :bind
  ("<prior>" . (scroll-on-jump-interactive 'scroll-down-command))
  ("<next>" . (scroll-on-jump-interactive 'scroll-up-command)))
#+END_SRC

*** Hydras
**** Package: hydra

This should be one of the last packages to be loaded.
The other packages first have to create their hydras and only after that should we create a menu using those hydras.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package hydra
  :pretty-hydra
  ((:color teal :quit-key "q" :title "Hydra Main Menu")
   ("Project"
    (("p" projectile-hydra/body "projectile hydra"))
    "Toggles"
    (("t" hydra-toggles/body "toggles hydra"))
    "Open"
    (("o" hydra-open/body "open hydra"))
    "Git"
    (("g" hydra-git/body "git hydra"))
    "Packages"
    (("P" hydra-packages/body "packages hydra"))
    ))
  :bind
  ("<menu>" . hydra-hydra/body))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package hydra-posframe
  :hook (after-init . hydra-posframe-enable)
  :disabled
  :straight
  (hydra-posframe
   :type git
   :host github
   :repo "Ladicle/hydra-posframe"))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
show a different main hydra, depending on major moda
(use-package major-mode-hydra
  :bind
  ("M-SPC" . major-mode-hydra))
#+END_SRC

**** Hydra: toggles

#+BEGIN_SRC emacs-lisp :tangle yes
(pretty-hydra-define hydra-toggles
  (:color amaranth :quit-key "q" :title "Toggle")
  ("Basic"
   (("n" display-line-numbers-mode "line numbers" :toggle t)
    ("N" global-display-line-numbers-mode "line numbers (global)" :toggle t)
    ;;("r" rainbow-mode "rainbow" :toggle t)
    ("b" page-break-lines-mode "page break lines" :toggle t)
    ("g" diff-hl-mode "git gutter" :toggle t))
   "Highlight"
   (;;("s" symbol-overlay-mode "symbol" :toggle t)
    ("l" global-hl-line-mode "current line (global)" :toggle t)
    ;;("t" hl-todo-mode "todo" :toggle t)
    ;;("x" highlight-sexp-mode "sexp" :toggle t)
    ("p" show-paren-mode "matching parens" :toggle t))
   "Coding"
   (("f" flycheck-mode "flycheck" :toggle t)
    ("s" flyspell-mode "spellcheck" :toggle t)
    ("c" company-mode "company" :toggle t)
    ("P" electric-pair-mode "automatic parens pairing" :toggle t))
   "Indentation"
   (("T" my/switch-indentation-use-tabs "indent with tabs")
    ("S" my/switch-indentation-use-spaces "indent with spaces"))
   "UI"
   (("e" treemacs "file explorer sidebar" :toggle t)
    ("t" tab-line-mode "tab-line" :toggle t)
    ("m" hide-mode-line-mode "modeline" :toggle t))
   "Emacs"
   (("D" toggle-debug-on-error "debug on error" :toggle (default-value 'debug-on-error))
    ("X" toggle-debug-on-quit "debug on quit" :toggle (default-value 'debug-on-quit)))))
#+END_SRC

**** Hydra: open

#+BEGIN_SRC emacs-lisp :tangle yes
(pretty-hydra-define hydra-open
  (:color teal :quit-key "q")
  ("Open"
   (("d" my/open-dashboard "dashboard")
    )))
#+END_SRC

**** Hydra: git

#+BEGIN_SRC emacs-lisp :tangle yes
(pretty-hydra-define hydra-git
  (:color teal :quit-key "q")
  ("Git"
   (("s" magit-status "show git status")
    )))
#+END_SRC

**** Hydra: package manager

#+BEGIN_SRC emacs-lisp :tangle yes
(pretty-hydra-define hydra-packages
  (:color teal :quit-key "q")
  ("Package Manager"
   (("u" straight-use-package "use package (install temporarily)")
    ("r" straight-rebuild-all "rebuild all packages")
    )))
#+END_SRC

**** Font fix

Depending on the font, the line below the hydra title can be too long or too short.
Here, we are replacing the font, only targeting the unicode symbol used to draw the line.

#+BEGIN_SRC emacs-lisp :tangle yes
(set-fontset-font "fontset-default"
                  '(#x2500 . #x250F) (font-spec :name "SourceCodePro"))
#+END_SRC

**** Usage Notes

The color of a hydra is used to define how a hydra exits after executing.
The default color is red.

Behavior by color:

| color    | toggle                     |
|----------+----------------------------|
| red      |                            |
| blue     | :exit t                    |
| amaranth | :foreign-keys warn         |
| teal     | :foreign-keys warn :exit t |
| pink     | :foreign-keys run          |

*** Other smaller additions
**** Package: undo-tree

Change undo/redo behaviour

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package undo-tree
  :config
  (global-undo-tree-mode)
  :bind
  (:map wakib-keys-overriding-map
        ("C-z" . undo-tree-undo)
        ("C-y" . undo-tree-redo)))
#+END_SRC

**** Package: sudo-edit

Edit files with elevated permissions

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package sudo-edit)
#+END_SRC

**** Package: bind-key

 Key Rebinding utility. Will be used in the keybinds section

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package bind-key)
#+END_SRC

**** Package: which-key

Display available keybindings in popup after a prefix key is pressed

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package which-key
  :config
  (which-key-mode))
#+END_SRC

**** Package: recentf

Save a list of most recently edited files.
We exclude elpa folder from recent files to prevent autoload files filling it up.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package recentf
  :config
  (recentf-mode)
  (setq recentf-max-saved-items 100
        recentf-exclude '("COMMIT_EDITMSG\\'"
                          "[/\\]elpa/\\.*"
                          "[/\\]var/\\.*")))
#+END_SRC

**** Package: restart-emacs

Add an easy way to restart emacs

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package restart-emacs
  :commands (restart-emacs)
  :bind
  (:map wakib-keys-overriding-map
        ("C-S-<f5>" . restart-emacs)))
#+END_SRC

**** Package: expand-region

Expand region in logical increments.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package expand-region
  :bind ("M-A" . er/expand-region))
#+END_SRC

**** Package: avy

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package avy
  :bind ("M-m" . avy-goto-char))
#+END_SRC

**** Package: ibuffer-vc                                        :disabled:

#+BEGIN_SRC emacs-lisp :tangle no
(use-package ibuffer-vc)
#+END_SRC

**** Package: symbolword-mode                                   :disabled:

#+BEGIN_SRC emacs-lisp :tangle no
(use-package symbolword-mode
  :init
  (symbolword-mode 1))
#+END_SRC

**** Package: comment-dwim-2

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package comment-dwim-2
  :bind
  ("C-«" . comment-dwim-2)
  (:map org-mode-map
        ("C-«" . org-comment-dwim-2)))
#+END_SRC

**** Package: ssh-agency

Use this so magit can actually use the host system's ssh keys

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ssh-agency)
#+END_SRC

**** Package: yascroll

Show a buffer position indicator on the right fringe

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package yascroll
  :config
  (global-yascroll-bar-mode 1))
#+END_SRC

**** Package: annotate

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package annotate
  :hook
  (org-mode . annotate-mode)
  (save-buffer . annotate-save-annotations))
#+END_SRC

**** Package: modern-fringes

Replace the default fringe icons with better ones

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package modern-fringes
  :config
  (modern-fringes-mode 1))
#+END_SRC

**** Package: helpful

Better formatting for help buffers

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package helpful
  :config
  (setq counsel-describe-function-function #'helpful-callable
        counsel-describe-variable-function #'helpful-variable))
#+END_SRC

**** Package: exec-path-from-shell

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package exec-path-from-shell
  :config
  (exec-path-from-shell-initialize))
#+END_SRC

** Programming languages

Some of these entries are just to add syntax highlighting. Others add more features.

*** REVIEW Markdown
**** Information

Adds:
    - syntax highlighting

**** Package: markdown-mode

#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package markdown-mode
;;   :mode "\\.\\(m\\(ark\\)?down\\|md\\)$")

(use-package markdown-mode
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "pandoc --css $HOME/.emacs.d/markdown-css/github.css"))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package markdown-preview-mode)

;; Fast GitHub-flavored live preview
(use-package vmd-mode)

;; ;; Or using hooks
;; (use-package grip-mode
;;   :config
;;   (setq grip-preview-use-webkit t)
;;   :bind (:map markdown-mode-command-map
;;          ("g" . grip-mode)))
#+END_SRC

*** YAML
**** Information

Adds:
    - syntax highlighting

**** Package: yaml-mode

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package yaml-mode
  :mode "\\.y\\(a\\)?ml\\'")
#+END_SRC

*** C#
**** Information

Adds:
    - syntax highlighting

**** Package: csharp-mode

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package csharp-mode
   :mode ("\\.cs\\'" . csharp-mode)
   :interpreter ("csharp" . csharp-mode))
#+END_SRC

*** Terraform
**** Information

Adds:
    - syntax highlighting

**** Package: terraform-mode

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package terraform-mode
  :mode "\\.tf\\'")
#+END_SRC

*** HCL (Hashicorp Configuration Language)
**** Information

Adds:
    - syntax highlighting

**** Package: hcl-mode

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package hcl-mode
  :disabled
  :mode "\\.tf.json\\'")
#+END_SRC

*** Dockerfile
**** Information

Adds:
    - syntax highlighting
    - image building

**** Package: dockerfile-mode

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dockerfile-mode
  :mode "Dockerfile\\'")

(put 'dockerfile-image-name 'safe-local-variable #'stringp)
#+END_SRC

**** Basic usage

To build a docker image with emacs, use C-d C-b (normally C-c C-b), and add the following to the top of a Dockerfile:

#+BEGIN_EXAMPLE
## -*- docker-image-name: "your-image-name-here" -*-
#+END_EXAMPLE

This variable is declared as safe in the previous source block so you aren't asked if it's safe every time you load a Dockerfile.

*** TODO Lisp
*** TODO Latex
** Personal Settings

Load personal settings file if it exists.
This is where you put sensitive information like emails and credentials.

#+BEGIN_SRC emacs-lisp :tangle yes
(let ((personal-settings (expand-file-name "personal.el" user-emacs-directory)))
 (when (file-exists-p personal-settings)
   (load-file personal-settings)))
#+END_SRC

** Final Setup

things to do after making changes and right before startup

#+BEGIN_SRC emacs-lisp :tangle yes
(setq debug-on-error nil)

;; new buffers are opened in org-mode by default
(setq-default major-mode 'org-mode)



;; use this next snippet to add blank space at the top of the window
;; note: the background should be set to the same as the buffer
;; (setq header-line-format " ")

;; another option is to use the tab-line. Just give the function responsible for tab names an error and the tab will be empty.





;;; config.el ends here
#+END_SRC



*org heading levels*

This next part is not relative to the emacs configuration.
It makes changes that make this file easier to navigate in Org mode.
Here, we make the config file show 2 heading levels at startup, to make navigation easier.

;;; Local Variables:
;;; eval: (org-content 3)
;;; End:
