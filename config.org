#+title: Emacs Configuration
#+startup: inlineimages

* Table of contents                                                     :TOC_2:
- [[#introduction][Introduction]]
  - [[#what-is-this-and-who-is-it-for][What is this and who is it for?]]
  - [[#dependencies][Dependencies]]
  - [[#installation][Installation]]
  - [[#custom-keybindings][Custom Keybindings]]
  - [[#fixes-and-improvements][Fixes and improvements]]
- [[#early-init-file][Early Init file]]
  - [[#file-header][File Header]]
  - [[#start-time-optimizations][Start time optimizations]]
  - [[#gui-changes-that-deserve-to-be-in-early-init][GUI changes that deserve to be in early-init]]
- [[#configuration-file][Configuration file]]
  - [[#file-header-1][File Header]]
  - [[#initial-setup][Initial Setup]]
  - [[#bootstrap][Bootstrap]]
  - [[#user-interface][User Interface]]
  - [[#functions][Functions]]
  - [[#keybindings][Keybindings]]
  - [[#defaults][Defaults]]
  - [[#features][Features]]
  - [[#programming-languages][Programming languages]]
  - [[#personal-settings][Personal Settings]]
  - [[#final-setup][Final Setup]]

* Introduction
** What is this and who is it for?

This emacs configuration is mostly to just use Org mode.

Many of the keybindings are replaced with what I consider "standard" keybinds, like those you would find in Sublime Text, Atom and VSCode. Likewise, many of the features you would expect from some of these editors are also implemented here.

The goal of this configuration is to provide a comfortable experience editing Org mode files to programmers that are accustomed to modern text editors.

** Dependencies

In order for everything to work correctly, you should have the following installed on your system:

- ripgrep
- fd
- fzf
- aspell or hunspell
- git

** Installation

git clone ...

open the command menu with M-x and run 'all-the-icons-install-fonts'

** Custom Keybindings

The conversion to use "modern" keybinds is mostly dealt with by [[https://github.com/darkstego/wakib-keys][wakib-keys]].
I customized the commands and changed a few keys but it's still similar to the default package.

The following image shows all the keys you need to know to get started:

#+ATTR_ORG: :width 1200
[[./config-resources/keyboard-layout-ctrl.png]]

The wakib-keys package defines a lot more bindings that are more oriented towars speed and productivity.
If you're interested, go check it out.

Note: this image was done using [[http://www.keyboard-layout-editor.com/#/][Keyboard Layout Editor]].

** Fixes and improvements

Todo:
- [X] workspaces in dashboard
- [X] org mode: when pressing enter at the end of line that starts with '-', it adds two spaces
- [X] setting scroll margin messes up org indent mode. the first/last line sometimes appears unindented
- [X] change project name in the modeline (the name itself + its appereance)
- [X] change org souce block header highlight color
- [X] home key should toggle between row 0 and first character in line (beginning and indentation, in emacs terms)
- [X] when line number is 0-9, and it changes to a greater value, the numbers column width changes and the whole buffers moves.
- [X] disable completion for plain text modes (org-mode)
- [X] config.org should open with 2 levels of headings
- [X] add tabs like Sublime Text or somehow show tabs in current project
- [X] disable tab-line in dashboard
- [X] hidden tab-bar reappears when doing: M-x ESC
- [X] mode-line lighter for current indentation settings isn't there anymore
- [X] add icon to custom projectile doom-modeline segment
- [X] workspaces in dashboard icon
- [X] org-indent messes up hl-line-mode. it only has one face for the indentation. this creates a gap from line number to line. fix by changing bg of curr line number
- [X] background colour of org document keywords is not the same as normal background
- [X] ctrl+shift+left/right doesnt work
- [X] a hex color should count as a full word when selecting it (double click or C-S-left/right) (disable subword navigation)
- [X] selecting with S-<home> and pressing delete only removes indentation (untabify)
- [ ] ctrl+shift+o to open directory in sidebar
- [ ] add projectile hydras
- [ ] use flymake/flycheck for elisp (for config file)
- [ ] add keybindings tables in config.org
- [ ] make alt+arrow work in org mode for headlines without shift (custom function)
- [ ] alt-shift-up/down conflict in org mode with multiple cursors (mc bind disabled for now)
- [ ] commenting inside source block jumps to top of block. happens with just 'emacs -Q' and comment-dwim
- [ ] query-replace with current selection as input (Replace+ package maybe?)
- [ ] make the M-o keybinding available outside of ivy, so the default wakib function can be used
- [ ] M-o isnt working for C-o and flyspell-correct
- [ ] error indicator in fringe for flyspell and flycheck/flymake
- [ ] maybe incorporate previous/next concept from wakib-emacs? (it uses ';')
- [ ] add shortcuts for dashboard and init file
- [ ] new keybindings for project find and project replace
- [ ] when opening a treemacs workspace in dashboard, it should ask for a file
- [ ] vr/replace doesnt auto open org headings
- [ ] use 'C-.' to fix any type of error
- [ ] apostrophes should not be selected when selecting words
- [ ] use straight.el so only packages declared in the config file are loaded
- [ ] compare latest version with old version in git. load time went from 0.7-0.8 -> 1.0-1.2 seconds.
- [ ] replace "cua-selection-mode" with "set-rectangular-region-anchor" from "rectangular-region-mode"
- [ ] package-quickstart needs to be deleted after package update or else there's an error. sometimes also custom.el
- [ ] org-mode unordered lists should also have bullets (org-superstar seems to solve this)
- [ ] arrow indicating visual line doesn't appear
- [ ] figure out how to deal with new file (C-n) while using bufler groups
- [ ] counsel-find-file should order items alphabetically
- [ ] change swiper match colours (each regex group has a different colour)
- [ ] bufler groups show file 2 times, in its own group and without a group (maybe it should use ivy options?)
- [ ] replace org-bullets with org-superstar
- [ ] make C-backspace delete until first non whitespace character

also:
- [ ] look at vscode settings + extensions and import anything I like
- [X] look at things in org mode file from KMPG

* Early Init file
Emacs HEAD (27+) introduces early-init.el, which is run before init.el, before package and UI initialization happens.

** File Header

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;; early-init.el --- Emacs Early Init File          -*- lexical-binding: t -*-
;;; GNU Emacs Configuration - Early Init

(setq-default lexical-binding t)
#+END_SRC

** Start time optimizations

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;; A common optimization is to temporarily reduce the frequency of garbage collection during initialization.
(setq gc-cons-threshold most-positive-fixnum)

;; FileNameHandler
(defvar file-name-handler-alist-original file-name-handler-alist)
(setq file-name-handler-alist nil)

;; Restore values after startup
(add-hook 'after-init-hook
  (lambda ()
    (setq gc-cons-threshold (* 16 8 1024 1024) ; 16MB
    file-name-handler-alist file-name-handler-alist-original)))
#+END_SRC

** GUI changes that deserve to be in early-init

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;; Only show cursor in the active window.
(setq-default cursor-in-non-selected-windows nil)

;;Default frame position
(setq default-frame-alist
  `((height . 60) (width . 100)))

;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

;; show column number alongside line number
(column-number-mode t)

;; display relative line numbers
(global-display-line-numbers-mode)
(setq display-line-numbers-type 'visual)

;; highlight current line
(global-hl-line-mode +1)

;; avoid flashing the default emcas modeline while starting
(setq mode-line-format nil)

;; Do not resize the frame at this early stage.
(setq frame-inhibit-implied-resize t)
#+END_SRC

* Configuration file
** File Header

#+BEGIN_SRC emacs-lisp :tangle yes
;;; config.el --- Emacs Configuration File          -*- lexical-binding: t -*-
;;; GNU Emacs Configuration

(setq-default lexical-binding t)
#+END_SRC

** Initial Setup

Things to do before we start making changes

#+BEGIN_SRC emacs-lisp :tangle yes
;; when an error occurs during startup, automatically open debugger
(setq debug-on-error t)
#+END_SRC

** Bootstrap
*** Package management

*straight*

straight.el is used to make the init-file the sole source of truth for package operations.

To install a package temporarily (until you restart Emacs):
    - M-x straight-use-package

To install a package permanently, place a call to straight-use-package in your init-file, like:
    - (straight-use-package 'el-patch)

To update all packages to their most recent version:
    - M-x straight-pull-all

#+BEGIN_SRC emacs-lisp :tangle yes
(setq straight-use-package-by-default         t
      straight-check-for-modifications        '(find-when-checking))

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

*use-package*

#+BEGIN_SRC emacs-lisp :tangle yes
(straight-use-package 'use-package)

;; Configure `use-package' prior to loading it.
(setq use-package-expand-minimally t)
(setq use-package-compute-statistics t)
(setq use-package-enable-imenu-support t)
(setq use-package-verbose t)
#+END_SRC

*** No littering

Make emacs configuration directory more organized and keep it clean.
no-littering should be loaded as early as possible since it changes where other packages will save their files.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package no-littering)

(setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+END_SRC

*** Startup Profiler

This isn't together with all the other features because it needs to load as early as possible to get accurate results.
When using the profiler, just uncoment the line that disables the package.

#+BEGIN_SRC emacs-lisp :tangle yes
;; doesn't really work well with early-init file
;; (use-package esup
;;   :commands (esup))
;; (setq esup-depth 0)


(use-package benchmark-init
  :config
  :disabled
  ;; To disable collection of benchmark data after init is done.
  (add-hook 'after-init-hook 'benchmark-init/deactivate)
  (benchmark-init/activate))
#+END_SRC

** User Interface

Most GUI changes are done in early-init.el

*** Font

#+BEGIN_SRC emacs-lisp :tangle yes
;; (set-frame-font "IBM Plex Mono-11" nil t)
(set-frame-font "Cartograph CF-12" nil t)
#+END_SRC

*** Theme

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package cyberpunk-theme
  :config
    (load-theme 'cyberpunk t))
#+END_SRC

*** Theme Customization

#+BEGIN_SRC emacs-lisp :tangle yes
(setq custom--inhibit-theme-enable nil)
(with-eval-after-load "cyberpunk-theme"
  (custom-theme-set-faces
   'cyberpunk

   ;; defaults
   '(default ((t (:background "#14141D" :foreground "#bdbdb3"))))
   '(fringe ((t (:background "#14141D" :foreground "#dcdccc"))))
   '(region ((t (:extend t :background "#5e153c"))))
   '(error ((t (:foreground "#D92027" :weight bold))))
   '(whitespace-tab ((t (:background nil))))
   '(whitespace-trailing ((t (:background nil))))
   '(font-lock-keyword-face ((t (:foreground "#21D7D7"))))
   '(line-number ((t (:foreground "#6b6b6b"))))
   '(line-number-current-line ((t (:background "#14141D"))))

   ;; tab-line
   '(tab-line ((t (:background "#14141D" :foreground "white" :height 1.0))))
   '(tab-line-tab ((t (:inherit tab-line :foreground "MediumOrchid4"))))              ; selected but not in focus
   '(tab-line-tab-current ((t (:inherit tab-line-tab :foreground "MediumOrchid1"))))  ; selected
   '(tab-line-tab-inactive ((t (:inherit tab-line-tab :foreground "gray60"))))        ; not selected
   '(tab-line-highlight ((t (:inherit tab-line-tab :background "orange"))))

   ;; modeline
   '(doom-modeline-bar-inactive ((t (:background "#1A1A1A"))))
   '(doom-modeline-bar ((t (:background "#251F33"))))
   '(doom-modeline-project-dir ((t (:foreground "dark orange"))))
   '(doom-modeline-buffer-path ((t (:inherit (mode-line-emphasis bold) :foreground "gray60"))))
   '(doom-modeline-persp-buffer-not-in-persp ((t (:inherit (font-lock-comment-face italic)))))
   '(doom-modeline-persp-name ((t (:inherit (font-lock-doc-face italic bold)))))
   '(mode-line ((t (:background "#251F33" :foreground "gray66" :box (:line-width -1 :color "#0d1a1e")))))
   '(mode-line-inactive ((t (:background "#1A1A1A" :foreground "#4D4D4D" :box (:line-width -1 :color "#0d1a1e")))))
   '(mode-line-highlight ((t (:box (:line-width 2 :color "grey54")))))
   '(mode-line-buffer-id ((t (:foreground "#21D7D7" :weight bold))))
   '(mode-line-emphasis ((t (:foreground "#12F292" :weight bold))))

   ;; ivy
   '(minibuffer-prompt ((t (:background "#02242b" :foreground "medium spring green"))))
   '(highlight ((t (:background "#333333"))))
   '(ivy-current-match ((t (:box nil :underline "#dc8cc3" :weight extra-bold))))
   '(ivy-minibuffer-match-face-1 ((t (:background "#444444"))))
   '(ivy-minibuffer-match-face-2 ((t (:background "#666666" :weight bold))))
   '(ivy-minibuffer-match-face-3 ((t (:background "#5654ca" :weight bold))))
   '(ivy-minibuffer-match-face-4 ((t (:background "#8b4887" :weight bold))))
   '(ivy-posframe ((t (:background "#1B1821"))))   ; 13141A
   '(ivy-posframe-border ((t (:background "#A13878"))))

   ;; flyspell
   '(flyspell-incorrect ((t (:underline (:style wave :color "red2")))))
   '(flyspell-duplicate ((nil)))

   ;; org mode
   '(org-todo ((t (:foreground "#ffa500" :box (:line-width 1 :style none) :weight bold))))
   '(org-done ((t (:foreground "#00ff00" :box (:line-width 1 :style none) :weight bold))))
   '(org-block ((t (:background "#151424"))))
   '(org-block-begin-line ((t (:background "#151424" :foreground "#008ED1"))))
   '(org-block-end-line ((t (:background "#151424" :foreground "#008ED1"))))
   '(org-ellipsis ((t (:foreground "gainsboro"))))
   '(org-level-3 ((t (:foreground "#A840F4"))))
   '(org-document-title ((t (:background "#14141D" :foreground "#add8e6" :weight bold :height 1.5))))
   '(org-checkbox ((t (:background "#14141D" :foreground "#dddddd"))))
   '(org-document-info ((t (:foreground "#add8e6" :weight bold))))
   '(org-document-info-keyword ((t (:foreground "#8B8989"))))

   ;; other packages
   '(dashboard-banner-logo-title ((t (:foreground "#A840F4" :height 1.0))))
   '(diff-hl-insert ((t (:background "green4" :foreground "green4"))))
   '(diff-hl-change ((t (:background "yellow4" :foreground "yellow4"))))
   '(diff-hl-delete ((t (:background "red4" :foreground "red4"))))
   ;; '(anzu-replace-highlight ((t (:foreground "red"))))
   ;; '(anzu-replace-to ((t (:foreground "green"))))
   '(vr/match-0 ((t (:background "#5654ca" :foreground "#ffffff"))))
   '(vr/match-1 ((t (:background "#8b4887" :foreground "#ffffff"))))
))
#+END_SRC

** Functions
*** Custom Functions

General user created functions.
These functions aren't associated with any package since they only use default emacs functionality.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun user/reload-init-file ()
  "Reload emacs cofiguration"
  (interactive)
  (message "Reloading init.el...")
  (load-file user-init-file)
  (message "Reloading init.el... done."))


(defun user/select-current-line ()
  "Select the current line"
  (interactive)
  (beginning-of-line) ; move to end of line
  (set-mark (line-end-position)))


(defun user/kill-emacs ()
  "save some buffers, then exit unconditionally"
  (interactive)
  (save-some-buffers nil t)
  (kill-emacs))


(defun user/toggle-fullscreen ()
  "Toggle fullscreen"
  (interactive)
  (toggle-frame-fullscreen))


(defun user/delete-word-no-clipboard (arg)
  "Delete characters forward until encountering the end of a word.
With argument, do this that many times.
This command does not push text to `kill-ring'."
  (interactive "p")
  (delete-region
   (point)
   (progn
     (forward-word arg)
     (point))))


(defun user/backward-delete-word-no-clipboard (arg)
  "Delete characters backward until encountering the beginning of a word.
With argument, do this that many times.
This command does not push text to `kill-ring'."
  (interactive "p")
  (user/delete-word-no-clipboard (- arg)))


(defun user/genius-beginning-of-line ()
   "Move point to the first non-whitespace character on this line.
 If point was already at that position, move point to beginning of line.
 If line is empty, indent the line relative to the preceding line.
 "
   (interactive "^")
   (let ((oldpos (point)))
     (back-to-indentation)
     (and (= oldpos (point))
          (progn (move-beginning-of-line nil)
                 (when (=
                        (line-beginning-position)
                        (line-end-position))
                   (save-excursion
                     (indent-according-to-mode)))))))


(defun user/smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))









(defun indent-region-custom(numSpaces)
  (progn
    ;; default to start and end of current line
    (setq regionStart (line-beginning-position))
    (setq regionEnd (line-end-position))
    ;; if there's a selection, use that instead of the current line
    (when (use-region-p)
      (setq regionStart (region-beginning))
      (setq regionEnd (region-end))
      )

    (save-excursion ; restore the position afterwards
      (goto-char regionStart) ; go to the start of region
      (setq start (line-beginning-position)) ; save the start of the line
      (goto-char regionEnd) ; go to the end of region
      (setq end (line-end-position)) ; save the end of the line

      (indent-rigidly start end numSpaces) ; indent between start and end
      (setq deactivate-mark nil) ; restore the selected region
      )
    )
  )

(defun untab-region (N)
  (interactive "p")
  (indent-region-custom -4)
  )

(defun tab-region (N)
  (interactive "p")
  (if (active-minibuffer-window)
      (minibuffer-complete)    ; tab is pressed in minibuffer window -> do completion
    (indent-region-custom 4) ; call indent-region-custom
    )
  )

;; can't use this yet because it would interfere with ivy
;;(bind-key "<backtab>" 'untab-region)
;;(bind-key "<tab>" 'tab-region)



#+END_SRC

*** Function Aliases

Give the toggle menu funcion a nicer name so its easier to find if necessary.

#+BEGIN_SRC emacs-lisp :tangle yes
(defalias 'toggle-menu-bar 'toggle-menu-bar-mode-from-frame)
#+END_SRC

Consolidate names for functions related to bookmarks.
These are the function used for bookmarks:

- bookmark-add-or-open
- bookmark-remove
- bookmark-rename

#+BEGIN_SRC emacs-lisp :tangle yes
(defalias 'bookmark-add-or-open 'counsel-bookmark)
(defalias 'bookmark-remove 'bookmark-delete)
#+END_SRC

** Keybindings
*** Keyboard layout

Change emacs keybindings to be more modern and ergonomic.
This should be near the top of the features list, so there isn't any error when assigning keybindings to the wakib keymap.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package wakib-keys
  :config
  (wakib-keys 1)
  (add-hook 'after-change-major-mode-hook 'wakib-update-major-mode-map)
  (add-hook 'menu-bar-update-hook 'wakib-update-minor-mode-maps))
#+END_SRC

*** Global Keybindings

Here are keybinds that apply globally and don't depend on any package.
The ones that use functions from some package are defined in that package's section.

Some of these are slight alterations to wakib, such as modifying the functions of the keybinds.
Others add convenient things like zoom, reloading, fullscreen, etc.

Here's my adventure with emacs and keybindings:
I grew up with Sublime Text, Atom and VSCode and these all share a common set of keybinds.
These are the keybinds I'm interested in using.
I tried standard Emacs keybinds for a short amount of time and I wasn't impressed at all.

Here's my history with trying to use "standard" keybinds in emacs:
- ergoemacs-mode
	At first I tried using ergoemacs-mode, but that created a lot of conflicts when my config grew in size as I added more functinality.
	I also had issues with reloading my config file.

- cua-mode
	Then I tried using cua-mode, but it wasn't "standard" enough to my liking.
	The way 'C-x' works in particular was a problem, since I would like to cut a whole line by default when I press C-x and there is no active region selected.

- config bindings
	The next attempt was to bind every key manually in my emacs config file.
	This gave me a lot of control and knowledge over what exactly was happening in terms of keybinds, which I liked.
	It was almost perfect, but quite there yet.
	I was able to set up all the bindings that are prefixed by Control and I was also able to bind C-x, C-h and C-g to '<menu> x', '<menu> h' and '<menu> g', respectively.
	The problem is that Emacs makes rebinding C-c quite difficult.

- wakib-keys
	I found out a package that was able to deal with the C-c rebind issue, and decided to just use it instead of dealing with all the trouble of rebinding C-c myself.
	Since wakib-keys override the global keymap binds, this involved transferring some of my keybinds to the wakib keymap (wakib-keys-overriding-map).
	Finally, I was able to achieve the behavior I wanted

#+BEGIN_SRC emacs-lisp :tangle yes
;; Add keyboard shortcut for reloading emacs config file
(bind-key "<f5>" 'user/reload-init-file wakib-keys-overriding-map)

;; make 'C-SPC' select in a rectangle instead of the normal selection
(bind-key "C-SPC" 'cua-rectangle-mark-mode wakib-keys-overriding-map)

;; alternative way to quit emacs besides C-x C-c
(bind-key "C-q" 'user/kill-emacs wakib-keys-overriding-map)

;; add a fullscreen toggle
(bind-key "<f11>" 'user/toggle-fullscreen wakib-keys-overriding-map)

(bind-key "C-+" 'text-scale-increase wakib-keys-overriding-map)
(bind-key "C--" 'text-scale-decrease wakib-keys-overriding-map)

(bind-key "<escape>" 'keyboard-escape-quit wakib-keys-overriding-map)

(bind-key "C-l" 'user/select-current-line wakib-keys-overriding-map)
(bind-key "C-k" 'kill-whole-line wakib-keys-overriding-map)

;; C-S-up/down to select paragraphs is activated with shift-select-mode
(bind-key "C-<left>" 'backward-word wakib-keys-overriding-map)
(bind-key "C-<right>" 'forward-word wakib-keys-overriding-map)


;; indent blocks of text
(bind-key "M-<left>" 'untab-region wakib-keys-overriding-map)
(bind-key "M-<right>" 'tab-region wakib-keys-overriding-map)

(bind-key "M-o" nil wakib-keys-overriding-map) ;; the default bind interferes with ivy (show options command)

(bind-key "<backspace>" 'backward-delete-char-untabify)


(bind-key "C-<delete>" 'user/delete-word-no-clipboard wakib-keys-overriding-map)
(bind-key "C-<backspace>" 'user/backward-delete-word-no-clipboard wakib-keys-overriding-map)

;; cant use bind-key for C-c keybinds
(global-set-key (kbd "C-c h") help-map)

(bind-key "<home>" 'user/smarter-move-beginning-of-line wakib-keys-overriding-map)














;; ;; How to use menu key as a leader key
;; ;;     on Linux, the menu/apps key syntax is <menu>
;; ;;     on Windows, the menu/apps key syntax is <apps>
;; ;;     make the syntax equal
;; (define-key key-translation-map (kbd "<apps>") (kbd "<menu>"))

;; (bind-key "<menu>" nil)
;; (bind-key* "<menu> h" help-map)
;; (bind-key* "<menu> g" 'keyboard-escape-quit)
;; (bind-key* "<menu> x" ctl-x-map)

#+END_SRC

** Defaults

Stuff that already comes with emacs. No package installation required.

*** General

Some nice-to have things and general settings.

#+BEGIN_SRC emacs-lisp :tangle yes
;; Put Customize blocks in a separate file
(setq custom-file (expand-file-name "etc/custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))


;; automatically reload files from disk when changed externally
(global-auto-revert-mode 1)


;; auto refresh dired when file changes
(add-hook 'dired-mode-hook 'auto-revert-mode)


;; put auto-save files in designated folder
(setq auto-save-default t)


;; disable file backup
(setq backup-inhibited t)


;; For all text modes use visual-line-mode
(add-hook 'text-mode-hook 'visual-line-mode)


;; for files with the same name, include part of directory name at the beginning of the buffer name
(setq uniquify-buffer-name-style 'forward)


;; Let marks be set when shift arrow-ing
(setq shift-select-mode t)


;; replace the active region just by typing text and delete the selected text by hitting the Backspace key
(delete-selection-mode 1)


;; Only require to type 'y' or 'n' instead of 'yes' or 'no' when prompted
(fset 'yes-or-no-p 'y-or-n-p)


;; Try to always use utf8
(prefer-coding-system 'utf-8)


;; allow using mouse to switch between windows
(setq focus-follows-mouse t)


;; links and html files should be opened in a browser, instead of emacs
(setq browse-url-browser-function 'browse-url-generic)
(setq browse-url-generic-program "xdg-open")


;; disable bell
(setq ring-bell-function 'ignore)


;; highlight matching parentheses
(show-paren-mode)


;; automatically add a pair to braces and quotes
(electric-pair-mode)


;; try to improve scrolling in emacs. still not ideal though
;;(pixel-scroll-mode)
(setq scroll-conservatively 101)
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
(setq scroll-margin 3)


;; change cursor blink speed. default = 0.5
(setq blink-cursor-interval 1)


;; On save, automatically remove trailling whitespace and add final newline
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(setq require-final-newline t)


;; enable navigation by subwords in backward/forward word. (useful for camelCase)
;; (global-subword-mode +1)


;; make numbers column width a little bigger so it never changes size and moves the buffer.
;; with a value of 3 digits, the buffer only moves when the line number is 1000 or hifher
(setq-default display-line-numbers-width 3)
#+END_SRC

*** Indentation

#+BEGIN_SRC emacs-lisp :tangle yes
;; set default tab width globally
(setq-default tab-width 4)

;; use spaces for indentation by default
(setq-default indent-tabs-mode nil)

;; make tabs appear visible as a “|” (pipe) character
(global-whitespace-mode)								; make all whitespace visible
(setq whitespace-style '(face tabs tab-mark trailing))  ; only show tabs and trailing whitespace
(custom-set-faces
 '(whitespace-tab ((t (:foreground "#636363"))))    	; set tab character color
 '(whitespace-trailing ((t (:underline (:style wave :color "yellow2")))))
)

;; set tab character. 8614 is the unicode number of the character
(setq whitespace-display-mappings
  '((tab-mark 9 [8614 9] [92 9])))

(setq backward-delete-char-untabify-method 'untabify)

;; function to call from the menu
(defun user/switch-indentation-use-spaces ()
  "Use spaces for indentation"
  (interactive)
  (setq indent-tabs-mode nil))

(defun user/switch-indentation-use-tabs  ()
  "Use tabs for indentation"
  (interactive)
  (local-set-key (kbd "TAB") 'tab-to-tab-stop)
  (setq indent-tabs-mode t))
#+END_SRC

** Features
*** Icons

Allow Emacs to use icons in various UI elements.

The first time this package is installed, you need to run 'all-the-icons-install-fonts' to install fonts.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package all-the-icons)
(setq all-the-icons-color-icons t)
#+END_SRC

*** Project Management

To use a non-repository folder as a project, create a blank '.projectile' file in the folder to mark the project root.
See [[https://docs.projectile.mx/projectile/projects.html#ignoring-file]] what to write in this file.

Quick version of what to write in .projectile:
'-' to ignore
'+' to keep and ignore everything else
'!' to override .gitignore

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package projectile
  :config
  (setq projectile-completion-system 'ivy)
  ;; (setq projectile-indexing-method 'hybrid)
  (projectile-mode 1))

;; cant use bind-key for C-c keybinds
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+END_SRC

*** Workspaces

Also called Layouts, Perspectives, Sessions.

What I want for this feature is to be able to save and load lists of files using workspaces.
Workspaces should be able to be composed of multiple items. Each item can be a project, normal folder or normal file.
I use the name 'workspaces' in this section, but it's interchangeable with other names for this type of thing in emacs.

Restoring the window sizes, positions and layouts is not so important for me.

Specific features I want:

  - when in a workspace, show list of open buffers, restricted to that workspace
  - cycle between all the buffers in the current workspace
  - save, load and switch workspaces
  - when switching workspaces, automatically prompt for file to open or go to last visited file
  - save or load a single workspace. each workspace has it's own file or section. it shouldn't be all or nothing
  - give workspaces a custom name
  - integration with dashboard package (needs a way of getting list of existing workspaces)
  - show current workspace in the modeline


Another idea I've had is the following:
  - whenever you enter a projectile project, the sidebar and tab-bar automatically show information from only that project.
  - for everthing else, the sidebar shows the current file's parent directory and the tab-bar shows all the non-project files.


Packages I looked at:

  treemacs workspaces:
    - a workspace can only have projects or folders (but it's possible to use bookmarks for files)
    - Can not list all buffers in current workspace
    - can use projectile and bookmarks to cover some functionality

  eyebrowse:
    - does not save files, only layouts
    - works like i3 workspaces
    - the way it works is that you assign a workspace to a certain purpose and only open certain projects in there

  bufler (bufler-workspace-mode):
    - bufler-list is good for managing buffers. works like magit
    - the tab-bar integration is nice
    - does not save files
    - I tried to use desktop-save-mode for saving stuff, but wasnt very happy with it
    - bufler-workspace-mode allows to automatically switch workspaces when switching buffers
    - can use bookmarks to cover some functionality

  projectile + bookmarks:
    - needs a special file in a project directory to give it a custom name
    - it's not ideal for normal non-repo folders

  perspective and persp-mode (shared):
    - doesn't really have a concept of projects, only buffers
    - saves and loads all perspectives at once. on file load, all buffers from all saved perspectives are opened
    - persp-mode is more popular and supported, while perspective is simpler and nicer to configure

  perspective:
    - the list of buffers in current perspective works better than persp-mode

  persp-mode:
    - it's a pain to setup and the documentation is pretty lacking (these are related)
    - cant make it load save file at startup without resuming session
    - the list of buffers in current perspective shows a bunch or useless buffers

Currently using: bufler with optional bufler-tabs-mode

#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package persp-mode
;;   :config
;;   (setq persp-auto-resume-time -1
;;         persp-auto-save-opt 0
;;         persp-auto-save-num-of-backups 0
;;         persp-set-last-persp-for-new-frames nil
;;         persp-reset-windows-on-nil-window-conf t
;;         persp-autokill-buffer-on-remove t
;;         persp-add-buffer-on-after-change-major-mode t
;;         persp-kill-foreign-buffer-behaviour 'kill)
;;   (persp-mode 1))


;; (persp-load-state-from-file (expand-file-name "var/persp-mode/persp-auto-save" user-emacs-directory))



;; (use-package perspective
;;   :config
;;   (persp-mode))

;; (persp-turn-off-modestring)

;; (setq persp-state-default-file (expand-file-name "var/persp-mode/persp-auto-save" user-emacs-directory))
;; ;; (add-hook 'after-init-hook (persp-state-load persp-state-default-file))








;; (bind-key "C-b" 'projectile-switch-to-buffer wakib-keys-overriding-map)

;; (add-to-list 'persp-filter-save-buffers-functions
;;               (lambda (b) (string-prefix-p "todo" (buffer-name b)))
;;               )




(use-package bufler)

;; this sets the modeline lighter
;;(bufler-mode 1)

(bufler-tabs-mode 1)
(tab-bar-mode 0)

;; always switch workspace when switching buffers with bufler
;;(setq bufler-workspace-switch-buffer-sets-workspace t)

(bind-key "C-S-b" 'bufler wakib-keys-overriding-map)

(bind-key "C-b" 'bufler-switch-buffer wakib-keys-overriding-map)
;; C-u C-b to show all buffers and aumatically switch workspaces


;; (use-package desktop+)

(bind-key "C-<prior>" 'tab-line-switch-to-prev-tab wakib-keys-overriding-map)
(bind-key "C-<next>" 'tab-line-switch-to-next-tab wakib-keys-overriding-map)




;; focus current buffer workspace everytime a file is opened
;; (add-hook 'find-file-hook (lambda () (call-interactively #'bufler-workspace-focus-buffer)))

;; focus default workspace when starting emacs
(add-hook 'dashboard-mode-hook (lambda () (call-interactively #'bufler-workspace-focus-buffer)))

(setf bufler-groups
      (bufler-defgroups
        (group
         ;; Subgroup collecting all named workspaces.
         (auto-workspace))
        (group
         ;; Subgroup collecting all `help-mode' and `info-mode' buffers.
         (group-or "*Help/Info*"
                   (mode-match "*Help*" (rx bos "help-"))
                   (mode-match "*Info*" (rx bos "info-"))))
        (group
         ;; Subgroup collecting all special buffers (i.e. ones that are not
         ;; file-backed), except `magit-status-mode' buffers (which are allowed to fall
         ;; through to other groups, so they end up grouped with their project buffers).
         (group-and "*Special*"
                    (lambda (buffer)
                      (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
                                           buffer)
                                  (funcall (mode-match "Dired" (rx bos "dired"))
                                           buffer)
                                  (funcall (mode-match "Dashboard" (rx bos "dashboard"))
                                           buffer)
                                  (funcall (auto-file) buffer))
                        "*Special*")))
         (group
          ;; Subgroup collecting these "special special" buffers
          ;; separately for convenience.
          (name-match "**Special**"
                      (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace") "*")))
         (group
          ;; Subgroup collecting all other Magit buffers, grouped by directory.
          (mode-match "*Magit* (non-status)" (rx bos (or "magit" "forge") "-"))
          (auto-directory))
         ;; Subgroup for Helm buffers.
         (mode-match "*Helm*" (rx bos "helm-"))
         ;; Remaining special buffers are grouped automatically by mode.
         (auto-mode))



        (group
         (group-or "Files"
                   (filename-match "Files" (rx bol (zero-or-more anything)))
                   (mode-match "Dashboard" (rx bos "dashboard"))
                   )
                   (group
                   ;; Subgroup collecting buffers in a projectile project.
                   (auto-projectile)
                   )
         )

        )
      )





;; redefine lighter function
(defun user/bufler-workspace-mode-lighter ()
  "Return lighter string for mode line."
  (frame-parameter nil 'bufler-workspace-path-formatted))




#+END_SRC

*** File Explorer

Since I am using Treemacs worspaces I will explain my view on projects and workspaces.
Here is my ideal usage of workspaces/projects:

- each project has a name that can be easily configured
- a list of projects appears in the dashboard (with their custom names)
- you can search all files in a project
- the project name appears in the modeline
- all of the previous items should also work with a standard folder (even if it's not a repository)

That last item is very important. It's the reason why I don't just use projectile without anything else.

This is a desired but not required feature:
- no files are saved on project directory, or as few as possible. everthing should be saved in the '.emacs.d' folder

Taking this into account, projectile is a good start but it doesnt give me everything I want, so I'm also using Treemacs workspaces.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package treemacs)

;; single mouse click to open files and folders
(define-key treemacs-mode-map [mouse-1] #'treemacs-single-click-expand-action)

;; dont show line numbers in the sidebar
(add-hook 'treemacs-mode-hook (lambda() (display-line-numbers-mode -1)))

(define-key global-map (kbd "<f9>") 'treemacs)


;; you actually have to always run this manually
;;(setq treemacs-display-current-project-exclusively t)



;; (defun my-treemacs-switch-workspace (ws)
;;   (setf (treemacs-current-workspace) (treemacs--select-workspace-by-name ws))
;;   (treemacs--invalidate-buffer-project-cache)
;;   (treemacs--rerender-after-workspace-change)
;;   (treemacs-select-window)
;;   (run-hooks 'treemacs-switch-workspace-hook)
;;   )

;; (defun dashboard-insert-treemacs-workspaces (list-size)
;;   (treemacs--maybe-load-workspaces)
;;   (dashboard-insert-section
;;   "Workspaces:"
;; 	(dashboard-subseq (mapcar 'treemacs-workspace->name (treemacs-workspaces)) 0 list-size)
;; 	list-size
;; 	"w"
;; 	`(lambda (&rest ignore) (my-treemacs-switch-workspace ,el))
;; 	el)


(use-package treemacs-projectile)
(use-package treemacs-magit)
#+END_SRC

*** Dashboard

#+BEGIN_SRC emacs-lisp :tangle yes

(defun dashboard-insert-persp-mode (list-size)
  (dashboard-insert-section
  "Perspectives:"
  bufler-workspace-name
	list-size
	"p"
	`(lambda (&rest ignore) (persp-switch ,el))
	el))




(use-package dashboard
  :defer nil
  :config
  (dashboard-setup-startup-hook)
  (add-to-list 'dashboard-item-generators '(perspectives . dashboard-insert-persp-mode))

;;  (add-to-list 'dashboard-heading-icons '(treemacs-workspaces . "book"))
;;  (dashboard-modify-heading-icons '((treemacs-workspaces . "book")))

  (setq dashboard-items '((projects  . 5)
                          (bookmarks . 5)
                          (recents   . 5)
                          (agenda    . 5)))
  (setq dashboard-center-content t)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-startup-banner 'official)
  (setq dashboard-banner-logo-title (format "GNU Emacs version %d.%d" emacs-major-version emacs-minor-version))
  (setq dashboard-set-init-info t)
  (setq dashboard-init-info (format "%d packages loaded with straight. finished in %s"
                                    (length (hash-table-keys straight--success-cache)) (emacs-init-time)))
  (setq dashboard-set-footer nil)
  (setq dashboard-set-navigator t)
  (setq dashboard-navigator-buttons
        `(
          ((,(all-the-icons-octicon "dashboard" :height 1.1 :v-adjust 0.0)
            "config file"
            "Open Config File"
            (lambda (&rest _) (find-file "~/.emacs.d/config.org")))))
  )
)

;; hide the modeline in the dashboard buffer
(use-package hide-mode-line
  :init
  (add-hook 'dashboard-mode-hook #'hide-mode-line-mode))

(add-hook 'dashboard-mode-hook (lambda () (tab-line-mode -1)))
#+END_SRC

*** Modeline

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package doom-modeline
  :init
  ;;  (doom-modeline-mode 1)
  (setq doom-modeline-height 24)
  (setq doom-modeline-major-mode-icon nil)
  (setq doom-modeline-indent-info t)

  (setq doom-modeline-buffer-file-name-style 'relative-to-project)
  )



(doom-modeline-def-segment user/bufler-workspace
  "Display current bufler workspace name"
  (if (and (boundp 'bufler-workspace-tabs-mode) bufler-workspace-tabs-mode)
      (propertize (format "  %s" (replace-regexp-in-string "Projectile:" (all-the-icons-alltheicon "git") (user/bufler-workspace-mode-lighter)))
                  'face '(:foreground "dark orange" :weight bold))
    ""))


(doom-modeline-def-modeline 'user/main
  '(user/bufler-workspace bar window-number matches " " buffer-info remote-host buffer-position parrot " " selection-info)
  '(objed-state grip irc mu4e gnus github debug repl lsp minor-modes input-method indent-info buffer-encoding major-mode process vcs checker))

;; default modeline
;; (doom-modeline-def-modeline 'main
;;   '(bar workspace-name window-number modals matches buffer-info remote-host buffer-position word-count parrot selection-info)
;;   '(objed-state misc-info persp-name battery grip irc mu4e gnus github debug repl lsp minor-modes input-method indent-info buffer-encoding major-mode process vcs checker))

(defun setup-initial-doom-modeline ()
  (doom-modeline-set-modeline 'user/main t))

(add-hook 'doom-modeline-mode-hook 'setup-initial-doom-modeline)




(doom-modeline-mode 1)
;; (doom-modeline-set-modeline 'user/main t)
#+END_SRC

*** Search tool

My option for this is rg.

Other options are:
- deadgrep
- ripgrep
- ag

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package rg)

(rg-define-search rg-search-current-dir
  "Search in the directory of the currently open file or buffer"
  :query ask
  :format literal
  :files "everything"
  :dir "current"
  :flags ("--hidden"))

;; replace 'occur' with rg
(bind-key "C-S-f" 'rg-search-current-dir wakib-keys-overriding-map)
#+END_SRC

*** Find and Replace improvements

#+BEGIN_SRC emacs-lisp :tangle yes
;; provides a regex backend to be used by visual-regexp-steroids
;; this is to avoid having python installed as a dependency
(use-package pcre2el)

;; you can use actual regex with this package, instead of emacs specific regex
;; this seems better than Anzu for my uses
(use-package visual-regexp-steroids)

;; the default engine is python
(setq vr/engine 'pcre2el)






(defun replace-regexp-entire-buffer (pattern replacement)
  "Perform regular-expression replacement throughout buffer."
  (interactive
   (let ((args (query-replace-read-args "Replace" t)))
     (setcdr (cdr args) nil)    ; remove third value returned from query---args
     args))
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward pattern nil t)
      (replace-match replacement))))




(defun user/query-replace-regexp-from-top ()
  "query-replace-regexp from the beginning of the buffer."
  (interactive)
  (goto-char (point-min))
  (call-interactively 'vr/query-replace))


(bind-key "C-h" 'vr/query-replace wakib-keys-overriding-map)
;; (bind-key "C-S-h" 'my wakib-keys-overriding-map)


;; (bind-key "C-S-h" 'vr/replace wakib-keys-overriding-map)  ;; this should be "replace in project"
;; (bind-key "\C-ch" help-map)

#+END_SRC

*** Org mode

The code below, executes org-babel-tangle asynchronously when config.org is saved.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package async)

(defvar *config-file* (expand-file-name "config.org" user-emacs-directory)
  "The configuration file.")

(defvar *config-last-change* (nth 5 (file-attributes *config-file*))
  "Last modification time of the configuration file.")

(defvar *show-async-tangle-results* nil
  "Keeps *emacs* async buffers around for later inspection.")

(defun user/config-updated ()
  "Checks if the configuration file has been updated since the last time."
  (time-less-p *config-last-change*
               (nth 5 (file-attributes *config-file*))))

(defun user/config-tangle ()
  "Tangles the user configuration org file asynchronously."
  (when (user/config-updated)
    (setq *config-last-change*
          (nth 5 (file-attributes *config-file*)))
    (user/async-babel-tangle *config-file*)))

(defun user/async-babel-tangle (org-file)
  "Tangles an org file asynchronously."
  (let ((init-tangle-start-time (current-time))
        (file (buffer-file-name))
        (async-quiet-switch "-q"))
    (async-start
     `(lambda ()
        (require 'org)
        (org-babel-tangle-file ,org-file))
     (unless *show-async-tangle-results*
       `(lambda (result)
          (if result
              (message "SUCCESS: %s successfully tangled (%.2fs)."
                       ,org-file
                       (float-time (time-subtract (current-time)
                                                  ',init-tangle-start-time)))
            (message "ERROR: %s as tangle failed." ,org-file)))))))
#+END_SRC



#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org
  :straight org-plus-contrib
  :hook ((after-save . user/config-tangle)))

;; Org Bullets
(use-package org-bullets
    :hook (org-mode . org-bullets-mode))

;; indent text to heading level
(setq org-startup-indented t)

;; set initial view to 'content' (show all headlines)
(setq org-startup-folded 'content)

;; highlight links
(setq org-descriptive-links t)

;; dim blocked tasks
(setq org-agenda-dim-blocked-tasks t)

;; avoid showing unecessary tasks
(setq
    org-agenda-skip-deadline-if-done t
    org-agenda-skip-scheduled-if-done t
    org-agenda-skip-archived-trees nil
)

;; set how may real newlines are necessary to display a newline when folded.
(setq org-cycle-separator-lines 2)

;; default todo keywords
(setq org-todo-keywords
      '((sequence "TODO" "ONGOING" "REVIEW" "|" "DONE" "CANCEL")))

;; set agenda location
(setq org-directory "~/Documents/Notes/org/")
(setq org-agenda-files '("~/Documents/Notes/org/"))

;; insert an annotation in a task when it is marked as done, including a timestamp
(setq org-log-done (quote time))

(setq org-support-shift-select t)

;; allow C-S-<arrow> selection of paragraphs
(eval-after-load "org"
  '(progn
     (define-key org-mode-map (kbd "<C-S-left>") nil)
     (define-key org-mode-map (kbd "<C-S-right>") nil)
     (define-key org-mode-map (kbd "<C-S-up>") nil)
     (define-key org-mode-map (kbd "<C-S-down>") nil)
))

;; the default M-arrow binds are in conflict with some global binds
(bind-key "M-S-<left>" 'org-metaleft org-mode-map)
(bind-key "M-S-<right>" 'org-metaright org-mode-map)
(bind-key "M-S-<up>" 'org-metaup org-mode-map)
(bind-key "M-S-<down>" 'org-metadown org-mode-map)




;; ;; allow usage of ctrl+shift+<left/right> selection
;; (defadvice org-call-for-shift-select (before org-call-for-shift-select-cua activate)
;;   (if (and cua-mode
;;            org-support-shift-select
;;            (not (use-region-p)))
;;       (cua-set-mark)))


;; ;; allow usage of ctrl+shift+<up/down>
;; (setq org-replace-disputed-keys t)
;; (setq org-disputed-keys
;;       '(
;;         ([(control shift right)] . [(meta +)])         ; status of group
;;         ([(control shift left)]  . [(meta -)])         ;
;;         ([(control shift up)]    . [(control meta +)]) ; change clock logs
;;         ([(control shift down)]  . [(control meta -)]) ;
;;         ))

;; (defadvice org-backward-paragraph
;;     (before set-up-shift-select-backward-paragraph activate)
;;   (interactive "^"))
;; (defadvice org-forward-paragraph
;;     (before set-up-shift-select-forward-paragraph activate)
;;   (interactive "^"))


;; grey out completed tasks
(setq org-fontify-done-headline t)

(custom-set-faces
 '(org-headline-done
   ((((class color) (min-colors 16) (background dark))
     (:foreground "dim gray"))))
)


(use-package toc-org
  :hook (org-mode . toc-org-mode))



(setq org-src-preserve-indentation t ;; do not put two spaces on the left
      org-src-tab-acts-natively t) ;; make tab behave as it would normally for that language

;; Changing the org-mode ellipsis
(setq org-ellipsis " ⤵")
;; (setq org-ellipsis " ▼")


;; if there is something like #+ATTR_ORG: width="200", resize to 200, otherwise don't resize
(setq org-image-actual-width nil)



(add-hook 'org-mode-hook (lambda ()
   "Beautify Org Checkbox Symbol"
   (push '("[ ]" .  "☐") prettify-symbols-alist)
   (push '("[X]" . "☑" ) prettify-symbols-alist)
   (push '("[-]" . "❍" ) prettify-symbols-alist)
   ;; (push '("#+BEGIN_SRC" . "↦" ) prettify-symbols-alist)
   ;; (push '("#+END_SRC" . "⇤" ) prettify-symbols-alist)
   ;; (push '("#+BEGIN_EXAMPLE" . "↦" ) prettify-symbols-alist)
   ;; (push '("#+END_EXAMPLE" . "⇤" ) prettify-symbols-alist)
   ;; (push '("#+BEGIN_QUOTE" . "↦" ) prettify-symbols-alist)
   ;; (push '("#+END_QUOTE" . "⇤" ) prettify-symbols-alist)
   ;; (push '("#+begin_quote" . "↦" ) prettify-symbols-alist)
   ;; (push '("#+end_quote" . "⇤" ) prettify-symbols-alist)
   ;; (push '("#+begin_example" . "↦" ) prettify-symbols-alist)
   ;; (push '("#+end_example" . "⇤" ) prettify-symbols-alist)
   ;; (push '("#+BEGIN_SRC" . "↦" ) prettify-symbols-alist)
   ;; (push '("#+END_SRC" . "⇤" ) prettify-symbols-alist)
   (prettify-symbols-mode)))
#+END_SRC

*** Spellcheck

#+BEGIN_SRC emacs-lisp :tangle yes
;; defer is used to only load package when mode is activated
(use-package flyspell
  :defer t)


(setq ispell-program-name "aspell")
(setq ispell-local-dictionary "en_US")


(use-package flyspell-correct-ivy
  :config
  (setq flyspell-correct-interface #'flyspell-correct-ivy)
  (define-key flyspell-mouse-map [mouse-2] nil)
  (define-key flyspell-mouse-map [mouse-3] 'flyspell-correct-word))


(defun toggle-spellcheck ()
  "Toggle spell checking, using Flyspell"
  (interactive)
  (if (bound-and-true-p flyspell-mode)
      (progn
        (flyspell-mode -1)
        (message "Flyspell mode disabled in current buffer"))
    (progn
      (flyspell-mode 1)
      (message "Flyspell mode enabled in current buffer"))))


(bind-key "C-." 'flyspell-correct-at-point wakib-keys-overriding-map)
#+END_SRC

*** REVIEW Code Completion

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package company
  :config
  (global-company-mode 1))

(setq company-global-modes '(not org-mode))
#+END_SRC

*** Completion Framework

Completion framework being used:

Ivy + Swiper + Counsel

ivy is the mechanism that handles all selection lists, narrowing
    them down using a variety of possible builders (regular expressions of
    flexible matching).  It also provides a base interface for any
    function that needs to receive input based on a list of candidates.

counsel provides a superset of functions for navigating the file
    system, switching buffers, etc. that expand on the basic features
    supported by Ivy.  For instance, switching buffers with Counsel offers
    a preview of their contents in the window, whereas regular Ivy does
    not.

swiper is a tool for performing searches, powered by Ivy, all while
    presenting a preview of the results.

**** Ivy bases

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ivy
  :defer 0.1
  :diminish
  :custom
  (ivy-use-virtual-buffers t)
  (ivy-count-format "%d/%d ")
  (ivy-wrap t)
  (ivy-re-builders-alist
   '((t . ivy--regex-plus)))  ; also try: ivy--regex-fuzzy
  (ivy-initial-inputs-alist nil)
  ;; (ivy-sort-functions-alist
  ;;     '((t)
  ;;       (counsel-find-file . ivy-sort-file-function-default)))
  :config (ivy-mode))

;; make one tab enough to autocomplete. default behaviour is 2 tab presses
(define-key ivy-minibuffer-map (kbd "TAB") 'ivy-alt-done)




(use-package counsel
  :after ivy
  :config (counsel-mode))

;; use C-p to switch between files in project directory
(bind-key "C-p" 'counsel-fzf wakib-keys-overriding-map)

(bind-key "C-o" 'counsel-find-file wakib-keys-overriding-map)

(bind-key "C-S-v" 'counsel-yank-pop wakib-keys-overriding-map)



(use-package swiper
  :after ivy)

(defun swiper-isearch-with-selection ()
  "Swiper-isearch, but uses active selection as input if it exists"
  (interactive)
  (if (region-active-p) (swiper-isearch-thing-at-point)
    (swiper-isearch nil)))

;; replace 'isearch' with swiper
(bind-key "C-f" 'swiper-isearch-with-selection wakib-keys-overriding-map)

;; put a cursor on every swiper search result
;;(bind-key "C-h" 'swiper-mc swiper-map)
#+END_SRC

**** Ivy extensions

#+BEGIN_SRC emacs-lisp :tangle yes
;; Ivy sorts such large lists using flx package's scoring mechanism, if it's installed.
(use-package flx)

;; Prescient
(use-package prescient
  :custom
  (prescient-history-length 50)
  (prescient-filter-method '(literal regexp))
  :config
  (prescient-persist-mode 1))

(use-package ivy-prescient
  :after (prescient ivy)
  :custom
  (ivy-prescient-sort-commands
   ;; things that shouldnt be sorted go n this list
   '(:not swiper swiper-isearch ivy-switch-buffer counsel-switch-buffer flyspell-correct-ivy counsel-find-file find-file))
  (ivy-prescient-excluded-commands '(counsel-find-file find-file))
  (ivy-prescient-retain-classic-highlighting t)
  (ivy-prescient-enable-filtering nil)
  (ivy-prescient-enable-sorting t)
  :config
  (ivy-prescient-mode 1))

;; Ivy-rich
(use-package ivy-rich
  :custom
  (ivy-rich-path-style 'abbreviate)
  :config
  (setcdr (assq t ivy-format-functions-alist)
          #'ivy-format-function-line)
  (ivy-rich-mode 1))

(use-package all-the-icons-ivy-rich
  :custom
  (all-the-icons-ivy-rich-icon-size 1.0)
  :config (all-the-icons-ivy-rich-mode 1))

;; Ivy-posframe
(use-package ivy-posframe
  :custom
  (ivy-posframe-parameters
   '((left-fringe . 2)
     (right-fringe . 2)
     (internal-border-width . 2)))
  (ivy-posframe-height-alist
   '((swiper . 1)
     (swiper-isearch . 1)
   (flyspell-correct-ivy . 10)
     (t . 20)))
  (ivy-posframe-display-functions-alist
   '((complete-symbol . ivy-posframe-display-at-point)
     (swiper . ivy-display-function-fallback)
   (swiper-isearch . ivy-display-function-fallback)
   (flyspell-correct-ivy . ivy-posframe-display-at-point)
     (t . ivy-posframe-display-at-frame-center)))
  :config (ivy-posframe-mode 1))

(use-package counsel-projectile)

;; ----------Isearch improvements

(use-package isearch
  :straight nil
  :custom
  (search-whitespace-regexp ".*?")
  (isearch-lax-whitespace t)
  (isearch-regexp-lax-whitespace nil)
)

(define-key isearch-mode-map (kbd "k") 'isearch-repeat-forward)
(define-key isearch-mode-map (kbd "j") 'isearch-repeat-backward)


;; ---------- counsel-fzf
;; do not hide files from  .gitignore
;; ignore files in ~/.config/fd/ignore

(when (zerop (length (getenv "FZF_DEFAULT_COMMAND")))
    (setenv "FZF_DEFAULT_COMMAND"
            (and (executable-find "fd")
                 (concat "fd"
                         " "
                         "--type"
                         " "
                         "'file'"
                         " "
                         "--hidden"
                         " "
                         "--no-ignore-vcs"
                         " "
                         "--ignore-case"
                         " "
                         "--exclude"
                         " "
                         "'.git/*'"))))
#+END_SRC

*** Window switcher

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package switch-window)

;; for some reason writing it as M-S-h doesn't work
(bind-key "M-H" 'switch-window wakib-keys-overriding-map)
#+END_SRC

*** REVIEW Git integration

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package magit)

;; has a conflict with org mode. new headings display ellipsis as a block
;; (use-package git-gutter)
;; ;; (global-git-gutter-mode +1)
;; (set-face-foreground 'git-gutter:modified "#f7bc0a")
;; (custom-set-variables
;;  '(git-gutter:update-interval 2))

(use-package diff-hl)
(global-diff-hl-mode)
(diff-hl-flydiff-mode)
(add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
(add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)

;; ;; lines that are 'inserted' cause problems with org headings ellipsis symbol
;; (defun disable-gutter()
;;   (interactive)
;;   (diff-hl-mode 0))
;; (add-hook 'org-mode-hook 'disable-gutter)
#+END_SRC

*** Templates and Snippets

#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package yasnippet-snippets
;;   :defer t)

;; (use-package yasnippet
;;   :hook
;;   ((prog-mode . yas-minor-mode))
;;   :config
;;   (require 'yasnippet-snippets)
;;   (yas-reload-all))


;; (use-package ivy-yasnippet
;;   :bind ("M-y" . ivy-yasnippet))
#+END_SRC

*** REVIEW Multiple Cursors

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package multiple-cursors
  :init
  (custom-set-variables `(mc/always-run-for-all ,t))
  :config
  (define-key mc/keymap [remap keyboard-quit] 'mc/keyboard-quit)
  (define-key rectangular-region-mode-map [remap keyboard-quit] 'rrm/keyboard-quit)
  :bind
  (("M-S" . set-rectangular-region-anchor)
   :map mc/keymap
     ("M-S-<down>" . mc/mark-next-like-this)
     ("M-S-<up>" . mc/mark-previous-like-this)
     ("<C-down-mouse-1>" . mc/add-cursor-on-click)))
#+END_SRC

*** Cut/Copy whole line or region

#+BEGIN_SRC emacs-lisp :tangle yes
;; when c-x or c-c are pressed with no active selection, cut/copy the line instead
;; default behaviour is to do the operation between the cursor and the mark, which is hidden
(use-package whole-line-or-region)


;; Comment code lines, command reacts based on the major mode.
;;(bind-key "C-«" 'whole-line-or-region-comment-dwim wakib-keys-overriding-map)

;; for some reason, this line breaks undo-tree
;;(bind-key "C-/" 'whole-line-or-region-comment-dwim wakib-keys-overriding-map)


(bind-key "C-c" 'whole-line-or-region-kill-ring-save wakib-keys-overriding-map)
(bind-key "C-x" 'whole-line-or-region-kill-region wakib-keys-overriding-map)


;; keep selection after indenting (with alt+left/right)
(defadvice whole-line-or-region-indent-rigidly-right-to-tab-stop (after keep-transient-mark-active ())
  "Override the deactivation of the mark."
  (setq deactivate-mark nil))
(ad-activate 'whole-line-or-region-indent-rigidly-right-to-tab-stop)

(defadvice whole-line-or-region-indent-rigidly-left-to-tab-stop (after keep-transient-mark-active ())
  "Override the deactivation of the mark."
  (setq deactivate-mark nil))
(ad-activate 'whole-line-or-region-indent-rigidly-left-to-tab-stop)
#+END_SRC

*** Presentations

Write in Org mode and export to HTML with reveal.js

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ox-reveal)

(setq org-reveal-root "/home/kyukee/.reveal/reveal.js-master")
;; (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")

;; set content of initial slide to %t - Title
(setq org-reveal-title-slide "%t")




#+END_SRC

*** Other smaller additions

#+BEGIN_SRC emacs-lisp :tangle yes
;; Change undo/redo behaviour
(use-package undo-tree
  :config
  (global-undo-tree-mode))
(bind-key "C-z" 'undo-tree-undo wakib-keys-overriding-map)
(bind-key "C-y" 'undo-tree-redo wakib-keys-overriding-map)


;; Edit files with elevated permissions
(use-package sudo-edit)


;; Key Rebinding utility. Will be used in the keybinds section
(use-package bind-key)


;; alt+up/down to move line or region
(use-package drag-stuff)
(bind-key "M-<up>" 'drag-stuff-up wakib-keys-overriding-map)
(bind-key "M-<down>" 'drag-stuff-down wakib-keys-overriding-map)


;; display available keybindings in popup after a prefix key is pressed
(use-package which-key)
(which-key-mode)


;; Save a list of most recently edited files
;; We exclude elpa folder from recent files to prevent autoload files filling it up
(use-package recentf
  :config
  (recentf-mode)
  (setq recentf-max-saved-items 100
        recentf-exclude '("COMMIT_EDITMSG\\'"
                          "[/\\]elpa/\\.*"
                          "[/\\]var/\\.*")))


;; add an easy way to restart emacs
(use-package restart-emacs
  :commands (restart-emacs))
(bind-key "C-S-<f5>" 'restart-emacs wakib-keys-overriding-map)


(use-package expand-region
  :bind ("M-A" . er/expand-region))


(use-package avy
  :bind ("M-m" . avy-goto-char))

;; (use-package ibuffer-vc)



(use-package comment-dwim-2)
(bind-key "C-«" 'comment-dwim-2)
(bind-key "C-«" 'org-comment-dwim-2 org-mode-map)



;; (use-package symbolword-mode)
;; (symbolword-mode 1)
#+END_SRC

** Programming languages

Some of these entries are just to add syntax highlighting. Others add more features.

*** Markdown syntax

Add syntax highlighting.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package markdown-mode
  :mode "\\.\\(m\\(ark\\)?down\\|md\\)$")
#+END_SRC

*** YAML syntax

Add syntax highlighting.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package yaml-mode
  :mode "\\.yml\\'")
#+END_SRC

*** C# syntax

Add syntax highlighting.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package csharp-mode
   :mode ("\\.cs\\'" . csharp-mode)
   :interpreter ("csharp" . csharp-mode))
#+END_SRC

*** TODO Lisp
*** TODO Plain Text
*** TODO Latex
** Personal Settings

Load personal settings file if it exists.
This is where you put sensitive information like emails and credentials.

#+BEGIN_SRC emacs-lisp :tangle yes
(let ((personal-settings (expand-file-name "personal.el" user-emacs-directory)))
 (when (file-exists-p personal-settings)
   (load-file personal-settings)))
#+END_SRC

** Final Setup

things to do after making changes and right before startup

#+BEGIN_SRC emacs-lisp :tangle yes
;; start in org mode by default
(setq-default major-mode 'org-mode)
(setq debug-on-error nil)


;;; config.el ends here
#+END_SRC



This next part is not relative to the emacs configuration.
Here, we make the config file show 2 heading levels at startup, to make navigation easier.

;;; Local Variables:
;;; eval: (org-content 2)
;;; End:
