#+title: Emacs Configuration
#+startup: inlineimages

* Table of contents                                                   :TOC_3:
- [[#introduction][Introduction]]
  - [[#what-is-this-and-who-is-it-for][What is this and who is it for?]]
  - [[#dependencies][Dependencies]]
  - [[#installation][Installation]]
  - [[#custom-keybindings][Custom Keybindings]]
  - [[#fixes-and-improvements][Fixes and improvements]]
- [[#early-init-file][Early Init file]]
  - [[#file-header][File Header]]
  - [[#start-time-optimizations][Start time optimizations]]
  - [[#user-interface][User Interface]]
  - [[#file-footer][File Footer]]
- [[#init-file][Init file]]
  - [[#file-header-1][File Header]]
  - [[#method-1-load-pre-parsed-config-file][Method 1: load pre-parsed config file]]
  - [[#method-2-always-parse-config-file][Method 2: always parse config file]]
  - [[#file-footer-1][File Footer]]
- [[#main-configuration-file][Main Configuration file]]
  - [[#file-header-2][File Header]]
  - [[#setup][Setup]]
    - [[#enable-debug-while-loading-config][Enable Debug while loading config]]
    - [[#package-management][Package management]]
    - [[#organize-configuration-directory][Organize configuration directory]]
    - [[#startup-profiler][Startup Profiler]]
  - [[#appearance][Appearance]]
    - [[#font][Font]]
    - [[#theme][Theme]]
    - [[#theme-faces][Theme Faces]]
  - [[#functions][Functions]]
    - [[#custom-functions][Custom Functions]]
    - [[#function-aliases][Function Aliases]]
  - [[#keybindings][Keybindings]]
    - [[#change-default-keybindings-layout][Change default keybindings layout]]
    - [[#global-keybindings][Global Keybindings]]
  - [[#defaults][Defaults]]
    - [[#preferences][Preferences]]
    - [[#indentation][Indentation]]
    - [[#tabs][Tabs]]
    - [[#scrolling][Scrolling]]
    - [[#fringe-and-line-numbers][Fringe and line numbers]]
    - [[#backup-autosave-and-lockfiles][Backup, Autosave and Lockfiles]]
    - [[#desktop-session][Desktop session]]
    - [[#directory-local-variables][Directory local variables]]
    - [[#searching][Searching]]
  - [[#additional-features][Additional Features]]
    - [[#icon-integration][Icon integration]]
    - [[#project-management][Project Management]]
    - [[#workspaces][Workspaces]]
    - [[#file-explorer][File Explorer]]
    - [[#dashboard][Dashboard]]
    - [[#modeline][Modeline]]
    - [[#search-across-multiple-files][Search Across Multiple Files]]
    - [[#interactive-visual-replace][Interactive Visual Replace]]
    - [[#org-mode][Org mode]]
    - [[#modal-editing][Modal editing]]
    - [[#spellcheck][Spellcheck]]
    - [[#code-completion][Code Completion]]
    - [[#generic-completion-framework][Generic Completion Framework]]
    - [[#git-integration][Git Integration]]
    - [[#templates-and-snippets][Templates and Snippets]]
    - [[#multiple-cursors][Multiple Cursors]]
    - [[#presentations][Presentations]]
    - [[#move-text][Move text]]
    - [[#hydras][Hydras]]
    - [[#pdf-viewer][PDF viewer]]
    - [[#code-linter][Code Linter]]
    - [[#spacemacs-like-menu][Spacemacs-like menu]]
    - [[#other-additions][Other additions]]
  - [[#programming-languages][Programming languages]]
    - [[#c][C#]]
    - [[#dockerfile][Dockerfile]]
    - [[#hcl-hashicorp-configuration-language][HCL (Hashicorp Configuration Language)]]
    - [[#latex][Latex]]
    - [[#lisp][Lisp]]
    - [[#review-markdown][REVIEW Markdown]]
    - [[#terraform][Terraform]]
    - [[#yaml][YAML]]
  - [[#personal-settings][Personal Settings]]
  - [[#experimentation-area][Experimentation Area]]
    - [[#navigate-words-by-only-moving-to-the-first-character-backward-and-forward][navigate words by only moving to the first character, backward and forward]]
    - [[#stuff-i-need-to-try-that-might-improve-scrolling][Stuff I need to try that might improve scrolling.]]
    - [[#org-agenda-custom-commands][org agenda custom commands]]
    - [[#make-tab-line-empty][make tab-line empty]]
  - [[#file-footer-2][File Footer]]

* Introduction
** What is this and who is it for?

This emacs configuration allows you to use Org mode and still have access to "modern" keybindings.

Many of the keybindings are replaced with what I consider "standard" keybinds, like those you would find in Sublime Text, Atom and VSCode. Likewise, many of the features you would expect from some of these editors are also implemented here.

The goal of this configuration is to provide a comfortable experience editing Org mode files to programmers that are accustomed to modern text editors.

** Dependencies

In order for everything to work correctly, you should have the following installed on your system:

- ripgrep
- fd
- fzf
- aspell (or hunspell)
- git
- marked (or some other markdown parser)
- python
- vmd (node.js package)
- decktape (node.js package)

Some things like markdown and spellchecking have multiple options available.

** Installation

Eventually, this config will work on windows, but for now, only unix is supported.

optional backup:
cp ~/.emacs.d ~/.emacs.d_backup

installation:
cd ~/.emacs.d/
git clone https://github.com/kyukee/emacs-config.git

then, inside emacs, open the command menu with M-x and run 'all-the-icons-install-fonts'

** Custom Keybindings

*WARNING*
Most of the keybinds are missing or out of date...
I'll do something about it eventually...


The conversion to use "modern" keybinds is mostly dealt with by [[https://github.com/darkstego/wakib-keys][wakib-keys]].
I customized the commands and changed a few keys but it's still similar to the default package.

The following image shows all the keys you need to know to get started:

#+ATTR_ORG: :width 1200
[[./config-resources/keyboard-layout-ctrl.png]]

The wakib-keys package defines a lot more bindings that are more oriented towars speed and productivity.
If you're interested, go check it out.

Note: this image was done using [[http://www.keyboard-layout-editor.com/#/][Keyboard Layout Editor]].

** Fixes and improvements

Todo:

- [X] workspaces in dashboard
- [X] org mode: when pressing enter at the end of line that starts with '-', it adds two spaces
- [X] setting scroll margin messes up org indent mode. the first/last line sometimes appears unindented
- [X] change project name in the modeline (the name itself + its appearance)
- [X] change org source block header highlight color
- [X] home key should toggle between row 0 and first character in line (beginning and indentation, in emacs terms)
- [X] when line number is 0-9, and it changes to a greater value, the numbers column width changes and the whole buffers moves.
- [X] disable completion for plain text modes (org-mode)
- [X] config.org should open with 2 levels of headings
- [X] add tabs like Sublime Text or somehow show tabs in current project
- [X] disable tab-line in dashboard
- [X] hidden tab-bar reappears when doing: M-x ESC
- [X] mode-line lighter for current indentation settings isn't there anymore
- [X] add icon to custom projectile doom-modeline segment
- [X] workspaces in dashboard icon
- [X] org-indent messes up hl-line-mode. it only has one face for the indentation. this creates a gap from line number to line. fix by changing bg of curr line number
- [X] background colour of org document keywords is not the same as normal background
- [X] ctrl+shift+left/right doesnt work
- [X] a hex color should count as a full word when selecting it (double click or C-S-left/right) (disable subword navigation)
- [X] selecting with S-<home> and pressing delete only removes indentation (untabify)
- [X] make alt+arrow work in org mode for headlines without shift (custom function)
- [X] use straight.el so only packages declared in the config file are loaded
- [X] compare latest version with old version in git. load time went from 0.7-0.8 -> 1.0-1.2 seconds.
- [X] package-quickstart needs to be deleted after package update or else there's an error. sometimes also custom.el
- [X] arrow indicating visual line doesn't appear
- [X] figure out how to deal with new file (C-n) while using bufler groups
- [X] bufler groups show same file 2 times, in its own group and without a group
- [X] make C-backspace delete until first non whitespace character
- [X] make new line indicator appear only on right fringe
- [X] bufler workspace name in modeline doesn't fade to grey in inactive window
- [X] magit and dired buffers end up without  any bufler workspace
- [X] C-k should not copy to clipboard
- [X] make visual-regexp work with active region as input
- [X] org-indent sometimes does not indent the top-most line in the buffer (looks like changing line numbers font height fixed it)
- [X] add projectile hydras
- [X] add treemacs hydras
- [X] query-replace with current selection as input (Replace+ package maybe?)
- [X] M-o isnt working for C-o and flyspell-correct
- [X] why does reloading the init file mess up doom-modeline (and why does it only happen in the currently open buffer)
- [X] when dashboard is opened with a hydra, the hydra menu stays open
- [X] for every package, use as much use-package integration as possible
- [X] C-backspace deletes previous word. it should only delete whitespace
- [X] swiper sometimes shows the match behind the modeline
- [X] regarding doom-modeline buffer name segment, when the file is deleted and there is a forbidden icon, there should be an extra space before it.
- [X] do not show selection segment in modeline when clicking with the mouse
- [X] add shortcuts for dashboard and init file (maybe hydras)
- [X] new keybindings for project find and project replace
- [X] remove dashboard from initial bufler group
- [X] change bufler group for dashboard and magit-status
- [X] swiper always uses multiple cursor after pressing RET. Not using C-m as the keybind fixes it.
- [X] replace org-bullets with org-superstar
- [X] look at other modelines (spaceline and telephone-line)
- [X] being able to change the directory of a search (C-S-f)
- [X] make a hydra for my/org-latex-compile-and-open-pdf, org-sort, and org-goto
- [X] make pdf-tools work with scroll-other-window (M-<page_up/down>)
- [X] make untitled buffers appear in the 'All files' bufler group, and also in the respective project subgroup, if it exists
- [X] add indentation hydra
- [X] org-mode unordered lists should also have bullets (org-superstar seems to solve this)
- [X] make org-mode unordered lists use bullets as symbols, and remove the bullets from the orgmode headings
- [X] alt-shift-up/down conflict in org mode with multiple cursors (mc bind disabled for now)
- [X] add function to move line with current cursor to top of screen
- [X] do something about keybinds that put the cursor in the center/top of the screen
- [X] add C-S-s (save all)
- [X] add functions converting indentation to tabs/spaces
- [X] finish functions in indentation hydra (convert and set indentation width)
- [X] add function to navigate cursor to matching parenthesis, when on top of one
- [X] add function to delete everything between current parenthesis and its pair
- [X] counsel-find-file should show folders before files
- [X] make ivy ignore order of tokens
- [X] improve swiper regex groups colours for matches
- [X] make C-f and C-h use similar colors
- [X] apostrophes should not be selected when selecting words
- [X] show-paren-mode has issues in org-mode when encountering these symbol: "<" and ">"
- [X] apparently, the lines with "(modify-syntax-entry ?< ".")" are not being evaluated
- [X] when flyspell is active, show indicator, along with selected dictionary language
- [X] add hydra to change dictionary language
- [X] use hydra posframe
- [X] add bookmarks hydra
- [X] use C-t to show list of functions/symbols
- [X] C-k with region selected should also delete the line
- [X] commenting a region should comment all lines at the beginning of the line
- [X] vr/replace doesnt auto open org headings (anzu can do it, but it has worse syntax. solved by unfolding the entire file)
- [X] replace "cua-selection-mode" with "set-rectangular-region-anchor" from "rectangular-region-mode" (figure out what's the best option)
- [X] add option to load previous session on startup (button on dashboard) (use desktop+.el ?) (how does doom-emacs do it?)
- [X] dashboard appears in the buffer switch menu (C-b) after opening it with the hydra. It disappears after switching between two buffers in the workspace.
- [X] check if I can do anything with "force-mode-line-update" for updating dictionary modeline segment
- [X] dired buffers dont have a group in bufler
- [X] when using F3 search, check if there's an active region
- [X] clean up the final section of the config file
- [X] when I save the config file, a dired-mode *Find* buffer appears
- [ ] ctrl+shift+o to open directory in sidebar
- [ ] use flycheck for elisp (for config file)
- [ ] error indicator in fringe for flyspell and flycheck
- [ ] git gutter on left and flycheck gutter on right side
- [ ] add keybindings tables in config.org
- [ ] commenting inside source block jumps to top of block. happens with just 'emacs -Q' and comment-dwim
- [ ] maybe incorporate previous/next concept from wakib-emacs? (it uses the ';' key)
- [ ] when opening a treemacs workspace in dashboard, it should ask for a file
- [ ] use 'C-.' to fix any type of error
- [ ] opening a new file in terminal or explorer should add a new buffer to existing emacs frame (maybe use emacsclient)
- [ ] allow C-page up/down to cycle when at first/last tab
- [ ] use C-S-page up/down to move tabs
- [ ] allow jumping between git hunks (git-gutter) or modified buffer areas
- [ ] use smerge hydra for better merging conflict resolution (https://github.com/alphapapa/unpackaged.el#hydra)
- [ ] make it possible to see git gutter, company errors and visual line arrows all at the same time, without conflicts
- [ ] C-tab = tab-recent doesnt work (also for C-S-tab)
- [ ] give every doom modeline segment a mouse-over description and menu (tooltip)
- [ ] improve appearance of tab-line arrows (they appear when the bar is too full)
- [ ] for every package, add a quote from their git repo explaining what the package does
- [ ] add documentation for the following: (in org mode) M-left/right -> promote/demote single heading; M-S-left/right -> promote/demote heading subtree
- [ ] allow jumping to a function definition by ctrl-click or f2 or something else (check 'embark' package)
- [ ] add functions and hydras to convert line endings
- [ ] when a region is selected and an arrow key is presses in the opposite direction, exchange point and cursor
- [ ] change C-SPC to do something related to jumping to bookmarks, previous mark location, or something like that
- [ ] related to note-taking: checkout deft, notdeft, org-roam, org-ql, org-rifle, org-journal, idutils
- [ ] spellcheck modeline segment dissapears when linter is active (confirmed not working in a Dockerfile)
- [ ] ryo-modal messes up C-up and M-Return, in org-mode
- [ ] when in a bufler named workspace, new opened buffers are added to the default workspace, instead of the opened workspace
- [ ] add snippets to hydra-insert, if yasnippet starts being used
- [ ] restore bufler workspaces when restoring the session
- [ ] use M-S-left/right to indent by 1 space (already works like that in org tables and lists)
- [ ] F3 should not start a new search, but always go back to the previous one
- [ ] hydra toggle for golden-ratio-mode
- [ ] add some sort of agenda view where I can see tasks without dates (or improve current agenda view) (see calfw)
- [X] add margin to the left of org-agenda (between category and todo) (org-agenda-prefix)
- [ ] add toggle in hydra for golden-mode
- [ ] dashboard agenda shows archived tasks
- [ ] add hydra or M-<key> commands for org-mark-ring-push, pop-global-mark, counsel-mark-ring
- [ ] remove tab-line from bufler, magit, and any other like them
- [ ] see if it's possible to remove =*special*= buffers from =C-b=
- [ ] C-RET and C-S-RET to make newlines (add docs)
- [ ] make treemacs change directory when doing bufler focus workspace
- [ ] treemacs-follow-mode
- [ ] change treemacs project font (remove underline)
- [ ] C-SPC and C-u SPC no longer work because of ryo-modal (C-SPC C-SPC to mark, C-u C-SPC to jump to prev mark)
- [ ] golden-ratio seems to be interfering with which-key
- [ ] add =:ensure-system-package= and more dependencies to use-package declarations


# NOTE: use org-sort and select 'X' to sort this list by what items are checked


and also:

- [ ] look at vscode settings + extensions and import anything I like
- [ ] look at sublime settings + extensions and import anything I like
- [ ] when this config is developed enough, see what it needs to work on Windows

* Early Init file
** File Header

Emacs HEAD (27+) introduces early-init.el, which is run before init.el, before package and UI initialization happens.

#+begin_src emacs-lisp :tangle early-init.el
;;; early-init.el --- Emacs Early Init File          -*- lexical-binding: t -*-

;;; Commentary:
;; GNU Emacs Configuration - Early Init

;;; Code:

#+end_src

** Start time optimizations

#+begin_src emacs-lisp :tangle early-init.el

;; A common optimization is to temporarily reduce the frequency of garbage collection during initialization.
(setq gc-cons-threshold most-positive-fixnum)

;; FileNameHandler
(defvar file-name-handler-alist-original file-name-handler-alist)
(setq file-name-handler-alist nil)

;; Restore values after startup
(add-hook 'after-init-hook
  (lambda ()
    (setq gc-cons-threshold (* 16 8 1024 1024) ; 16MB
          file-name-handler-alist file-name-handler-alist-original)))

#+end_src

** User Interface

For the GUI changes that deserve to be in early-init. It is more efficient to disable UI elements before they are even loaded than to load them with the wrong configuration than change them.

#+begin_src emacs-lisp :tangle early-init.el

;; Only show cursor in the active window.
(setq-default cursor-in-non-selected-windows nil)

;;Default frame position
(setq default-frame-alist
  `((height . 60) (width . 100)))

;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

;; show column number alongside line number
(column-number-mode 1)

;; display relative line numbers
(global-display-line-numbers-mode)
(setq display-line-numbers-type 'visual)

;; highlight current line
(global-hl-line-mode +1)

;; avoid flashing the default emcas modeline while starting
(setq mode-line-format nil)

;; Do not resize the frame at this early stage.
(setq frame-inhibit-implied-resize t)

#+end_src

** File Footer

#+begin_src emacs-lisp :tangle early-init.el

;;; early-init.el ends here
#+end_src

* Init file
** File Header

#+begin_src emacs-lisp :tangle init.el
;;; init.el --- Emacs Init File          -*- lexical-binding: t -*-

;;; Commentary:
;; GNU Emacs Configuration - Initialization File

;;; Code:

#+end_src

** Method 1: load pre-parsed config file

If config.el exists then load it, otherwise tangle config.org

After the first time that config.el is created, this will no longer tangle the config file.
This is slightly faster than just using org-babel-load-file

This is very effective when you have a hook to tangle the config.org file everytime you save it.

#+begin_src emacs-lisp :tangle init.el

(if (file-exists-p (expand-file-name "config.el" user-emacs-directory))
    (load-file (expand-file-name "config.el" user-emacs-directory))
  (org-babel-load-file (expand-file-name "config.org" user-emacs-directory)))

#+end_src

** Method 2: always parse config file

This can be useful if recovering from errors in the config file is a concern

#+begin_src emacs-lisp :tangle init.el

(org-babel-load-file (expand-file-name "config.org" user-emacs-directory))

#+end_src

** File Footer

#+begin_src emacs-lisp :tangle init.el

;;; init.el ends here
#+end_src

* Main Configuration file
** File Header

#+begin_src emacs-lisp :tangle yes
;;; config.el --- Emacs Configuration File          -*- lexical-binding: t -*-

;;; Commentary:
;; GNU Emacs Configuration - Startup file

;;; Code:

#+end_src

** Setup
*** Enable Debug while loading config

Enable debug mode before we make any changes. This makes is easier to figure out errors when they happen.
It only stays active while the config is loading.

#+begin_src emacs-lisp :tangle yes

;; when an error occurs during startup, automatically open debugger
(setq debug-on-error t)

;; disable debugging after startup
(add-hook 'after-init-hook
  (lambda () (setq debug-on-error nil)))

#+end_src

*** Package management
**** Package: straight

straight.el is used to make the init-file the sole source of truth for package operations.

#+begin_src emacs-lisp :tangle yes

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(setq straight-use-package-by-default         t
      straight-check-for-modifications        '(find-when-checking))

#+end_src

**** Package: use-package

#+begin_src emacs-lisp :tangle yes

(straight-use-package 'use-package)

;; Configure `use-package' prior to loading it.
(setq use-package-expand-minimally            t
      use-package-compute-statistics          t
      use-package-enable-imenu-support        t
      use-package-verbose                     t)

#+end_src

**** Package: use-package-ensure-system-package

#+begin_src emacs-lisp :tangle yes

(use-package use-package-ensure-system-package)

#+end_src

**** Package: pretty-hydra

nicer syntax for declaring hydras with use-package

#+begin_src emacs-lisp :tangle yes

(use-package pretty-hydra)

#+end_src

**** Basic usage

To install a package temporarily (until you restart Emacs):
  - M-x straight-use-package

To install a package permanently, place a call to straight-use-package in your init-file, like:
  - (straight-use-package 'el-patch)

To update all packages to their most recent version:
  - M-x straight-pull-all

A note about ":init" and ":config".
  - init is executed before a package is loaded (even if deferred)
  - config is executed after a package is loaded

*** Organize configuration directory
**** Package: no-littering

Make emacs configuration directory more organized and keep it clean.
'no-littering' should be loaded as early as possible since it changes where other packages will save their files.

#+begin_src emacs-lisp :tangle yes

(use-package no-littering)

#+end_src

*** Startup Profiler
**** Package: esup

This isn't in the same section as the other features because it needs to loaded as early as possible to get accurate results.

not using it because it doesn't really work well with early-init file

#+begin_src emacs-lisp :tangle no

(use-package esup
  :commands (esup)
  :config
  (setq esup-depth 0))

#+end_src

**** Package: benchmark-init

#+begin_src emacs-lisp :tangle no

(use-package benchmark-init
  :config
  (benchmark-init/activate)
  :hook (after-init . benchmark-init/deactivate))

#+end_src

**** Basic usage

When using the profiler, just uncoment the line that disables the package.
Comment and uncoment that line to enable/disable the feature.

To see the results, run:
  - benchmark-init/show-durations-tabulated
  - benchmark-init/show-durations-tree

** Appearance
*** Font

Some of my font options:
  - IBM Plex Mono
  - Cartograph CF

The unit for the 'height' attribute is 1/10pt, which means a height of 100 is 10pt.

#+begin_src emacs-lisp :tangle yes

(set-face-attribute 'default nil :font "Cartograph CF-12")

(custom-set-faces
  '(mode-line                  ((t (:family "Cartograph CF" :height 100))))
  '(mode-line-inactive         ((t (:family "Cartograph CF" :height 100))))
  '(tab-line-tab               ((t (:family "Cartograph CF" :height 100))))
  '(line-number                ((t (:family "Cartograph CF" :height 110))))
  '(line-number-current-line   ((t (:family "Cartograph CF" :height 110))))
  '(treemacs-file-face         ((t (:family "Cartograph CF" :height 100)))))

#+end_src

*** Theme

#+begin_src emacs-lisp :tangle yes

(use-package cyberpunk-theme
  :config
    (load-theme 'cyberpunk t))

#+end_src

*** Theme Faces

#+begin_src emacs-lisp :tangle yes

(setq custom--inhibit-theme-enable nil)

(with-eval-after-load "cyberpunk-theme"
  (let ((color-bg   "#14141D")
        (color-fg   "#c8c9ad")  ;; #bdbdb3, #ecf0c1
        (color-cyan "#21D7D7")
        (color-lime "#12F292"))
    (custom-theme-set-faces
     'cyberpunk

     ;; defaults
     `(default                       ((t (:background ,color-bg :foreground ,color-fg))))
     `(fringe                        ((t (:background ,color-bg :foreground "#dcdccc"))))
     '(region                        ((t (:background "#5e153c" :extend t))))
     '(error                         ((t (:foreground "#D92027" :weight bold))))
     '(whitespace-tab                ((t (:background nil))))
     '(whitespace-trailing           ((t (:background nil))))
     `(font-lock-keyword-face        ((t (:foreground ,color-cyan))))
     '(font-lock-variable-name-face  ((t (:foreground "#f461c6"))))  ; #f54dce

     ;; line numbers
     '(line-number                   ((t (:foreground "gray30"))))
     `(line-number-current-line      ((t (:background ,color-bg :foreground "#dedede"))))

     ;; tab-line
     `(tab-line                      ((t (:background ,color-bg :foreground "white" :height 1.0))))
     `(tab-line-tab                  ((t (:inherit tab-line :background ,color-bg :foreground "#dedede"))))       ; selected but window not in focus
     `(tab-line-tab-current          ((t (:inherit tab-line-tab :overline ,color-lime))))                         ; selected
     '(tab-line-tab-inactive         ((t (:inherit tab-line-tab :foreground "gray50"))))                          ; not selected
     '(tab-line-highlight            ((t (:inherit tab-line-tab :background "orange" :foreground "#222222"))))    ; on mouse-over

     ;; modeline
     '(doom-modeline-persp-buffer-not-in-persp ((t (:inherit (font-lock-comment-face italic)))))
     '(doom-modeline-persp-name      ((t (:inherit (font-lock-doc-face italic bold)))))
     '(doom-modeline-bar             ((t (:background "#251F33"))))
     '(doom-modeline-bar-inactive    ((t (:background "#1A1A1A"))))
     '(doom-modeline-buffer-path     ((t (:inherit (mode-line-emphasis) :foreground "gray60"))))
     `(doom-modeline-project-dir     ((t (:inherit (doom-modeline-buffer-path) :foreground ,color-lime))))
     '(mode-line                     ((t (:background "#251F33" :foreground "gray60" :box (:line-width -1 :color "#0d1a1e")))))
     '(mode-line-inactive            ((t (:background "#1A1A1A" :foreground "#4D4D4D" :box (:line-width -1 :color "#0d1a1e")))))
     '(mode-line-highlight           ((t (:box (:line-width 2 :color "gray70")))))
     '(mode-line-buffer-id           ((t (:foreground "gray70"))))  ;; #21D7D7
     `(mode-line-emphasis            ((t (:foreground ,color-lime :weight bold))))
     '(doom-modeline-info            ((t (:foreground "gray60" ))))

     ;; ivy
     '(minibuffer-prompt             ((t (:background "#02242b" :foreground "medium spring green"))))
     '(highlight                     ((t (:background "#333333"))))
     '(ivy-current-match             ((t (:box nil :underline "#dc8cc3" :weight extra-bold))))
     '(ivy-minibuffer-match-face-1   ((t (:background "#444444"))))
     '(ivy-minibuffer-match-face-2   ((t (:background "#666666" :weight bold))))
     '(ivy-minibuffer-match-face-3   ((t (:background "#5654ca" :weight bold))))
     '(ivy-minibuffer-match-face-4   ((t (:background "#8b4887" :weight bold))))
     '(ivy-posframe-border           ((t (:background "#A13878"))))
     '(ivy-posframe                  ((t (:background "#1B1821"))))   ; 13141A

     ;; flyspell
     '(flyspell-incorrect            ((t (:underline (:style wave :color "red2")))))
     '(flyspell-duplicate            ((nil)))

     ;; org mode
     '(org-todo                      ((t (:foreground "#ffa500" :box (:line-width 1 :style none) :weight bold))))
     '(org-done                      ((t (:foreground "#00ff00" :box (:line-width 1 :style none) :weight bold))))
     '(org-checkbox-statistics-todo  ((t (:foreground "#ffa500"))))
     '(org-checkbox-statistics-done  ((t (:foreground "#00ff00"))))
     '(org-block                     ((t (:background "#151522"))))
     '(org-block-begin-line          ((t (:background "#17162a" :foreground "#5a5a5a" :extend t))))  ; #151424
     '(org-block-end-line            ((t (:background "#17162a" :foreground "#5a5a5a" :extend t))))
     '(org-ellipsis                  ((t (:foreground "gainsboro"))))
     '(org-level-3                   ((t (:foreground "#A840F4"))))
     '(org-level-4                   ((t (:foreground "#0cf456"))))
     `(org-document-title            ((t (:background ,color-bg :foreground "#add8e6" :weight bold :height 1.8))))
     `(org-checkbox                  ((t (:background ,color-bg :foreground "#dddddd"))))
     '(org-document-info             ((t (:foreground "#add8e6" :weight bold))))
     '(org-document-info-keyword     ((t (:foreground "#8B8989"))))

     ;; other packages
     '(dashboard-banner-logo-title   ((t (:foreground "#A840F4" :height 1.0))))

     '(diff-hl-insert                ((t (:background "green4" :foreground "green4"))))
     '(diff-hl-change                ((t (:background "yellow4" :foreground "yellow4"))))
     '(diff-hl-delete                ((t (:background "red4" :foreground "red4"))))

     ;; '(anzu-replace-highlight        ((t (:foreground "red"))))
     ;; '(anzu-replace-to               ((t (:foreground "green"))))

     ;; change face of bullets for all headers
     ;; '(org-superstar-header-bullet   ((t (:height 1.4 :foreground ,color-cyan))))

     '(vr/match-0                    ((t (:background "#5654ca" :foreground "#ffffff"))))
     '(vr/match-1                    ((t (:background "#8b4887" :foreground "#ffffff"))))

     '(lazy-highlight                ((t (:background "yellow4" :foreground "#ffffff"))))
     '(isearch                       ((t (:background "#ff1493" :foreground "#000000"))))
     '(match                         ((t (:background "#8b4887" :foreground "#ffffff"))))
     '(isearch-fail                  ((t (:background "#5654ca" :foreground "#ffffff"))))

     `(bufler-group                  ((t (:foreground ,color-cyan))))
     '(header-line                   ((t (:box (:line-width -1 :color "#4e4e00" :style nil) :foreground "#ffff00" :background "#2b2b2b"))))

     '(company-tooltip               ((t (:background "#1B1821"))))  ;; same as ivy-posframe
     )))

#+end_src

** Functions
*** Custom Functions

General user created functions.
These functions aren't associated with any package since they only use default emacs functionality.

**** Functions: emacs reload, quit, etc

#+begin_src emacs-lisp :tangle yes

(defun my/reload-init-file ()
  "Reload Emacs cofiguration."
  (interactive)
  (message "Reloading init.el...")
  (load-file user-init-file)
  (message "Reloading init.el... done."))

(defun my/open-init-file ()
  "Open Emacs cofiguration."
  (interactive)
  (message "Opening init.el...")
  (find-file "~/.emacs.d/config.org")
  (message "Opened init.el... done."))

(defun my/kill-emacs ()
  "Save open buffers, then exit unconditionally."
  (interactive)
  (save-some-buffers nil t)
  (kill-emacs))

(defun my/toggle-fullscreen ()
  "Toggle fullscreen."
  (interactive)
  (toggle-frame-fullscreen))

#+end_src

**** Functions: select and navigate text

#+begin_src emacs-lisp :tangle yes

(defun my/select-current-line ()
  "Select the current line."
  (interactive)
  (beginning-of-line) ; move to end of line
  (set-mark (line-end-position)))

(defun my/genius-beginning-of-line ()
  "Move point to the first non-whitespace character on this line.
If point was already at that position, move point to beginning of line.
If line is empty, indent the line relative to the preceding line."
  (interactive "^")
  (let ((oldpos (point)))
    (back-to-indentation)
    (and (= oldpos (point))
         (progn (move-beginning-of-line nil)
                (when (=
                       (line-beginning-position)
                       (line-end-position))
                  (save-excursion
                    (indent-according-to-mode)))))))

(defun my/smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

;; for some reason, this workaround is needed. "M-," doesn't work with shift select by default
(defun my/forward-sexp-with-shift-select ()
  "Standard `forward-sexp', but with support for shift select."
  (interactive)
  (setq this-command-keys-shift-translated t)
  (call-interactively 'forward-sexp))

(defun my/backward-sexp-with-shift-select ()
  "Standard `backward-sexp', but with support for shift select."
  (interactive)
  (setq this-command-keys-shift-translated t)
  (call-interactively 'backward-sexp))

#+end_src

**** Functions: move, indent and delete text

#+begin_src emacs-lisp :tangle yes

(defun my/delete-word-no-clipboard (arg)
  "If the next character is whitespace, delete all until the first character.
Otherwise, delete characters forward until encountering the end of a word.
With ARG, do this that many times.  ARG can be negative to go backwards.
If ARG is negative, look at previous character instead of next one.
This command does not push text to `kill-ring'."
  (interactive "p")
  (if (or (and (looking-at "[ \t\n]") (> arg 0)) (and (looking-back "[ \t\n]") (< arg 0)))
      (let ((pos (point)))
        (re-search-forward "[^ \t\n]" nil t arg)
        (forward-char (- (cl-signum arg)))
        (if (= pos (point))
            (delete-region
             (point)
             (progn
               (forward-word arg)
               (point)))
          (delete-region pos (point))
          ))
    (delete-region
     (point)
     (progn
       (forward-word arg)
       (point)))
    ))

(defun my/backward-delete-word-no-clipboard (arg)
  "If the next character is whitespace, delete all until the first character.
Otherwise, delete characters forward until encountering the end of a word.
With ARG, repeat that many times.
This command does not push text to `kill-ring'."
  (interactive "p")
  (my/delete-word-no-clipboard (- arg)))

(defun my/indent-region-custom(numSpaces)
  "Indent current line or active region, if one is selected, by NUMSPACES.
For every line with a selected character, indent from the beggining of the line.
This means that the first and last line don't need to be completly selected."
  (progn
    ;; default to start and end of current line
    (setq regionStart (line-beginning-position))
    (setq regionEnd (line-end-position))
    ;; if there's a selection, use that instead of the current line
    (when (use-region-p)
      (setq regionStart (region-beginning))
      (setq regionEnd (region-end)))
    (save-excursion ; restore the position afterwards
      (goto-char regionStart) ; go to the start of region
      (setq start (line-beginning-position)) ; save the start of the line
      (goto-char regionEnd) ; go to the end of region
      (setq end (line-end-position)) ; save the end of the line
      (indent-rigidly start end numSpaces) ; indent between start and end
      (setq deactivate-mark nil) ; restore the selected region
      )))

(defun my/untab-region (N)
  "Unindent all lines in region by N spaces."
  (interactive "p")
  (my/indent-region-custom (- N)))

(defun my/tab-region (N)
  "Indent all lines in region by N spaces."
  (interactive "p")
  (if (active-minibuffer-window)
      (minibuffer-complete)     ; tab is pressed in minibuffer window -> do completion
    (my/indent-region-custom N) ; call my/indent-region-custom
    ))

;; can't use this yet because it would interfere with ivy
;;(bind-key "<backtab>" 'untab-region)
;;(bind-key "<tab>" 'tab-region)

#+end_src

**** Functions: other

#+begin_src emacs-lisp :tangle yes

(defun my/set-buffer-large-fringe ()
  "The fringe is set smaller than default because of the git gutter indicators.
Some buffers like magit and bufler use the fringe for indicators and need
more space.  Other buffers that allow folding and unfolding with tab should
also use this."
  (setq left-fringe-width 16
        right-fringe-width 8))

(defun my/set-buffer-dashboard-fringe ()
  "Used to set fringes specifically for the dashboard."
  (setq left-fringe-width 12
        right-fringe-width 12))

;; used as such: (my/pad-string "some string" 15)
;; result: "    some string"
(defun my/pad-string (string size)
  "Pad STRING by adding spaces to the start until SIZE is reached.
If STRING length is smaller than SIZE, do nothing."
  (let* ((padding (- size (length string)))
         (lpad (+ (length string) padding))
         (lformat (format "%%%ds" lpad))
         (rformat (format "%%%ds" (- size))))
    (format rformat (format lformat string))))

;; taken from doom-modeline indentation segment
(defun my/get-buffer-indentation-size ()
  "Get the indentation width for the current buffer."
  (let ((lookup-var
         (seq-find (lambda (var)
                     (and var (boundp var) (symbol-value var)))
                   (cdr (assoc major-mode doom-modeline-indent-alist)) nil)))
    (if lookup-var
        (symbol-value lookup-var)
      tab-width)))

(defun my/org-latex-compile-and-open-pdf ()
  "Compile an org document into a Latex pdf and open it.
The compilation runs in the background.  If the compilation is successful
the pdf is opened, otherwise the compilation error is shown"
  (interactive)
  (let ((filename (file-name-sans-extension buffer-file-name))
        (compilation-exit-code (shell-command "make")))  ;; compile is async, shell-command is synchronous
    ;; check if the exit code is 0, which means there are no errors
    (when (= 0 compilation-exit-code)
      (find-file-other-window (expand-file-name (concat filename ".pdf"))))))

(defun my/untabify-whole-buffer ()
  "Convert all indentation in document into spaces."
  (interactive)
  (mark-whole-buffer)
  (untabify (region-beginning) (region-end)))

(defun my/tabify-whole-buffer ()
  "Convert all indentation in document into tabs."
  (interactive)
  (mark-whole-buffer)
  (tabify (region-beginning) (region-end)))

;; change how word navigation functions for some symbols
(defun my/modify-word-definitions ()
  "Modify how some symbols are treated to improve word navigation."
  ;; This can be used to treat undescore as a word character
  ;; (modify-syntax-entry ?_ "w")

  ;; When using "show-paren-mode", if code contains an angled bracket (">") is treated as a matching paren, which creates a mismatch.
  ;; This disables matching for the angle bracket character.
  (modify-syntax-entry ?< ".")
  (modify-syntax-entry ?> ".")

  ;; This makes backward-word and forward-word ignore the ' character
  (modify-syntax-entry ?' "."))

;; the "er/expand-region" function could also maybe work
(defun my/extend-region-to-whole-lines ()
  "Extend an active region so that the first and last lines are fully selected.
In the first line of the selected region, extend to beginning of line, and in
the last line of the region, extend to end of line (including final newline)."
  (interactive)
  (let ((curr  (point))
        (beg   (save-excursion (goto-char (region-beginning))
                               (line-beginning-position)))
        (end   (save-excursion (goto-char (region-end))
                               (line-end-position))))
    (if (= end curr)
        (exchange-point-and-mark))
    (goto-char beg)
    (exchange-point-and-mark)
    (goto-char end)
    (right-char)))

;; move/rename current file
(defun my/rename-current-buffer-file ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let* ((name (buffer-name))
        (filename (buffer-file-name))
        (basename (file-name-nondirectory filename)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " (file-name-directory filename) basename nil basename)))
        (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'"
                   name (file-name-nondirectory new-name)))))))

(defun my/show-buffer-file-name ()
  "Show the full path to the current file in the minibuffer."
  (interactive)
  (let ((file-name (buffer-file-name)))
    (if file-name
        (progn
          (message file-name)
          (kill-new file-name))
      (error "Buffer not visiting a file"))))

(defun my/show-buffer-name ()
  "Show the filename of the current file in the minibuffer."
  (interactive)
  (let ((file-name (buffer-name)))
    (if file-name
        (progn
          (message file-name)
          (kill-new file-name))
      (error "Buffer not visiting a file"))))

;; Start emacs without a session and allow manually loading the previous session, if desired.
;; Use /desktop-save-in-desktop-dir/ to save the first session, if there aren't any saved sessions yet.
(defun my/desktop-enable ()
    "Load the last saved desktop and enable autosaving."
    (interactive)
    (let ((desktop-load-locked-desktop "ask"))
      (desktop-read)
      (desktop-save-mode 1))
    (message "Previous session loaded"))

(defun my/export-reveal-presentation-to-pdf ()
  "Create a pdf from an org file using a reveal.js package.
Take the name of the currently open buffer and search for a file with
the same name and an html extension. Then convert the Reveal html file
to a pdf, with the decktape utility."
  (interactive)
  (let* ((file-name (file-name-sans-extension (buffer-name)))
        (html-file-name (concat file-name ".html"))
        (pdf-file-name (concat file-name ".pdf")))
    (if (not (file-exists-p html-file-name))
        (error (concat "Reveal HTML file " html-file-name " not found"))
      (async-shell-command
       (concat "decktape reveal --size='2048x1536' " html-file-name " " pdf-file-name))
      (message (concat pdf-file-name " successfully created")))))

(defun my/open-scratch-buffer ()
  "Switch to scratch buffer, creating it if it doesn't exist."
  (interactive)
  (switch-to-buffer "*scratch*"))

#+end_src

*** Function Aliases
**** Functions: menu-bar

Give the toggle menu function a nicer name so its easier to find if necessary.

#+begin_src emacs-lisp :tangle yes

(defalias 'toggle-menu-bar 'toggle-menu-bar-mode-from-frame)

#+end_src

**** Functions: bookmarks

Consolidate names for functions related to bookmarks.
These are the function used for bookmarks:

- bookmark-add-or-open
- bookmark-remove
- bookmark-rename

#+begin_src emacs-lisp :tangle yes

(defalias 'bookmark-add-or-open 'counsel-bookmark)
(defalias 'bookmark-remove 'bookmark-delete)

#+end_src

**** Functions: revert-buffer

#+begin_src emacs-lisp :tangle yes

(defalias 'reload-buffer 'revert-buffer)

#+end_src

** Keybindings
*** Change default keybindings layout
**** Information

I don't like the default emacs keybindings, so I use some packages to change them.

Wakib changes emacs keybindings to be more modern and ergonomic.
This package should be near the top of the this file's features list, so there isn't any error when assigning keybindings to the wakib keymap.

**** History

Here's my adventure with emacs and keybindings:
I grew up with Sublime Text, Atom and VSCode and these all share a (mostly) common set of keybinds.
These are the keybinds I'm interested in using.
I tried standard Emacs keybinds for a short amount of time and I wasn't impressed at all.

Here's my history with trying to use "standard" keybinds packages in emacs:

- ergoemacs-mode
	At first I tried using ergoemacs-mode, but that created a lot of conflicts when my config grew in size as I added more functinality.
	I also had issues with reloading my config file.

- cua-mode
	Then I tried using cua-mode, but it wasn't "standard" enough to my liking.
	The way 'C-x' works in particular was a problem, since I would like to cut a whole line by default when I press C-x and there is no active region selected.

- manual bindings in config
	The next attempt was to bind every key manually in my emacs config file.
	This gave me a lot of control and knowledge over what exactly was happening in terms of keybinds, which I liked.
	It was almost perfect, but not quite there yet.
	I was able to set up all the bindings that are prefixed by Control and I was also able to bind C-x, C-h and C-g to '<menu> x', '<menu> h' and '<menu> g', respectively.
	The problem is that Emacs makes rebinding C-c quite difficult.

- wakib-keys
	I found out a package that was able to deal with the C-c rebind issue, and decided to just use it instead of dealing with all the trouble of rebinding C-c myself.
	Since wakib-keys override the global keymap binds, this involved transferring some of my keybinds to the wakib keymap (wakib-keys-overriding-map).
	It also adds some new keybindings for things that I didn't originally want, but that I think might be useful.
	Finally, I was able to achieve the behavior I wanted

**** Package: wakib-keys

#+begin_src emacs-lisp :tangle yes

(use-package wakib-keys
  :init
  (wakib-keys 1)
  :hook
  (after-change-major-mode . wakib-update-major-mode-map)
  (menu-bar-update . wakib-update-minor-mode-maps))

#+end_src

*** Global Keybindings

Here are keybinds that apply globally and don't depend on any package.
The ones that use functions from some package are defined in that package's section.

Some of these are slight alterations to wakib, such as modifying the functions of the keybinds.
Others add convenient things like zoom, reloading, fullscreen, etc.


*Navigating parenthesis*

A balanced expression can be a parenthetical group, a number, a word or a symbol. The precise definition of a balanced expression may depend on the current mode. Here is how to move from a balanced expression to another:

C-M-n     forward-list   Move forward over a parenthetical group
C-M-p     backward-list  Move backward over a parenthetical group
C-M-f     forward-sexp   Move forward over a balanced expression
C-M-b     backward-sexp  Move backward over a balanced expression
C-M-k     kill-sexp      Kill balanced expression forward


#+begin_src emacs-lisp :tangle yes

;; reload emacs config file
(bind-key "<C-f5>" 'my/reload-init-file wakib-keys-overriding-map)

;; reload current file
(bind-key "<f5>" 'reload-buffer wakib-keys-overriding-map)

;; make 'C-SPC' select in a rectangle instead of the normal selection
;; (bind-key "C-SPC" 'rectangle-mark-mode wakib-keys-overriding-map)

;; alternative way to quit emacs besides C-x C-c
(bind-key "C-q" 'my/kill-emacs wakib-keys-overriding-map)

;; add a fullscreen toggle
(bind-key "<f11>" 'my/toggle-fullscreen wakib-keys-overriding-map)

(bind-key "C-'" 'text-scale-decrease wakib-keys-overriding-map)
(bind-key "C-«" 'text-scale-increase wakib-keys-overriding-map)

(bind-key "<escape>" 'keyboard-escape-quit wakib-keys-overriding-map)

(bind-key "C-<left>" 'backward-word wakib-keys-overriding-map)
(bind-key "C-<right>" 'forward-word wakib-keys-overriding-map)

(bind-key "M-o" nil wakib-keys-overriding-map) ;; the default bind interferes with ivy (show options command)

(bind-key "<backspace>" 'backward-delete-char-untabify)

(bind-key "C-<delete>" 'my/delete-word-no-clipboard wakib-keys-overriding-map)
(bind-key "C-<backspace>" 'my/backward-delete-word-no-clipboard wakib-keys-overriding-map)

(bind-key "<home>" 'my/smarter-move-beginning-of-line wakib-keys-overriding-map)

;; switch to a recent tab
(bind-key "<C-tab>" 'tab-recent wakib-keys-overriding-map)


(bind-key "C-l" 'swiper-recenter-top-bottom wakib-keys-overriding-map)
;; (bind-key "C-l" 'my/select-current-line wakib-keys-overriding-map)


(bind-key "M-s" 'set-mark-command wakib-keys-overriding-map)


(bind-key "C-s" 'save-buffer wakib-keys-overriding-map)


;; (bind-key "M-," 'backward-sexp wakib-keys-overriding-map)
;; (bind-key "M-." 'forward-sexp wakib-keys-overriding-map)
;; (bind-key "M-;" 'my/backward-sexp-with-shift-select wakib-keys-overriding-map)
;; (bind-key "M-:" 'my/forward-sexp-with-shift-select wakib-keys-overriding-map)


(bind-key "C-M-<left>" 'backward-sexp wakib-keys-overriding-map)
(bind-key "C-M-S-<left>" 'my/backward-sexp-with-shift-select wakib-keys-overriding-map)

(bind-key "C-M-<right>" 'forward-sexp wakib-keys-overriding-map)
(bind-key "C-M-S-<right>" 'my/forward-sexp-with-shift-select wakib-keys-overriding-map)


(bind-key "C-M-<up>" 'backward-up-list wakib-keys-overriding-map)
(bind-key "C-M-<down>" 'down-list wakib-keys-overriding-map)


(bind-key "C-t" 'counsel-imenu wakib-keys-overriding-map)


(bind-key "C-<up>" 'backward-paragraph wakib-keys-overriding-map)
(bind-key "C-<down>" 'forward-paragraph wakib-keys-overriding-map)


;;     on Linux, the menu/apps key syntax is <menu>
;;     on Windows, the menu/apps key syntax is <apps>
;;     make the syntax equal
(define-key key-translation-map (kbd "<apps>") (kbd "<menu>"))

#+end_src

**** *navigation*

h,j,k,l

left-char
right-char
previous-line
next-line

^,$,C-b,C-f

beginning-of-line
end-of-line
scroll-up-command
scroll-down-command

b,w,{,}

backward-word
forward-word
backward-paragraph
forward-paragraph

%,]),]}

backward-sexp
forward-sexp
backward-up-list
down-list

":m .+1", ":m .-1", <, >

drag-stuff-left
drag-stuff-right
drag-stuff-up
drag-stuff-down

**** test

j,i,k,l

left-char
right-char
previous-line
next-line

u,o

scroll-up-command
scroll-down-command

U,O

beginning-of-line
end-of-line

J,I,K,L

backward-word
forward-word
backward-paragraph
forward-paragraph

p,+,P,* (alternative for: [,],{,})

backward-sexp
forward-sexp
backward-up-list
down-list

M-(j,i,k,l)

drag-stuff-left
drag-stuff-right
drag-stuff-up
drag-stuff-down

** Defaults

Configure stuff that already comes with emacs. No packages are installed in this section.

*** Preferences

Some nice-to have things and general settings.

#+begin_src emacs-lisp :tangle yes

(setq custom-file                    (expand-file-name "etc/custom.el" user-emacs-directory)  ;; Put Customize blocks in a separate file
      inhibit-startup-screen         t                      ;; disable default startup screen
      uniquify-buffer-name-style     'forward               ;; for files with the same name, include part of directory name at the beginning of the buffer name
      shift-select-mode              t                      ;; allow marks to be set when shift arrow-ing
      focus-follows-mouse            t                      ;; allow using mouse to switch between windows
      browse-url-browser-function    'browse-url-generic    ;; links and html files should be opened in a browser, instead of emacs
      browse-url-generic-program     "xdg-open"
      ring-bell-function             'ignore                ;; disable bell
      blink-cursor-interval          1                      ;; change cursor blink speed. default is 0.5
      require-final-newline          t)                     ;; On save, automatically add final newline

;; open new buffers in an already existing frame
;; (setq ns-pop-up-frames nil)

;; this hook applies to every mode, so its the same as applying it globally
(add-hook 'after-change-major-mode-hook #'my/modify-word-definitions)

;; Only require to type 'y' or 'n' instead of 'yes' or 'no' when prompted
(fset 'yes-or-no-p 'y-or-n-p)

;; Try to always use utf8
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

;; load file with 'Customize' settings
(when (file-exists-p custom-file)
  (load custom-file))

;; On save, automatically remove trailling whitespace
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; For all text modes, use visual-line-mode
(add-hook 'text-mode-hook 'visual-line-mode)

;; auto refresh dired when file changes
(add-hook 'dired-mode-hook 'auto-revert-mode)

;; automatically reload files from disk when changed externally
(global-auto-revert-mode 1)

;; dont ask for confirmation for refreshing PDF buffers
(setq revert-without-query '(".pdf"))

;; replace the active region just by typing text and delete the selected text by hitting the Backspace key
(delete-selection-mode 1)

;; highlight matching parentheses
(show-paren-mode 1)

;; automatically add a pair to braces and quotes
(electric-pair-mode 1)

(setq-default cursor-type 'bar)
(set-cursor-color "#ffffff")

;; define values for split-sensibly
;; Note: the thresholds need to be twice as big as the smallest window allowed, because the new windows each use half of former window size.
;; (setq split-width-threshold 100
;;       split-height-threshold 40)

;; new buffers are opened in org-mode by default
(setq-default major-mode 'org-mode)

;; default value is (middle top bottom)
(setq recenter-positions '(top bottom))

#+end_src

*** Indentation

#+begin_src emacs-lisp :tangle yes

;; set default tab width globally
(setq-default tab-width 4)

;; use spaces for indentation by default
(setq-default indent-tabs-mode nil)

;; make tabs appear visible as a “|” (pipe) character
(global-whitespace-mode)                                ; make all whitespace visible
(setq whitespace-style '(face tabs tab-mark trailing))  ; only show tabs and trailing whitespace
(custom-set-faces
 '(whitespace-tab         ((t (:foreground "#636363"))))   ; set tab character color
 '(whitespace-trailing    ((t (:underline (:style wave :color "yellow2")))))
 )

;; set tab character.
;; 8614 is the unicode number of a double right arrow
;; 124 is the unicode number of a pipe
(setq whitespace-display-mappings
      '((tab-mark 9 [124 9] [92 9])))

(setq backward-delete-char-untabify-method 'untabify)

;; functions to call from the M-x menu
(defun my/switch-indentation-use-spaces ()
  "Use spaces for indentation."
  (interactive)
  (setq indent-tabs-mode nil))

(defun my/switch-indentation-use-tabs ()
  "Use tabs for indentation."
  (interactive)
  ;; (local-set-key (kbd "TAB") 'tab-to-tab-stop)
  (setq indent-tabs-mode t))

(defun my/switch-indentation-width ()
  "Change indentation tab width."
  (interactive)
  ;; (local-set-key (kbd "TAB") 'tab-to-tab-stop)
  (setq-default tab-width
        (string-to-number
         (completing-read "Chose tab width: " '("2" "4" "8")))))

#+end_src

*** Tabs

#+begin_src emacs-lisp :tangle yes

;; disable "close" (x) button for each tab
(setq tab-line-close-button-show nil)

;; disable "new tab" (+) button at the right end of the tab-line
(setq tab-line-new-button-show nil)

;; redefine function for tab names
(defun my/tab-line-tab-name-buffer (buffer &optional _buffers)
  "Define format of tab names."
  (format "  %s  " (buffer-name buffer)))
(setq tab-line-tab-name-function #'my/tab-line-tab-name-buffer)

#+end_src

*** Scrolling

#+begin_src emacs-lisp :tangle yes

;; try to improve scrolling in emacs. still not ideal though
(setq scroll-conservatively              99       ;; this value shoul not be higher than 100, or else swiper has issues (text behind modeline)
      mouse-wheel-scroll-amount          '(1 ((shift) . 1) ((control) . nil))
      scroll-margin                      3
      scroll-preserve-screen-position    't)

;;(pixel-scroll-mode)   ; this makes it a bit laggy

#+end_src

*** Fringe and line numbers

#+begin_src emacs-lisp :tangle yes

;; only show an indicator on the right fringe and not the left fringe
(setq-default visual-line-fringe-indicators '(nil right-curly-arrow))

;; make numbers column width a little bigger so it never changes size and moves the buffer. (refering to line numbers)
;; with a value of 3 digits, the buffer only moves when the line number is 1000 or hifher
(setq-default display-line-numbers-width 4)

;; dont show line numbers for pdf files
(add-hook 'doc-view-mode-hook (lambda () (display-line-numbers-mode -1)))
(add-hook 'pdf-view-mode-hook (lambda () (display-line-numbers-mode -1)))

;; set size in pixels of left and right fringes (default is 8)
(fringe-mode '(4 . 8))

#+end_src

*** Backup, Autosave and Lockfiles

#+begin_src emacs-lisp :tangle yes

(setq auto-save-file-name-transforms    `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))    ;; change auto-save location
      auto-save-default                 t           ;; put auto-save files in designated folder
      backup-inhibited                  t           ;; disable file backup
      create-lockfiles                  nil)        ;; stop emacs from creating temoporary symbolic link file named “#something”

#+end_src

*** Desktop session

#+begin_src emacs-lisp :tangle yes

(setq desktop-save               t             ;; always save on exit and never ask before saving
      desktop-restore-eager      nil           ;; number of buffers to restore immediatly
      desktop-dirname            (no-littering-expand-var-file-name "desktop/")
      desktop-base-file-name     "emacs.desktop"
      desktop-save-mode          0)

#+end_src

*** Directory local variables

It is possible to create directory-local settings without using a .dir-locals.el file or modifying the original file.
I prefer this approach because it is centralized and has less clutter.

This can be used to assign values to certain variables only to certain directories.
It is also possible set functions to evaluate at startup, for those directories.

For more information about syntax, check the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html][documentation]].

#+begin_src emacs-lisp :tangle yes

;; Here, we make the config file show 2 heading levels at startup, to make navigation easier.
(dir-locals-set-class-variables 'dirlocal_emacs_config
    '((org-mode . ((eval org-content 3)))))

(dir-locals-set-class-variables 'dirlocal_org_files
    '((org-mode . ((eval org-content 2)))))

(dir-locals-set-directory-class
    "~/.emacs.d/" 'dirlocal_emacs_config)

(dir-locals-set-directory-class
    "~/Cloud/Work - Google Cloud/Org/" 'dirlocal_org_files)

#+end_src

*** Searching
**** Package: isearch

#+begin_src emacs-lisp :tangle yes

(use-package isearch
  :straight nil
  :custom
  (search-whitespace-regexp ".*?")
  (isearch-lax-whitespace t)
  (isearch-regexp-lax-whitespace nil)
  :bind
  (:map isearch-mode-map
        ("j" . isearch-repeat-backward)
        ("k" . isearch-repeat-forward)))

#+end_src

** Additional Features

Add more features by installing emacs packages.

*** Icon integration
**** Package: all-the-icons

Allow Emacs to use icons in various UI elements.

Important: The first time this package is installed, you need to run 'all-the-icons-install-fonts' to install fonts.

#+begin_src emacs-lisp :tangle yes

(use-package all-the-icons
  :config
  (setq all-the-icons-color-icons t))

#+end_src

*** Project Management
**** Package: projectile

#+begin_src emacs-lisp :tangle yes

(use-package projectile
  :config
  (setq projectile-completion-system 'ivy)
  ;; (setq projectile-indexing-method 'hybrid)
  (projectile-mode 1)
  :pretty-hydra
  ((:title "Project" :color teal :quit-key "q")
   ("Find file"
    (("f" counsel-projectile-find-file "find file")
     ("F" counsel-fzf "find file (without gitignore)")
     ("r" projectile-recentf "recent file"))
    "Switch Buffer"
    (("b" projectile-switch-to-buffer "switch to buffer (in project)"))
    "Manage Projects"
    (("p" counsel-projectile-switch-project "switch to project")
     ("a" projectile-add-known-project "add a new project")
     ("d" projectile-remove-known-project "remove known project"))
    )))

#+end_src

**** Basic usage

To use a non-repository folder as a project, create a blank '.projectile' file in the folder to mark the project root.
See [[https://docs.projectile.mx/projectile/projects.html#ignoring-file]] for what to write in this file.

Quick version of what to write in .projectile:
'-' to ignore
'+' to keep and ignore everything else
'!' to override .gitignore

*** Workspaces
**** Information

Also called Layouts, Perspectives, Sessions.

What I want for this feature is to be able to save and load lists of files using workspaces.
Workspaces should be able to be composed of multiple items. Each item can be a project, normal folder or normal file.
I use the name 'workspaces' in this section, but it's interchangeable with other names for this type of thing in emacs.

Restoring the window sizes, positions and layouts is not so important for me.

Specific features I want:

  - when in a workspace, show list of open buffers, restricted to that workspace
  - cycle between all the buffers in the current workspace
  - save, load and switch workspaces
  - when switching workspaces, automatically prompt for file to open or go to last visited file
  - save or load a single workspace. each workspace has it's own file or section. it shouldn't be all or nothing
  - give workspaces a custom name
  - integration with dashboard package (needs a way of getting list of existing workspaces)
  - show current workspace in the modeline


Another idea I've had is the following:
  - whenever you enter a projectile project, the sidebar and tab-bar automatically show information from only that project.
  - for everthing else, the sidebar shows the current file's parent directory and the tab-bar shows all the non-project files.


Currently using: bufler with optional bufler-tabs-mode

**** Package: persp-mode

#+begin_src emacs-lisp :tangle no

(use-package persp-mode
  :config
  (setq persp-auto-resume-time                         -1
        persp-auto-save-opt                            0
        persp-auto-save-num-of-backups                 0
        persp-set-last-persp-for-new-frames            nil
        persp-reset-windows-on-nil-window-conf         t
        persp-autokill-buffer-on-remove                t
        persp-add-buffer-on-after-change-major-mode    t
        persp-kill-foreign-buffer-behaviour            'kill)
  (persp-mode 1))


(persp-load-state-from-file (expand-file-name "var/persp-mode/persp-auto-save" user-emacs-directory))

#+end_src


#+begin_src emacs-lisp :tangle no

(use-package perspective
  :config
  (persp-mode))

(persp-turn-off-modestring)

(setq persp-state-default-file (expand-file-name "var/persp-mode/persp-auto-save" user-emacs-directory))
;; (add-hook 'after-init-hook (persp-state-load persp-state-default-file))

(bind-key "C-b" 'projectile-switch-to-buffer wakib-keys-overriding-map)

(add-to-list 'persp-filter-save-buffers-functions
             (lambda (b) (string-prefix-p "todo" (buffer-name b))))

#+end_src

**** Package: bufler

When dealing with the =org-directory= variable, it is important to pay attention to the order in which the org package is loaded.

#+begin_src emacs-lisp :tangle yes

(use-package bufler
  :init
  ;; always switch workspace when switching buffers with bufler
  (setq bufler-workspace-switch-buffer-sets-workspace nil)

  ;; redefine lighter function
  (defun my/bufler-workspace-mode-lighter ()
    "Return lighter string for mode line."
    (frame-parameter nil 'bufler-workspace-path-formatted))

  :config
  (bufler-tabs-mode 1)
  (tab-bar-mode 0)
  (setq bufler-reverse t)

  ;; try to filter/ignore special buffers

  ;; (defun my/bufler-filter-special-buffers (buffer)
  ;;   "Return non-nil if BUFFER is special.
  ;;   That is, if its name starts with \"*\"."
  ;;   (string-match-p (rx bos (1+ "*") (one-or-more anything) (1+ "*") eos) (buffer-name buffer)))

  ;; (defun my/bufler-filter-special-buffers (buffer)
  ;;   "Return non-nil if BUFFER is special.
  ;;   That is, if its bufler workspace name starts with \"*\"."
  ;;   (let* ((selected-buffer    (get-buffer (buffer-name)))
  ;;          (selected-workspace (bufler-format-path (bufler-buffer-workspace-path selected-buffer))))
  ;;     (string-match-p (rx bos (1+ "*") (one-or-more anything) (1+ "*") eos) selected-workspace)
  ;;     ))

  ;; (setq bufler-filter-fns (list #'bufler-hidden-buffer-p #'my/bufler-filter-special-buffers))

  (defun my/bufler-workspace-set-from-buffer-name (buffer-name)
    "Focus workspace of buffer BUFFER-NAME."
    (let ((selected-buffer (get-buffer buffer-name)))
      (bufler-workspace-frame-set
       (butlast (bufler-group-tree-leaf-path (bufler-buffers) selected-buffer)))))

  (defun my/bufler-switch-buffer-C-u ()
    "Use `bufler-switch-buffer', but as if C-u was pressed before it."
    (interactive)
    (let ((current-prefix-arg 4)) ;; emulate C-u
      (call-interactively 'bufler-switch-buffer)))

  (setf bufler-groups
        (bufler-defgroups
          (group
           ;; Subgroup collecting all named workspaces.
           (auto-workspace))
          (group
           ;; Subgroup collecting all `help-mode' and `info-mode' buffers.
           (group-or "*Help/Info*"
                     (mode-match "*Help*" (rx bos "help-"))
                     (mode-match "*Info*" (rx bos "info-"))))
          (group
           ;; Subgroup collecting all special buffers (i.e. ones that are not
           ;; file-backed), except `magit-status-mode' buffers (which are allowed to fall
           ;; through to other groups, so they end up grouped with their project buffers).
           (group-and "*Special*"
                      (lambda (buffer)
                        (unless (or (funcall (mode-match "Scratch" (rx bos "lisp-interaction"))
                                             buffer)
                                    (funcall (name-match "Untitled" (rx bos "untitled"))
                                             buffer)
                                    (funcall (auto-file) buffer))
                          "*Special*")))
           (group
            ;; Subgroup collecting these "special special" buffers
            ;; separately for convenience.
            (name-match "**Special**"
                        (rx bos "*" (or "Messages" "Warnings" "Backtrace") "*")))
           (group
            ;; Subgroup collecting all other Magit buffers, grouped by directory.
            (mode-match "*Magit* (non-status)" (rx bos (or "magit" "forge") "-"))
            (auto-directory))

           ;; Subgroup for Helm buffers.
           (mode-match "*Helm*" (rx bos "helm-"))
           ;; Remaining special buffers are grouped automatically by mode.
           (auto-mode))

          (group
           (group-or "Agenda and Notes"
                     ;; Subgroup collecting buffers in `org-directory' (or "~/Org" if
                     ;; `org-directory' is not yet defined).
                     (dir (if (bound-and-true-p org-directory)
                              org-directory
                            "~/Cloud/Work - Google Cloud/Org/")))
           (auto-directory))

          (group
           (group-or "All Files"
                     (filename-match "Files" (rx bol (zero-or-more anything)))
                     ;; (mode-match "Dashboard" (rx bos "dashboard"))
                     (mode-match "Scratch" (rx bos "lisp-interaction"))
                     (name-match "Untitled" (rx bos "untitled")))
           (group
            ;; Subgroup collecting buffers in a projectile project.
            (auto-projectile))
           ;; (auto-directory)
           )
          ))

  :bind (:map wakib-keys-overriding-map
              ("C-b" . bufler-switch-buffer)
              ("C-<prior>" . tab-line-switch-to-prev-tab)
              ("C-<next>" . tab-line-switch-to-next-tab))

  :hook (;; focus current buffer workspace everytime a file is opened
         ;; (find-file . (lambda () (call-interactively #'bufler-workspace-focus-buffer)))
         (bufler-list-mode . my/set-buffer-large-fringe)
         ;; focus the workspace of the "scratch" buffer at startup, which is the "All Files" workspace
         (dashboard-mode . (lambda() (my/bufler-workspace-set-from-buffer-name "*scratch*")))
         ))

#+end_src

**** Basic usage

*Keybindings*

Default keymap

| Keybind     | Action                                                                 |
|-------------+------------------------------------------------------------------------|
| C-b         | switch to buffer in current workspace                                  |
| C-u C-b     | switch to buffer in any workspace                                      |
| C-u C-u C-b | switch to buffer in any workspace (and also set the frame's workspace) |
| <hydra> b b | show bufler workspace list                                             |

Inside bufler workspace list

| Keybind | Action                   |
|---------+--------------------------|
| ?       | show available keybinds  |
| f       | focus selected workspace |
| q       | close bufler window      |

**** History

Packages I looked at:

- treemacs workspaces:
  + a workspace can only have projects or folders (but it's possible to use bookmarks for files)
  + Can not list all buffers in current workspace
  + can use projectile and bookmarks to cover some functionality

- eyebrowse:
  + does not save files, only layouts
  + works like i3 workspaces
  + the way it works is that you assign a workspace to a certain purpose and only open certain projects in there

- bufler (bufler-workspace-mode):
  + bufler-list is good for managing buffers. works like magit
  + the tab-bar integration is nice
  + does not save files
  + I tried to use desktop-save-mode for saving stuff, but wasnt very happy with it
  + bufler-workspace-mode allows to automatically switch workspaces when switching buffers
  + can use bookmarks to cover some functionality

- projectile + bookmarks:
  + needs a special file in a project directory to give it a custom name
  + it's not ideal for normal non-repo folders

- perspective and persp-mode (shared):
  + doesn't really have a concept of projects, only buffers
  + saves and loads all perspectives at once. on file load, all buffers from all saved perspectives are opened
  + persp-mode is more popular and supported, while perspective is simpler and nicer to configure

- perspective:
  + the list of buffers in current perspective works better than persp-mode

- persp-mode:
  + it's a pain to setup and the documentation is pretty lacking (these are related)
  + cant make it load save file at startup without resuming session
  + the list of buffers in current perspective shows a bunch or useless buffers

*** File Explorer
**** Information

Since I am using Treemacs workspaces I will explain my view on projects and workspaces.
Here is my ideal usage of workspaces/projects:

  - each project has a name that can be easily configured
  - a list of projects appears in the dashboard (with their custom names)
  - you can search all files in a project
  - the project name appears in the modeline
  - all of the previous items should also work with a standard folder (even if it's not a repository)

That last item is very important. It's the reason why I projectile by itself isn't enough.

This is a desired but not required feature:
  - no files are saved on project directory, or as few as possible. everthing should be saved in the '.emacs.d' folder

Taking this into account, projectile is a good start but it doesnt give me everything I want, so I'm also using Treemacs workspaces.

**** Package: treemacs

#+begin_src emacs-lisp :tangle yes

(use-package treemacs
  :config
  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)



  ;; (defun treemacs--follow-after-eyebrowse-switch ()
  ;;   (when treemacs-follow-mode
  ;;     (--when-let (treemacs-get-local-window)
  ;;       (with-selected-window it
  ;;         (treemacs--follow-after-buffer-list-update)
  ;;         (hl-line-highlight)))))

  ;; (add-hook 'bufler-workspace-set-hook #'treemacs--follow-after-eyebrowse-switch)



  ;; (add-hook 'bufler-list-mode-hook 'treemacs-display-current-project-exclusively)


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; (add-hook 'treemacs-select-hook 'treemacs-add-and-display-current-project)     ;;
  ;; (add-hook 'treemacs-select-hook 'treemacs-display-current-project-exclusively) ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



  ;; (defun my/change-cursor (&rest args)
  ;;   "Change cursor according to evil states in CUI."
  ;;   (unless (display-graphic-p)
  ;;     (call-interactively 'treemacs-display-current-project-exclusively)
  ;;     ))

  ;; (add-hook 'window-selection-change-functions 'my/change-cursor)
  ;; (add-hook 'window-buffer-change-functions 'my/change-cursor)
  ;; (add-hook 'window-state-change-hook 'my/change-cursor)
  ;; (add-hook 'buffer-list-update-hook 'my/change-cursor)




  ;; (defun change-cursor (&rest args)
  ;;   "Change cursor according to evil states in CUI."
  ;;   (unless (display-graphic-p)
  ;;     (send-string-to-terminal ;;           bar        block
  ;;      (if evil-insert-state-minor-mode "\033[6 q" "\033[2 q"))))

  ;; (dolist (hook '(window-selection-change-functions evil-insert-state-entry-hook evil-normal-state-entry-hook))
  ;;   (add-hook hook 'change-cursor))


  :hook (treemacs-mode . (lambda() (display-line-numbers-mode -1)))  ;; dont show line numbers in the sidebar
  :bind (:map treemacs-mode-map
              ("<mouse-1>" . treemacs-single-click-expand-action))  ;; single mouse click to open files and folders
  )


;; (defun my-treemacs-switch-workspace (ws)
;;   (setf (treemacs-current-workspace) (treemacs--select-workspace-by-name ws))
;;   (treemacs--invalidate-buffer-project-cache)
;;   (treemacs--rerender-after-workspace-change)
;;   (treemacs-select-window)
;;   (run-hooks 'treemacs-switch-workspace-hook)
;;   )

;; (defun dashboard-insert-treemacs-workspaces (list-size)
;;   (treemacs--maybe-load-workspaces)
;;   (dashboard-insert-section
;;    "Workspaces:"
;;    (dashboard-subseq (mapcar 'treemacs-workspace->name (treemacs-workspaces)) 0 list-size)
;;    list-size
;;    "w"
;;    `(lambda (&rest ignore) (my-treemacs-switch-workspace ,el))
;;    el)

#+end_src

**** Package: treemacs-projectile

#+begin_src emacs-lisp :tangle yes

(use-package treemacs-projectile
  :after treemacs projectile)

#+end_src

**** Package: treemacs-magit

#+begin_src emacs-lisp :tangle yes

(use-package treemacs-magit
  :after treemacs magit)

#+end_src

*** Dashboard
**** Package: hide-mode-line

#+begin_src emacs-lisp :tangle yes

;; hide the modeline in the dashboard buffer
(use-package hide-mode-line)

#+end_src

**** Package: page-break-lines

#+begin_src emacs-lisp :tangle yes

(use-package page-break-lines
  :config
  ;; some fonts make the line break too long or too short.
  ;; so we just use something that is common and we know that works
  (custom-set-faces
   '(page-break-lines ((t (:family "Noto Sans Mono")))))

  (global-page-break-lines-mode 1))

#+end_src

**** Package: dashboard

#+begin_src emacs-lisp :tangle yes

(use-package dashboard
  :defer nil
  :after hide-mode-line page-break-lines
  :config
  (dashboard-setup-startup-hook)

  (defun dashboard-insert-persp-mode (list-size)
    (dashboard-insert-section
     "Perspectives:"
     bufler-workspace-name
     list-size
     "p"
     `(lambda (&rest ignore) (persp-switch ,el))
     el))

  (defun my/open-dashboard ()
    (interactive)
    (switch-to-buffer (get-buffer "*dashboard*")))

  (add-to-list 'dashboard-item-generators '(perspectives . dashboard-insert-persp-mode))

  ;;  (add-to-list 'dashboard-heading-icons '(treemacs-workspaces . "book"))
  ;;  (dashboard-modify-heading-icons '((treemacs-workspaces . "book")))

  (setq dashboard-items                '((projects  . 5)
                                         (bookmarks . 5)
                                         (recents   . 5)
                                         (agenda    . 5))
        dashboard-center-content       t
        dashboard-set-heading-icons    t
        dashboard-set-init-info        t
        dashboard-set-footer           nil
        dashboard-set-navigator        t
        dashboard-startup-banner       (expand-file-name "config-resources/Emacs-logo.svg" user-emacs-directory)
        dashboard-banner-logo-title    (format "GNU Emacs version %d.%d" emacs-major-version emacs-minor-version)
        dashboard-init-info            (format "%d packages loaded with straight. finished in %s"
                                               (length (hash-table-keys straight--success-cache)) (emacs-init-time))
        dashboard-navigator-buttons    `(((,(all-the-icons-octicon "dashboard" :height 1.1 :v-adjust 0.0)
                                           "Config file"
                                           "Open private configuration file"
                                           (lambda (&rest _) (find-file "~/.emacs.d/config.org")))
                                          (,(all-the-icons-octicon "gear" :height 1.1 :v-adjust 0.0)
                                           "Restore session"
                                           "Restore last saved session"
                                           (lambda (&rest _) (my/desktop-enable)))
                                          )))

  :hook ((dashboard-mode . (lambda () (tab-line-mode -1)))
         (dashboard-mode . hide-mode-line-mode)
         (dashboard-mode . my/set-buffer-dashboard-fringe)))

#+end_src

*** Modeline
**** Package: doom-modeline

#+begin_src emacs-lisp :tangle yes

(use-package doom-modeline
  :init
  (setq doom-modeline-height                      24
        doom-modeline-major-mode-icon             nil
        doom-modeline-major-mode-color-icon       nil
        doom-modeline-indent-info                 t
        doom-modeline-buffer-state-icon           t
        doom-modeline-buffer-modification-icon    t
        doom-modeline-buffer-file-name-style      'truncate-upto-project)

  :config
  ;; ------ Segment - Bufler ------
  (doom-modeline-def-segment my/bufler-workspace
    "Display current bufler workspace name"
    (if (and (boundp 'bufler-workspace-tabs-mode) bufler-workspace-tabs-mode)
        (let ((active (doom-modeline--active)))
          (when-let (text
                     (propertize (format " %s"
                                         (replace-regexp-in-string ".*» " ""
                                                                   (replace-regexp-in-string "Projectile:" "" (my/bufler-workspace-mode-lighter))))
                                 'face '(:foreground "gray60")))
            (if active
                text
              (propertize text 'face 'mode-line-inactive))))
      ""))


  ;; ------ Segment - Buffer Position ------
  ;; Provides information to the buffer position segment
  (setq-default mode-line-position
                '((mode-line-percent-position (" " mode-line-percent-position))
                  (line-number-mode
                   (column-number-mode
                    (column-number-indicator-zero-based " %06l L,%03c C" " %l:%C")
                    " %l")
                   (column-number-mode (column-number-indicator-zero-based " :%c" " :%C")))
                  (:eval (when (or line-number-mode mode-line-percent-position column-number-mode) " "))))

  (doom-modeline-def-segment my/buffer-position
    '("" mode-line-position))


  ;; ------ Segment - VCS ------
  (doom-modeline-def-segment my/vcs
    "Displays the current branch, colored based on its state."
    (let ((active (doom-modeline--active)))
      (when-let ((icon doom-modeline--vcs-icon)
                 (text doom-modeline--vcs-text))
        (concat
         (doom-modeline-spc)
         (doom-modeline-spc)
         (propertize
          (concat
           (if active
               icon
             (doom-modeline-propertize-icon icon 'mode-line-inactive))
           (doom-modeline-vspc))
          'mouse-face 'mode-line-highlight
          'help-echo (get-text-property 1 'help-echo vc-mode)
          'local-map (get-text-property 1 'local-map vc-mode))
         (if active
             text
           (propertize text 'face 'mode-line-inactive))))))


  ;; ------ Segment - Buffer Name ------
  ;; when the buffer is modified only show icon with 'modified' font, not the file name
  (defsubst doom-modeline--buffer-name-custom ()
    "The current buffer name."
    ;; Only display the buffer name if the window is small, but doesn't need to
    ;; respect file-name style.
    (if (and (not (eq doom-modeline-buffer-file-name-style 'file-name))
             doom-modeline--limited-width-p)
        (propertize "%b"
                    'face (cond ((doom-modeline--active) 'doom-modeline-buffer-file)
                                (t 'mode-line-inactive))
                    'mouse-face 'mode-line-highlight
                    'help-echo "Buffer name
mouse-1: Previous buffer\nmouse-3: Next buffer"
                    'local-map mode-line-buffer-identification-keymap)
      (when-let ((name (or doom-modeline--buffer-file-name
                           (doom-modeline-update-buffer-file-name))))
        (if (doom-modeline--active)
            name
          (propertize name 'face 'mode-line-inactive)))))

  (doom-modeline-def-segment buffer-info
    "Combined information about the current buffer, including the current working
directory, the file name, and its state (modified, read-only or non-existent)."
    (concat
     (doom-modeline-spc)
     (doom-modeline--buffer-state-icon)
     (doom-modeline--buffer-mode-icon)
     (doom-modeline--buffer-name-custom)))


  ;; ------ Segment - Buffer encoding and line endings ------
  ;; this is modified to add or remove spaces, to make it look nicer
  (doom-modeline-def-segment my/buffer-encoding
    "Displays the eol and the encoding style of the buffer the same way Atom does."
    (when doom-modeline-buffer-encoding
      (let ((face (if (doom-modeline--active) 'mode-line 'mode-line-inactive))
            (mouse-face 'mode-line-highlight))
        (concat
         (doom-modeline-spc)
         ;; eol type
         (let ((eol (coding-system-eol-type buffer-file-coding-system)))
           (propertize
            (pcase eol
              (0 "LF  ")
              (1 "CRLF  ")
              (2 "CR  ")
              (_ ""))
            'face face
            'mouse-face mouse-face
            'help-echo (format "End-of-line style: %s\nmouse-1: Cycle"
                               (pcase eol
                                 (0 "Unix-style LF")
                                 (1 "DOS-style CRLF")
                                 (2 "Mac-style CR")
                                 (_ "Undecided")))
            'local-map (let ((map (make-sparse-keymap)))
                         (define-key map [mode-line mouse-1] 'mode-line-change-eol)
                         map)))
         ;; coding system
         (propertize
          (let ((sys (coding-system-plist buffer-file-coding-system)))
            (cond ((memq (plist-get sys :category)
                         '(coding-category-undecided coding-category-utf-8))
                   "UTF-8 ")
                  (t (upcase (symbol-name (plist-get sys :name))))))
          'face face
          'mouse-face mouse-face
          'help-echo 'mode-line-mule-info-help-echo
          'local-map mode-line-coding-system-map)
         ))))


  ;; ------ Segment - Selection ------
  ;; this is modified to not appear when the number of selected characters is equal to 0
  (doom-modeline-def-segment selection-info
    "Information about the current selection, such as how many characters and
lines are selected, or the NxM dimensions of a block selection."
    (when (and (or mark-active (and (bound-and-true-p evil-local-mode)
                                    (eq evil-state 'visual)))
               (doom-modeline--active))
      (cl-destructuring-bind (beg . end)
          (if (and (bound-and-true-p evil-local-mode) (eq evil-state 'visual))
              (cons evil-visual-beginning evil-visual-end)
            (cons (region-beginning) (region-end)))


        (when (not (= (- end beg) 0))


          (propertize
           (let ((lines (count-lines beg (min end (point-max)))))
             (concat (doom-modeline-spc)
                     (cond ((or (bound-and-true-p rectangle-mark-mode)
                                (and (bound-and-true-p evil-visual-selection)
                                     (eq 'block evil-visual-selection)))
                            (let ((cols (abs (- (doom-modeline-column end)
                                                (doom-modeline-column beg)))))
                              (format "%dx%dB" lines cols)))
                           ((and (bound-and-true-p evil-visual-selection)
                                 (eq evil-visual-selection 'line))
                            (format "%dL" lines))
                           ((> lines 1)
                            (format "%dC %dL" (- end beg) lines))
                           ((format "%dC" (- end beg))))
                     (when doom-modeline-enable-word-count
                       (format " %dW" (count-words beg end)))
                     (doom-modeline-spc)))
           'face 'doom-modeline-highlight)))))


  ;; ------ Segment - Spellcheck ------
  (doom-modeline-def-segment my/spellcheck
    "Display current dictionary language"
    (if flyspell-mode
        (let ((active (doom-modeline--active)))
          (when-let (text
                     (propertize (format " %s " ispell-current-dictionary)
                                 'face '(:foreground "gray60")))
            (if active
                text
              (propertize text 'face 'mode-line-inactive))))
      ""))


  ;; ------ Modeline Segments ------
  (doom-modeline-def-modeline 'my/main
    '(" " my/bufler-workspace my/vcs bar window-number matches buffer-info remote-host parrot " " selection-info)
    '(objed-state grip irc mu4e gnus github debug repl lsp minor-modes my/spellcheck process checker input-method indent-info my/buffer-encoding major-mode my/buffer-position " "))


  ;; ------ Setup Modeline ------
  (defun setup-initial-doom-modeline ()
    (interactive)
    (doom-modeline-set-modeline 'my/main 'default))

  :hook ((after-init . doom-modeline-mode)
         (doom-modeline-mode . setup-initial-doom-modeline)))

#+end_src

The default doom modeline, for reference:

#+begin_example

(doom-modeline-def-modeline 'main
  '(bar workspace-name window-number modals matches buffer-info remote-host buffer-position word-count parrot selection-info)
  '(objed-state misc-info persp-name battery grip irc mu4e gnus github debug repl lsp minor-modes input-method indent-info buffer-encoding major-mode process vcs checker))

#+end_example

**** Package: spaceline

#+begin_src emacs-lisp :tangle no

(use-package spaceline)

;(spaceline-toggle-minor-modes-off)
;(spaceline-toggle-buffer-modified-on)
;(spaceline-toggle-buffer-id-on)
;(spaceline-toggle-version-control-on)
;(spaceline-toggle-selection-info-on)
;(spaceline-toggle-input-method-on)
;(spaceline-toggle-buffer-encoding-abbrev-on)
;(spaceline-toggle-buffer-encoding-on)
;(spaceline-toggle-line-column-on)
;(spaceline-toggle-buffer-position-on)
;(spaceline-toggle-hud-off)

(spaceline-compile
  ; left side
  '(((persp-name)
     :fallback evil-state
     :face highlight-face
     :priority 100)
    (anzu :priority 95)
    auto-compile
    ((buffer-modified buffer-id remote-host)
     :priority 98)
    (major-mode :priority 79)
    (process :when active)
    ((flycheck-error flycheck-warning flycheck-info)
     :when active
     :priority 89)
    (erc-track :when active)
    (version-control :when active
                     :priority 78)
    )
  ; right side
  '(which-function
    (python-pyvenv :fallback python-pyenv)
    (purpose :priority 94)
    (selection-info :priority 95)
    input-method
    ((buffer-encoding-abbrev
      point-position
      line-column)
     :separator " | "
     :priority 96)
    (global :when active)
    (buffer-position :priority 99)
    (hud :priority 99)))

;;(spaceline-emacs-theme)

#+end_src

**** Package: telephone-line

#+begin_src emacs-lisp :tangle no

(use-package telephone-line)

(telephone-line-defsegment* telephone-line-my-buffer-modified-segment ()
"Circle thatchanges color based on buffer modification status"
    (if (buffer-modified-p)
        (propertize (telephone-line-raw " ") 'face '(:foreground "dark orange" :weight bold))
      (telephone-line-raw " ")))

(telephone-line-defsegment* telephone-line-my-bufler-workspaces ()
"Display current bufler workspace name"
  (if (and (boundp 'bufler-workspace-tabs-mode) bufler-workspace-tabs-mode)
      (propertize (format " %s" (replace-regexp-in-string "Projectile:" "" (my/bufler-workspace-mode-lighter)))
                  'face '(:foreground "dark orange" :weight bold))
    "a"))


  (telephone-line-defsegment my-coding-segment ()
    (when (telephone-line-selected-window-active)
      (let* ((code (symbol-name buffer-file-coding-system))
             (eol-type (coding-system-eol-type buffer-file-coding-system))
             (eol (cond
                   ((eq 0 eol-type) "unix")
                   ((eq 1 eol-type) "dos")
                   ((eq 2 eol-type) "mac")
                   (t "-"))))
        (format  "%s " eol))))

(setq telephone-line-secondary-left-separator 'telephone-line-nil)

(defface my-red '((t (:foreground "white" :background "red3"))) "")
(defface my-cyan '((t (:foreground "dim grey" :background "cyan"))) "")

(setq telephone-line-faces
      '((evil . (my-red . my-red))
        (accent . (telephone-line-accent-active . telephone-line-accent-inactive))
        (nil . (mode-line . mode-line-inactive))))

(setq telephone-line-lhs
      '((evil   . (telephone-line-my-bufler-workspaces))
        (accent . (telephone-line-vc-segment
                   telephone-line-erc-modified-channels-segment
                   telephone-line-process-segment))
        (nil    . (telephone-line-my-buffer-modified-segment
                   telephone-line-file-name-absolute-path-segment))))
(setq telephone-line-rhs
      '((nil    . (telephone-line-atom-eol-segment
                   telephone-line-atom-encoding-segment))
        (accent . (telephone-line-major-mode-segment))
        (evil   . (telephone-line-airline-position-segment))))

(telephone-line-mode)

#+end_src

**** Package: mood-line

#+begin_src emacs-lisp :tangle no

(use-package mood-line)
(setq mood-line-show-encoding-information t)
(setq mood-line-show-eol-style t)
(mood-line-mode)

#+end_src

**** bufler segment example

This part is the bufler segment, without the doom-modeline specific stuff.
This can be used to define a segment for any modeline.

#+begin_src emacs-lisp :tangle no

(doom-modeline-def-segment my/bufler-workspace
  "Display current bufler workspace name"
  (if (and (boundp 'bufler-workspace-tabs-mode) bufler-workspace-tabs-mode)
      (propertize (format "  %s" (replace-regexp-in-string "Projectile:" "" (my/bufler-workspace-mode-lighter)))
                  'face '(:foreground "gray60" :weight bold))
    ""))

;; note: should use something like (all-the-icons-alltheicon "git") instead

#+end_src

*** Search Across Multiple Files
**** Information

My choice for what package to use is =rg=.

Other options are:
- deadgrep
- ripgrep
- ag

**** Package: rg

#+begin_src emacs-lisp :tangle yes

(use-package rg
  :bind
  (:map wakib-keys-overriding-map
        ("C-S-f" . rg-search-current-dir))  ;; replace 'occur' with rg
  :config
  (rg-define-search rg-search-current-dir
    "Search in the directory of the currently open file or buffer"
    :query ask
    :format literal
    :files "everything"
    :dir "current"
    :flags ("--hidden")))

#+end_src

*** Interactive Visual Replace
**** Package: pcre2el

provides a regex backend to be used by visual-regexp-steroids
this is to avoid having python installed as a dependency

#+begin_src emacs-lisp :tangle yes

(use-package pcre2el)

#+end_src

**** Package: visual-regexp (part 1)

#+begin_src emacs-lisp :tangle yes

;; you can use actual regex with this package, instead of emacs specific regex
;; this seems better than Anzu for my uses
(use-package visual-regexp-steroids
  :init
  ;; visual-regexp-steroids allows using python engine
  ;; (setq vr/engine 'pcre2el)

#+end_src

**** visual-regexp patch: search whole buffer

This is a change to allow searching the whole buffer.
Copied from a fork of the visual-regexp repository: https://github.com/grahnen/visual-regexp.el/commit/248f5716f8de092c1915d91821681aed7b31f808

#+begin_src emacs-lisp :tangle yes

(defvar vr--full-buffer 'nil)
(setq vr--full-buffer t)

(defun vr--set-target-buffer-start-end ()
  (if vr--full-buffer
      (setq vr--target-buffer-start (point-min)
            vr--target-buffer-end (point-max))
    (setq vr--target-buffer-start
          (if (region-active-p)
              (region-beginning)
            (point))
          vr--target-buffer-end
          (if (region-active-p)
              (region-end)
            (point-max)))))

#+end_src

**** visual-regexp patch: use region as input

This next part changes the package's base code to allow using active region as the input regex pattern.
The parts that were changed have comments that identify them.

#+begin_src emacs-lisp :tangle yes

:config
;; these are my own variables
(defvar my/visual-regexp-region-flag nil)
(defvar my/visual-regexp-region-val "default string")

;; use active region as replace regexp defeult input
(defun my/visual-replace-from-active-region (beginning end)
  "Normal `visual-replace', but use active region as input.
It assumes the region is active."
  (interactive "r")
  (setq my/visual-regexp-region-flag t)
  (setq my/visual-regexp-region-val (buffer-substring-no-properties (region-beginning) (region-end)))
  (goto-char beginning)
  (deactivate-mark)
  (call-interactively 'vr/query-replace))

;; wrapper function that checks if there is an active region or not
(defun my/visual-replace-with-active-region-support ()
  "Normal `visual-replace', but check if there's an active region first."
  (interactive)
  (when (eq major-mode 'org-mode)
    (outline-show-all))
  (if (region-active-p)
      (call-interactively 'my/visual-replace-from-active-region)
    (call-interactively 'vr/query-replace)))

;; this is the core function that was changed
(defun vr--set-regexp-string ()
  (save-excursion
    ;; deactivate mark so that we can see our faces instead of region-face.
    (deactivate-mark)
    (setq vr--in-minibuffer 'vr--minibuffer-regexp)
    (setq vr--last-minibuffer-contents "")
    (custom-reevaluate-setting 'vr/match-separator-string)
    (let* ((minibuffer-allow-text-properties t)
           (history-add-new-input nil)
           (text-property-default-nonsticky
            (cons '(separator . t) text-property-default-nonsticky))
           ;; seperator and query-replace-from-to-history copy/pasted from replace.el
           (separator
            (when vr/match-separator-string
              (propertize "\0"
                          'display vr/match-separator-string
                          'separator t)))
           (query-replace-from-to-history
            (append
             (when separator
               (mapcar (lambda (from-to)
                         (concat (query-replace-descr (car from-to))
                                 separator
                                 (query-replace-descr (cdr from-to))))
                       (symbol-value vr/query-replace-defaults-variable)))
             (symbol-value vr/query-replace-from-history-variable)))

           ;; Changes I made: the next two lines
           (my-var my/visual-regexp-region-flag))
      (setq my/visual-regexp-region-flag nil)

      (setq vr--regexp-string
            (read-from-minibuffer
             " " ;; prompt will be set in vr--minibuffer-setup

             ;; I also added these three lines
             (if my-var
                 my/visual-regexp-region-val
               nil)

             vr/minibuffer-keymap
             nil 'query-replace-from-to-history))
      (let ((split (vr--query-replace--split-string vr--regexp-string)))
        (if (not (consp split))
            (add-to-history vr/query-replace-from-history-variable vr--regexp-string nil t)
          (add-to-history vr/query-replace-from-history-variable (car split) nil t)
          (add-to-history vr/query-replace-to-history-variable (cdr split) nil t)
          (add-to-history vr/query-replace-defaults-variable split nil t))))))

#+end_src

**** Package: visual-regexp (part 2)

#+begin_src emacs-lisp :tangle yes

  :bind
  ;; (:map wakib-keys-overriding-map
  ;;       ("C-h" . my/visual-replace-with-active-region-support)))

  (("C-h" . my/visual-replace-with-active-region-support)))

;; using C-7 inside swiper seems better. it does the same thing
;; (bind-key "C-S-h" 'vr/mc-mark wakib-keys-overriding-map)

#+end_src


This is how the author of the package suggests implementing thing-at-point in a github issue:

(defvar vr-current-thing-at-point nil)
(defun vr-thing-at-point-minibuffer-setup ()
  (when (and vr-current-thing-at-point
             (equal vr--in-minibuffer 'vr--minibuffer-regexp))
    (insert vr-current-thing-at-point)))
(add-hook 'minibuffer-setup-hook 'vr-thing-at-point-minibuffer-setup)

(defun vr-thing-at-point ()
  (interactive)
  (let ((vr-current-thing-at-point (thing-at-point 'symbol t)))
    (call-interactively 'vr/query-replace)))

**** test: display matches in folded org headings

attempt to replicate anzu and swiper behaviour.
they open a heading when there's an entry in there and fold it back when moving to the next heading.
they final view is the same as before the command executed.

#+begin_src emacs-lisp :tangle no

(defun vr--perform-query-replace ()
  ;; This function is a heavily modified version of (perform-replace) from replace.el.
  ;; The original plan was to use the original perform-replace, but various issues stood in the way.
  (and minibuffer-auto-raise
       (raise-frame (window-frame (minibuffer-window))))
  (let* ((from-string (vr--get-regexp-string))
         (map vr--query-replace-map)
         (vr--query-replacements (nreverse (car (vr--get-replacements nil nil))))
         (next-replacement nil) ;; replacement string for current match
         (keep-going t)
         (replace-count 0)
         ;; a match can be replaced by a longer/shorter replacement. cumulate the difference
         (cumulative-offset 0)
         (recenter-last-op nil) ; Start cycling order with initial position.
         (message
          (concat
           (propertize "Replacing " 'read-only t)
           (propertize "%s" 'read-only t 'face 'font-lock-keyword-face)
           (propertize " with " 'read-only t)
           (propertize "%s" 'read-only t 'face 'font-lock-keyword-face)
           (propertize (substitute-command-keys
                        " (\\<vr--query-replace-map>\\[help] for help) ")
                       'read-only t))))

    ;; show visual feedback for all matches
    (mapc (lambda (replacement-info)
            (cl-multiple-value-bind (replacement match-data i) replacement-info
              (vr--feedback-match-callback i 0 (cl-first match-data) (cl-second match-data))))
          vr--query-replacements)

    (goto-char vr--target-buffer-start)
    (push-mark)
    (undo-boundary)
    (unwind-protect
        ;; Loop finding occurrences that perhaps should be replaced.
        (while (and keep-going vr--query-replacements)
          ;; Advance replacement list
          (cl-multiple-value-bind (replacement match-data i) (car vr--query-replacements)
            (setq match-data (vr--mapcar-nonnil (lambda (el) (+ cumulative-offset el)) match-data))
            (let ((begin (cl-first match-data))
                  (end (cl-second match-data))
                  (next-replacement-orig replacement))
              (setq next-replacement (vr--get-replacement replacement match-data replace-count))
              (goto-char begin)
              (setq vr--query-replacements (cdr vr--query-replacements))

              ;; default for new occurrence: no preview
              (setq vr--replace-preview nil)

              (undo-boundary)
              (let (done replaced key def)
                ;; Loop reading commands until one of them sets done,
                ;; which means it has finished handling this
                ;; occurrence.
                (while (not done)


                  (outline-show-subtree)
                  ;; (outline-previous-heading)
                  ;; (outline-show-entry)


                  ;; show replacement feedback for current occurrence
                  (unless replaced
                    (vr--do-replace-feedback-match-callback next-replacement-orig match-data i))
                  ;; Bind message-log-max so we don't fill up the message log
                  ;; with a bunch of identical messages.
                  (let ((message-log-max nil))
                    (message message from-string next-replacement))
                  (setq key (read-event))
                  (setq key (vector key))
                  (setq def (lookup-key map key))

                  ;; can use replace-match afterwards
                  (set-match-data match-data)

                  ;; Restore the match data while we process the command.
                  (cond ((eq def 'help)
                         (with-output-to-temp-buffer "*Help*"
                           (princ
                            (concat "Query replacing visual-regexp "
                                    from-string " with "
                                    next-replacement ".\n\n"
                                    (substitute-command-keys
                                     vr--query-replace-help)))
                           (with-current-buffer standard-output
                             (help-mode))))
                        ((eq def 'exit)
                         (setq keep-going nil
                               done t))
                        ((eq def 'act)
                         (unless replaced
                           (replace-match next-replacement t t)
                           (setq replace-count (1+ replace-count)))
                         (setq done t
                               replaced t))
                        ((eq def 'act-and-exit)
                         (unless replaced
                           (replace-match next-replacement t t)
                           (setq replace-count (1+ replace-count)))
                         (setq keep-going nil
                               done t
                               replaced t))
                        ((eq def 'act-and-show)
                         (unless replaced
                           (replace-match next-replacement t t)
                           (setq replace-count (1+ replace-count))
                           (setq replaced t)))
                        ((eq def 'toggle-preview)
                         (setq vr--replace-preview (not vr--replace-preview)))
                        ((eq def 'automatic)
                         (setq vr--target-buffer-start (match-beginning 0)
                               vr--target-buffer-end (+ cumulative-offset vr--target-buffer-end))
                         (setq replace-count (+ replace-count (vr--do-replace t)))
                         (setq done t
                               replaced t
                               keep-going nil))
                        ((eq def 'skip)
                         (setq done t))
                        ((eq def 'recenter)
                         ;; `this-command' has the value `query-replace',
                         ;; so we need to bind it to `recenter-top-bottom'
                         ;; to allow it to detect a sequence of `C-l'.
                         (let ((this-command 'recenter-top-bottom)
                               (last-command 'recenter-top-bottom))
                           (recenter-top-bottom)))
                        (t
                         (setq this-command 'mode-exited)
                         (setq keep-going nil)
                         (setq unread-command-events
                               (append (listify-key-sequence key)
                                       unread-command-events))
                         (setq done t)))
                  (when replaced
                    (setq cumulative-offset (+ cumulative-offset (- (length next-replacement) (- end begin)))))
                  (unless (eq def 'recenter)
                    ;; Reset recenter cycling order to initial position.
                    (setq recenter-last-op nil))
                  ;; in case of 'act-and-show: delete overlay display or it will still be
                  ;; visible even though the replacement has been made
                  (when replaced (vr--delete-overlay-display (vr--get-overlay i 0)))))

              ;; occurrence has been handled
              ;; delete feedback overlay
              (delete-overlay (vr--get-overlay i 0)))))

      ;; unwind
      (progn
        (vr--delete-overlay-displays)
        (vr--delete-overlays)
        ;; (replace-dehighlight)
        ))
    (unless unread-command-events
      ;; point is set to the end of the last occurrence.
      (goto-char (match-end 0))
      (message "Replaced %d occurrence%s"
               replace-count
               (if (= replace-count 1) "" "s")))))

#+end_src

*** Org mode
**** Package: async

The code below executes org-babel-tangle asynchronously when config.org is saved.

#+begin_src emacs-lisp :tangle yes

(use-package async
  :config
  (defvar *config-file* (expand-file-name "config.org" user-emacs-directory)
    "The configuration file.")

  (defvar *config-last-change* (nth 5 (file-attributes *config-file*))
    "Last modification time of the configuration file.")

  (defvar *show-async-tangle-results* nil
    "Keeps *emacs* async buffers around for later inspection.")

  (defun my/config-updated ()
    "Checks if the configuration file has been updated since the last time."
    (time-less-p *config-last-change*
                 (nth 5 (file-attributes *config-file*))))

  (defun my/config-tangle ()
    "Tangles the user configuration org file asynchronously."
    (when (my/config-updated)
      (setq *config-last-change*
            (nth 5 (file-attributes *config-file*)))
      (my/async-babel-tangle *config-file*)))

  (defun my/async-babel-tangle (org-file)
    "Tangles an org file asynchronously."
    (let ((init-tangle-start-time (current-time))
          (file (buffer-file-name))
          (async-quiet-switch "-q"))
      (async-start
       `(lambda ()
          (require 'org)
          (org-babel-tangle-file ,org-file))
       (unless *show-async-tangle-results*
         `(lambda (result)
            (if result
                (message "SUCCESS: %s successfully tangled (%.2fs)."
                         ,org-file
                         (float-time (time-subtract (current-time)
                                                    ',init-tangle-start-time)))
              (message "ERROR: %s as tangle failed." ,org-file)))))))
  )

#+end_src

**** Package: org

#+begin_src emacs-lisp :tangle yes

(use-package org
  :straight org-plus-contrib
  :demand t
  :config
  (setq org-startup-indented                 t             ;; indent text to heading level
        org-startup-folded                   'content      ;; set initial view to 'content' (show all headlines)
        org-indent-indentation-per-level     2
        org-descriptive-links                t             ;; highlight links
        org-agenda-dim-blocked-tasks         t             ;; dim blocked tasks
        org-agenda-skip-deadline-if-done     t             ;; avoid showing unecessary tasks
        org-agenda-skip-scheduled-if-done    t
        org-agenda-skip-archived-trees       t
        org-cycle-separator-lines            2             ;; set how may real newlines are necessary to display a newline when folded.
        org-todo-keywords                    '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")   ;; default todo keywords ✔ ✘
                                               (sequence "SOMEDAY(s)" "WAITING(w)" "PAUSED(p)" "REVIEW(r)" "|" "CANCELLED(c)"))
        org-directory                        "~/Cloud/Work - Google Cloud/Org/"    ;; where to look for org files
        org-agenda-files                     (quote ("~/Cloud/Work - Google Cloud/Org/agenda/private"
                                                     "~/Cloud/Work - Google Cloud/Org"
                                                     "~/Cloud/Work - Google Cloud/Org/agenda/work"
                                                     "~/Cloud/Work - Google Cloud/Org/agenda/work/IST/year 5/"))
        org-log-done                         (quote time)  ;; insert a note in a task when it is marked as done, which includes a timestamp
        org-support-shift-select             t             ;; allows using the shif key for selecting text
        org-fontify-done-headline            t             ;; grey out completed tasks
        org-src-preserve-indentation         t             ;; do not put two spaces on the left
        org-src-tab-acts-natively            t             ;; make tab behave as it would normally for that language
        org-ellipsis                         " ⤵"          ;; Changing the org-mode ellipsis
        ;; setq org-ellipsis                 " ▼"
        org-image-actual-width               nil           ;; if there is something like #+ATTR_ORG: width="200", resize to 200, otherwise don't resize
        ;; org-agenda-span                      30            ;; amount of days in the agenda
        org-agenda-start-on-weekday          nil           ;; start the agenda in the current day
        org-agenda-skip-deadline-prewarning-if-scheduled t
        org-agenda-prefix-format             '((agenda . " %i %-21:c%?-21t% s")    ;; make the first column in agenda wider (default is 12 characters)
                                               (todo . " %i %-21:c")
                                               (tags . " %i %-21:c")
                                               (search . " %i %-21:c")))

  ;; customize face for 'DONE' headings
  (custom-set-faces '(org-headline-done
                      ((((class color) (min-colors 16) (background dark))
                        (:foreground "dim gray")))))

  ;; allow C-S-<arrow> selection of text
  (eval-after-load "org"
    '(progn
       (define-key org-mode-map (kbd "<C-S-left>") nil)
       (define-key org-mode-map (kbd "<C-S-right>") nil)
       (define-key org-mode-map (kbd "<C-S-up>") nil)
       (define-key org-mode-map (kbd "<C-S-down>") nil)))

  :bind
  (:map org-mode-map
        ("C-d C-<left>" . outline-up-heading)
        ("C-d C-<up>" . outline-previous-visible-heading)
        ("C-d C-<down>" . outline-next-visible-heading))

  :hook ((after-save . my/config-tangle)
         (org-mode . (lambda ()
                       "Beautify Org Checkbox Symbol"
                       (push '("[ ]" .  "☐") prettify-symbols-alist)
                       (push '("[X]" . "☑" ) prettify-symbols-alist)
                       (push '("[-]" . "❍" ) prettify-symbols-alist)
                       ;; replace text of org blocks with symbols
                       ;; (push '("#+BEGIN_SRC" . "↦" ) prettify-symbols-alist)
                       ;; (push '("#+END_SRC" . "⇤" ) prettify-symbols-alist)
                       ;; (push '("#+BEGIN_EXAMPLE" . "↦" ) prettify-symbols-alist)
                       ;; (push '("#+END_EXAMPLE" . "⇤" ) prettify-symbols-alist)
                       ;; (push '("#+BEGIN_QUOTE" . "↦" ) prettify-symbols-alist)
                       ;; (push '("#+END_QUOTE" . "⇤" ) prettify-symbols-alist)
                       ;; (push '("#+begin_quote" . "↦" ) prettify-symbols-alist)
                       ;; (push '("#+end_quote" . "⇤" ) prettify-symbols-alist)
                       ;; (push '("#+begin_example" . "↦" ) prettify-symbols-alist)
                       ;; (push '("#+end_example" . "⇤" ) prettify-symbols-alist)
                       ;; (push '("#+begin_src" . "↦" ) prettify-symbols-alist)
                       ;; (push '("#+end_src" . "⇤" ) prettify-symbols-alist)
                       (prettify-symbols-mode)))))

#+end_src

**** Package: org-superstar

Org Bullets (not used anymore)

#+begin_src emacs-lisp :tangle no

(use-package org-bullets
    :hook (org-mode . org-bullets-mode))

#+end_src


#+begin_src emacs-lisp :tangle yes

(use-package org-superstar
  :after org
  :hook (org-mode . org-superstar-mode)

  :init
  (dolist (face '((org-level-1 . 1.15)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.0)
                  (org-level-6 . 1.0)
                  (org-level-7 . 1.0)
                  (org-level-8 . 1.0)))
    (set-face-attribute (car face) nil :weight 'regular :height (cdr face)))
  ;; :font "DejaVu Sans Mono"

  :custom
  (org-superstar-headline-bullets-list '("◈" "❖" "✽" "✲" "✜" "✛" "✝" "†"))
  (org-superstar-item-bullet-alist '((?* . ?►)
                                     (?+ . ?○)
                                     (?- . ?●)))

  ;; Go through the bullet list, then repeat the last entry indefinitely.
  (org-superstar-cycle-headline-bullets nil)

  ;; ;; superstar has a more agressive way of removing leading stars
  ;; (org-hide-leading-stars nil)
  ;; (org-superstar-remove-leading-stars t)

  )

#+end_src

Here are some symbols that can be used for Org headings:

"✙" "♱" "♰" "☥" "✞" "✟" "✝" "†" "✠" "✚" "✜" "✛" "✢" "✣" "✤" "✥"
"◉" "◈"
"●" "○" "■" "□" "▶" "▷" "►" "▻"
"◆" "◇" "◈" "◉" "◊" "○" "◌" "◎" "●"
"❖" "➕"
"✩" "✪" "✫" "✬" "✭" "✮" "✯" "✰" "✱" "✲" "✳" "✴" "✵" "✶" "✷" "✸" "✹" "✺" "✻" "✼" "✽" "✾" "✿" "❀" "❁" "❂" "❃" "❄" "❅" "❆" "❇" "❈" "❉" "❊" "❋"
"✙" "✚" "✛" "✜" "✝" "✞" "✟" "✠" "✡" "✢" "✣" "✤" "✥" "✦" "✧"

And here are some code samples from  the repo, showing some possibilities:

This time we want all of the above but a little more personalized. First off, let’s make bullets a little more chunky. Mind that the height we provide for bullet faces is not the actual height of a bullet, but its height relative to its surroundings. Additionally, let’s hide the leading stars for terminal sessions, as the default leader does not look all that good in my chosen terminal font. I make use of the fact that org-superstar-leading-fallback can be set to the space character. This has the nice advantage over org-hide-leading-stars that it does not just “paint over” the asterisks, but makes them completely indistinguishable from white space, neat!

#+begin_src emacs-lisp :tangle no

(with-eval-after-load 'org-superstar
  (set-face-attribute 'org-superstar-item nil :height 1.2)
  (set-face-attribute 'org-superstar-header-bullet nil :height 1.2)
  (set-face-attribute 'org-superstar-leading nil :height 1.3))
;; Set different bullets, with one getting a terminal fallback.
(setq org-superstar-headline-bullets-list
      '("◉" ("🞛" ?◈) "○" "▷"))
;; Stop cycling bullets to emphasize hierarchy of headlines.
(setq org-superstar-cycle-headline-bullets nil)
;; Hide away leading stars on terminal.
(setq org-superstar-leading-fallback ?\s)

#+end_src


Inline tasks behave as you would expect them to, for the most part. They have two bullets instead of one, but are otherwise treated the same as regular headlines by Org Superstar, meaning org-superstar-headline-bullets-list controls the bullet used as if it were a regular headline. If org-inlinetask-show-first-star is non-nil, you can customize the additional marker. Just like with the rest of Superstar’s decorations, you can more or less fully control how it looks, with independent settings for graphical and terminal displays and a dedicated face, should you find the default of using org-warn a little… unsubtle. We again use the LaTeX setup as a base and add a few tweaks.

#+begin_src emacs-lisp :tangle no

(require 'org-inlinetask)
(setq org-inlinetask-show-first-star t)
;; Less gray please.
(set-face-attribute 'org-inlinetask nil
                    :foreground nil
		      :inherit 'bold)
(with-eval-after-load 'org-superstar
  (set-face-attribute 'org-superstar-first nil
                      :foreground "#9000e1"))
;; Set different bullets, with one getting a terminal fallback.
(setq org-superstar-headline-bullets-list
      '("◉" ("🞛" ?◈) "○" "▷"))
;; Set up a different marker for graphic display.
(setq org-superstar-first-inlinetask-bullet ?🞸)
;; Stop cycling bullets to emphasize hierarchy of headlines.
(setq org-superstar-cycle-headline-bullets nil)
;; A simple period works fine, too.
(setq org-superstar-leading-fallback ?.)

#+end_src

**** Package: toc-org

#+begin_src emacs-lisp :tangle yes

(use-package toc-org
  :hook (org-mode . toc-org-mode))

#+end_src

**** Package: org-ql

#+begin_src emacs-lisp :tangle no

(use-package org-ql)

#+end_src

**** Package: org-super-agenda

#+begin_src emacs-lisp :tangle yes

(require 'org-habit)
(use-package org-super-agenda
  :config
  ;; (let ((one-week-from-today (format-time-string "%Y-%m-%d" (org-read-date nil t "+1w")))
  ;;       (one-month-from-today (format-time-string "%Y-%m-%d" (org-read-date nil t "+30d"))))
  ;;   (setq org-super-agenda-groups
  ;;         `(
  ;;           (:name "Due within week"
  ;;                  :deadline (before ,one-week-from-today)
  ;;                  :order 0)
  ;;           (:name "Due within month"
  ;;                  :deadline (before ,one-month-from-today)
  ;;                  :order 1)
  ;;           ;; (:discard)
  ;;           )))

  ;; (setq org-super-agenda-groups
  ;;       `(
  ;;         (:name "Do ASAP"
  ;;                :priority "A"
  ;;                :order 0)
  ;;         (:name "Do soon"
  ;;                :priority "B"
  ;;                :order 1)
  ;;         (:name "Do Eventually"
  ;;                :priority "C"
  ;;                :order 2)
  ;;         (:discard)
  ;;         ))

  (org-super-agenda-mode))

#+end_src

**** REVIEW Org block templates

#+begin_src emacs-lisp :tangle no

(add-to-list 'org-structure-template-alist
        '("s" "#+begin_src ?\n\n#+end_src" "<src lang=\"?\">\n\n</src>"))

(add-to-list 'org-structure-template-alist
        '("m" "#+begin_src emacs-lisp :tangle init.el\n\n#+end_src" "<src lang=\"emacs-lisp\">\n\n</src>"))

(add-to-list 'org-structure-template-alist
        '("r" "#+begin_src R :results output :session *R* :exports both\n\n#+end_src" "<src lang=\"R\">\n\n</src>"))

(add-to-list 'org-structure-template-alist
        '("p" "#+begin_src python :results output :exports both\n\n#+end_src" "<src lang=\"python\">\n\n</src>"))

(add-to-list 'org-structure-template-alist
        '("P" "#+begin_src python :results output :session *python* :exports both\n\n#+end_src" "<src lang=\"python\">\n\n</src>"))

(add-to-list 'org-structure-template-alist
        '("b" "#+begin_src shell :results output :exports both\n\n#+end_src" "<src lang=\"sh\">\n\n</src>"))

(add-to-list 'org-structure-template-alist
        '("B" "#+begin_src shell :session *shell* :results output :exports both \n\n#+end_src" "<src lang=\"sh\">\n\n</src>"))

(add-to-list 'org-structure-template-alist
        '("g" "#+begin_src dot :results output graphics :file \"/tmp/graph.pdf\" :exports both
   digraph G {
      node [color=black,fillcolor=white,shape=rectangle,style=filled,fontname=\"Helvetica\"];
      A[label=\"A\"]
      B[label=\"B\"]
      A->B
   }\n#+end_src" "<src lang=\"dot\">\n\n</src>"))

#+end_src

*** TODO Modal editing

try out a modal configuration

C-up gives error: "wrong number of arguments: (0 . 1), 2"
related to org-backward-paragraph
it works if I manually execute the use-package after emacs is loaded. probably a dependency issue.

after some experimentation, is seems there's a conflict with some org package.
Solution: load this package after the org section.

#+begin_src emacs-lisp :tangle yes

(use-package ryo-modal
  :init
  (unbind-key "C-SPC")
  :config
  (setq ryo-modal-cursor-color "white")

  (bind-key "M-j" 'drag-stuff-left wakib-keys-overriding-map)
  (bind-key "M-l" 'drag-stuff-right wakib-keys-overriding-map)
  (bind-key "M-i" 'drag-stuff-up wakib-keys-overriding-map)
  (bind-key "M-k" 'drag-stuff-down wakib-keys-overriding-map)

  (bind-key "M-p" 'my/smarter-move-beginning-of-line wakib-keys-overriding-map)
  (bind-key "M-+" 'end-of-visual-line wakib-keys-overriding-map)
  (bind-key "M-ç" 'scroll-down-command wakib-keys-overriding-map)
  (bind-key "M-º" 'scroll-up-command wakib-keys-overriding-map)

  (ryo-modal-keys
   ("," ryo-modal-repeat)
   ("q" ryo-modal-mode)
   ("i" previous-line)
   ("k" next-line)
   ("j" backward-char)
   ("l" forward-char)
   ;; ("u" )
   ;; ("o" )
   ("I" backward-paragraph)
   ("K" forward-paragraph)
   ("J" backward-word)
   ("L" forward-word)
   ;; ("U" )
   ;; ("O" )
   ("[" backward-sexp)
   ("]" forward-sexp)
   ("{" backward-up-list)
   ("}" down-list)
   )

  (ryo-modal-keys
   ;; First argument to ryo-modal-keys may be a list of keywords.
   ;; These keywords will be applied to all keybindings.
   (:norepeat t)
   ("0" "M-0")
   ("1" "M-1")
   ("2" "M-2")
   ("3" "M-3")
   ("4" "M-4")
   ("5" "M-5")
   ("6" "M-6")
   ("7" "M-7")
   ("8" "M-8")
   ("9" "M-9"))

  :bind ("C-SPC" . ryo-modal-mode)
  ;; :hook ((after-init . ryo-modal-mode))
  )

#+end_src

*** Spellcheck
**** Package: flyspell

Between aspell and hunspell, aspell seems to have much better performance.

#+begin_src emacs-lisp :tangle yes

;; defer is used to only load package when mode is activated
(use-package flyspell
  :defer t
  :config
  ;; set backend and default language
  (setq ispell-program-name    "aspell"
        ispell-dictionary      "en_US")
  :bind
  (:map wakib-keys-overriding-map
        ("C-." . flyspell-correct-at-point))
  :hook (org-mode . flyspell-mode)) ;; automatically enable spellchecker for org files (doesn't affect source blocks)

#+end_src

**** Package: flyspell-correct-ivy

#+begin_src emacs-lisp :tangle yes

(use-package flyspell-correct-ivy
  :config
  (setq flyspell-correct-interface #'flyspell-correct-ivy)
  :bind
  (:map flyspell-mouse-map
   ("<mouse-2>" . nil)
   ("<mouse-3>" . flyspell-correct-word)))

#+end_src

**** Basic usage

Use hydra menu to enable/disable.

*** Code Completion
**** Package: company

#+begin_src emacs-lisp :tangle yes

(use-package company
  :config
  (global-company-mode 1)

  (setq company-global-modes             '(not org-mode)
        company-minimum-prefix-length    3
        company-auto-complete            t
        company-show-numbers             t
        company-idle-delay               0.6)

  (defun company-abort-and-insert-space ()
    (interactive)
    (company-abort)
    (insert " "))

  :bind
  (:map company-active-map
        ("<escape>" . company-abort)
        ("SPC" . company-abort-and-insert-space)))

#+end_src

**** Package: company-quickhelp

#+begin_src emacs-lisp :tangle yes

(use-package company-quickhelp
  :unless (display-graphic-p)
  :after company
  :init
  (setq company-quickhelp-delay nil)  ;; popup doesnt appear automatically
  :config
  (company-quickhelp-mode))

#+end_src

**** Package: company-box

#+begin_src emacs-lisp :tangle yes

(use-package company-box
  :after company
  :hook
  (company-mode . (lambda () (when (display-graphic-p) (company-box-mode)))))

#+end_src

*** Generic Completion Framework
**** Information

Helm and ivy are Emacs frameworks for incremental completions and narrowing selections.

Completion framework being used:

Ivy + Swiper + Counsel

ivy is the mechanism that handles all selection lists, narrowing
    them down using a variety of possible builders (regular expressions of
    flexible matching).  It also provides a base interface for any
    function that needs to receive input based on a list of candidates.

counsel provides a superset of functions for navigating the file
    system, switching buffers, etc. that expand on the basic features
    supported by Ivy.  For instance, switching buffers with Counsel offers
    a preview of their contents in the window, whereas regular Ivy does
    not.

swiper is a tool for performing searches, powered by Ivy, all while
    presenting a preview of the results.

**** Package: ivy

#+begin_src emacs-lisp :tangle yes

(use-package ivy
  :defer 0.1
  :diminish
  :custom
  (ivy-use-virtual-buffers t)
  (ivy-count-format "%d/%d ")
  (ivy-wrap t)
  ;; completion options: ivy–regex-plus, ivy–regex-ignore-order, and ivy--regex-fuzzy
  (ivy-re-builders-alist
   '((t . ivy--regex-plus)
     (counsel-M-x . ivy--regex-ignore-order)))
  (ivy-initial-inputs-alist nil)
  :config
  (ivy-mode)
  :bind
  (:map ivy-minibuffer-map
        ("TAB" . ivy-alt-done)))

#+end_src

**** Package: counsel

#+begin_src emacs-lisp :tangle yes

(use-package counsel
  :after ivy
  :config (counsel-mode)
  :bind
  (:map wakib-keys-overriding-map
        ("C-p" . counsel-fzf)
        ("C-o" . counsel-find-file)))

#+end_src

**** Package: swiper

#+begin_src emacs-lisp :tangle yes

(use-package swiper
  :after ivy
  :config
  (defun my/swiper-isearch-with-selection ()
    "Swiper-isearch, but uses active selection as input if it exists"
    (interactive)
    (if (region-active-p) (swiper-isearch-thing-at-point)
      (swiper-isearch nil)))

  (defun my/swiper-isearch-again ()
    "Start swiper-isearch with the last thing searched for."
    (interactive)
    (if (region-active-p) (swiper-isearch-thing-at-point)
      (swiper-isearch (car swiper-history))))

  (defun my/swiper-isearch-again-backward ()
    "Start swiper-isearch with the last thing searched for.
    Search backward."
    (interactive)
    (if (region-active-p) (swiper-isearch-thing-at-point)
      (swiper-isearch-backward (car swiper-history))))

  :bind
  (("<f3>" . my/swiper-isearch-again)
   ("<S-f3>" . my/swiper-isearch-again-backward)
   :map wakib-keys-overriding-map
   ("C-f" . my/swiper-isearch-with-selection)   ;; replace 'isearch' with swiper
   :map swiper-isearch-map
   ("<f3>" . next-line)
   ("<S-f3>" . previous-line)
   ;; cant use C-m for swiper-mc. when doing that, every time enter is pressed after search, swiper-mc is activated
   ("C-h" . swiper-mc)  ;; swiper-mc puts a cursor on every swiper search result
   )
  )

#+end_src

**** Package: flx

Ivy sorts large lists using flx's scoring mechanism, if it's installed.

#+begin_src emacs-lisp :tangle yes

(use-package flx)

#+end_src

**** Package: ivy-prescient

#+begin_src emacs-lisp :tangle yes

(use-package prescient
  :custom
  (prescient-history-length 50)
  (prescient-filter-method '(literal regexp))
  :config
  (prescient-persist-mode 1))

(use-package ivy-prescient
  :after (prescient ivy)
  :custom
  (ivy-prescient-sort-commands
   ;; things that shouldnt be sorted go in this list
   '(:not swiper swiper-isearch ivy-switch-buffer counsel-switch-buffer flyspell-correct-ivy counsel-find-file find-file bufler-workspace-switch-buffer bufler-switch-buffer))
  (ivy-prescient-excluded-commands '(counsel-find-file find-file))
  (ivy-prescient-retain-classic-highlighting t)
  (ivy-prescient-enable-filtering nil)
  (ivy-prescient-enable-sorting t)
  :config
  (ivy-prescient-mode 1))

#+end_src

**** Package: ivy-rich

#+begin_src emacs-lisp :tangle yes

(use-package ivy-rich
  :custom
  (ivy-rich-path-style 'abbreviate)
  :config
  (setcdr (assq t ivy-format-functions-alist)
          #'ivy-format-function-line)
  (ivy-rich-mode 1))

(use-package all-the-icons-ivy-rich
  :custom
  (all-the-icons-ivy-rich-icon-size 1.0)
  :config (all-the-icons-ivy-rich-mode 1))

#+end_src

**** Package: ivy-posframe

#+begin_src emacs-lisp :tangle yes

(use-package ivy-posframe
  :custom
  (ivy-posframe-parameters
   '((left-fringe           . 2)
     (right-fringe          . 2)
     (internal-border-width . 2)))
  (ivy-posframe-height-alist
   '((swiper                . 15)
     (swiper-isearch        . 1)
     (flyspell-correct-ivy  . 10)
     (t . 20)))
  (ivy-posframe-display-functions-alist
   '((complete-symbol       . ivy-posframe-display-at-point)
     (swiper                . ivy-display-function-fallback)
     (swiper-isearch        . ivy-display-function-fallback)
     (flyspell-correct-ivy  . ivy-posframe-display-at-point)
     (t                     . ivy-posframe-display-at-frame-center)))
  :config (ivy-posframe-mode 1))

#+end_src

**** Package: counsel-projectile

#+begin_src emacs-lisp :tangle yes

(use-package counsel-projectile)

#+end_src

**** Basic usage

When using swiper, press C-7 to add a cursor to all highlighted items

*** Git Integration
**** Package: magit

#+begin_quote
Magit is a complete text-based user interface to Git. It fills the glaring gap between the Git command-line interface and various GUIs, letting you perform trivial as well as elaborate version control tasks with just a couple of mnemonic key presses.
#+end_quote

#+begin_src emacs-lisp :tangle yes

(use-package magit
  :hook (magit-mode . my/set-buffer-large-fringe))

#+end_src

**** Package: diff-hl

#+begin_quote
Emacs package for highlighting uncommitted changes
#+end_quote

#+begin_src emacs-lisp :tangle yes

(use-package diff-hl
  :config
  (global-diff-hl-mode)
  (diff-hl-flydiff-mode)  ;; see changes in real time
  :hook ((magit-pre-refresh . diff-hl-magit-pre-refresh)
         (magit-post-refresh . diff-hl-magit-post-refresh)
         (org-mode . (lambda () (diff-hl-mode -1)))))         ;; disable git gutter for org mode

#+end_src

**** Package: git-gutter

#+begin_src emacs-lisp :tangle no

(use-package git-gutter
  :config
  (setq git-gutter:update-interval 1)
  (global-git-gutter-mode)

  ;; lines that are 'inserted' cause problems with org headings ellipsis symbol
  (defun disable-gutter()
    (interactive)
    (diff-hl-mode 0))

  :hook
  (org-mode . disable-gutter))

#+end_src

*** TODO Templates and Snippets
**** Package: yasnippet

#+begin_src emacs-lisp :tangle no

(use-package yasnippet-snippets
  :defer t)

(use-package yasnippet
  :hook
  ((prog-mode . yas-minor-mode))
  :config
  (require 'yasnippet-snippets)
  (yas-reload-all))

(use-package ivy-yasnippet
  :bind ("M-y" . ivy-yasnippet))

#+end_src

*** Multiple Cursors
**** Package: multiple-cursors

Use multiple cursors on swiper candidates with the corresponding swiper keybinding.

#+begin_src emacs-lisp :tangle yes

(use-package multiple-cursors
  :init
  (custom-set-variables `(mc/always-run-for-all ,t))
  :config
  (define-key mc/keymap [remap keyboard-quit] 'mc/keyboard-quit)
  (define-key rectangular-region-mode-map [remap keyboard-quit] 'rrm/keyboard-quit)
  ;; use C-7 to add a cursor to every swiper selection
  (add-to-list 'mc/cmds-to-run-once 'swiper-mc)
  :bind
  (:map wakib-keys-overriding-map
        ("M-S" . set-rectangular-region-anchor)
        :map mc/keymap
        ("M-S-<down>" . mc/mark-next-like-this)
        ("M-S-<up>" . mc/mark-previous-like-this)
        ("<C-down-mouse-1>" . mc/add-cursor-on-click)))

#+end_src

*** Presentations
**** Package: ox-reveal

Write in Org mode and export to HTML with reveal.js

#+begin_src emacs-lisp :tangle yes

(use-package ox-reveal
  :custom
  ;; (setq org-reveal-root      "~/.reveal/reveal.js")
  (org-reveal-root           "https://cdn.jsdelivr.net/npm/reveal.js")
  (org-reveal-title-slide    "<h1>%t</h1><h3>%s</h3>")  ;; set content of initial slide: %t - Title, %s - subtitle
  )

#+end_src

#+begin_src emacs-lisp :tangle yes

;; necessary to highlight source code
(use-package htmlize)

#+end_src

**** Usage notes

- Using *reveal*

To export to pdf, open the HTML file in a browser and add the query string =print-pdf= to the end of the URL.

As an example, for a URL like this:
file:///home/user/Documents/presentation.html

The desired URL would be:
file:///home/user/Documents/presentation.html?print-pdf

Then use the browser to export the page as a PDF.
Follow the directions at https://revealjs.com/pdf-export/


- Using *decktape*

Another simpler option is to use the decktape cli utility.

Assuming you have it installed, run:
decktape reveal <my-file.html> <output>

*** Move text
**** Package: drag-stuff

Moving text both horizontally and vertically.
I use the M + arrow keys for this. Since this interferes with org-mode, we use the default org-mode keybinds when the cursor is in an org-heading.

#+begin_src emacs-lisp :tangle yes

;; alt+up/down to move line or region
(use-package drag-stuff
  :config

  ;; alt + left/right to indent blocks of text
  ;; moving text left and right doesn't actually use this package
  (defun my/meta-right-org-heading-detect ()
    "Executes a different function if the cursor is in a org heading.
Otherwise, just execute the normal behaviour"
    (interactive)
    (if (and (equal major-mode 'org-mode) (org-at-heading-p))
        (org-do-demote)
      (my/tab-region (my/get-buffer-indentation-size))))

  (defun my/meta-left-org-heading-detect ()
    "Executes a different function if the cursor is in a org heading.
Otherwise, just execute the normal behaviour"
    (interactive)
    (if (and (equal major-mode 'org-mode) (org-at-heading-p))
        (org-do-promote)
      (my/untab-region (my/get-buffer-indentation-size))))

  (defun my/meta-up-org-heading-detect ()
    "Executes a different function if the cursor is in a org heading.
Otherwise, just execute the normal behaviour"
    (interactive)
    (if (and (equal major-mode 'org-mode) (org-at-heading-p))
        (org-move-subtree-up)
      (call-interactively 'drag-stuff-up)))

  (defun my/meta-down-org-heading-detect ()
    "Executes a different function if the cursor is in a org heading.
Otherwise, just execute the normal behaviour"
    (interactive)
    (if (and (equal major-mode 'org-mode) (org-at-heading-p))
        (org-move-subtree-down)
      (call-interactively 'drag-stuff-down)))

  :bind
  (:map wakib-keys-overriding-map
        ("M-<left>" . my/meta-left-org-heading-detect)
        ("M-<right>" . my/meta-right-org-heading-detect)
        ("M-<up>" . my/meta-up-org-heading-detect)
        ("M-<down>" . my/meta-down-org-heading-detect)))

#+end_src

*** Hydras
**** Package: hydra

#+begin_src emacs-lisp :tangle yes

(use-package hydra)

#+end_src

**** Hydra Usage

# menu entries that are also menus have a different color
# M- up/down moves by paragraphs instead of lines (org-move-down)
# company completion - writing something quits the completion popup


# https://github.com/hlissner/doom-emacs/blob/develop/modules/config/default/+evil-bindings.el


tab - workspace menu
  tab - show tab bar (temporarily show tab bar - dissapears after moving cursor or writing something)
  . - switch workspace
  0 - switch to final workspace
  1-9 - stitch to Nth workspace

spc - find file in project
ret - jump to bookmarks

b - buffer menu

c - code menu

h - help menu

i - insert menu
  f - current file name
  F - current file path
  s - snippet

n - notes menu

**** Package: hydra-posframe

#+begin_src emacs-lisp :tangle yes

(use-package hydra-posframe
  :hook (after-init . hydra-posframe-mode)
  :custom
  ;; copy the border values from 'ivy-posframe-parameters'
  (hydra-posframe-parameters'((min-height            . 12)
                              (min-width             . 50)
                              (left-fringe           . 2)
                              (right-fringe          . 2)
                              (internal-border-width . 2)))
  :straight
  (hydra-posframe
   :type git
   :host github
   :repo "Ladicle/hydra-posframe"
   :fork (:host github :repo "jerrypnz/hydra-posframe")))

#+end_src

**** Package: major-mode-hydra

show a different main hydra, depending on major mode

#+begin_src emacs-lisp :tangle yes

(use-package major-mode-hydra
  :init
  (major-mode-hydra-define org-mode
    (:color teal :quit-key "q" :title "Org hydra" :separator "-")
    ("Export"
     (("e" org-export-dispatch "export dispatch")
      ("l" org-latex-export-to-latex "export to latex file")
      ("L" my/org-latex-compile-and-open-pdf "compile org file and export to latex pdf")
      ("r" org-reveal-export-to-html "export to reveal.js HTML file")
      ("R" my/export-reveal-presentation-to-pdf "convert reveal.js HTML file to pdf"))
     "Navigation"
     (("g" counsel-org-goto "goto an org heading"))
     "Sorting"
     (("s" org-sort "sort item list at cursor "))
     "Insert"
     (("ib" org-insert-structure-template "insert block template")
      ("it" org-time-stamp "insert timestamp")
      ("is" org-schedule "insert \"scheduled\" string")
      ("id" org-deadline "insert \"deadline\" string"))
     )))

#+end_src

**** Hydra: toggles

#+begin_src emacs-lisp :tangle yes

(pretty-hydra-define hydra-toggles
  (:color amaranth :quit-key "q" :title "Toggles Hydra")
  ("Basic"
   (("n" display-line-numbers-mode "line numbers" :toggle t)
    ("N" global-display-line-numbers-mode "line numbers (global)" :toggle t)
    ("r" rainbow-mode "rainbow" :toggle t)
    ("b" page-break-lines-mode "page break lines" :toggle t)
    ("g" diff-hl-mode "git gutter" :toggle t))
   "Highlight"
   (;;("s" symbol-overlay-mode "symbol" :toggle t)
    ("l" global-hl-line-mode "current line (global)" :toggle t)
    ;;("t" hl-todo-mode "todo" :toggle t)
    ;;("x" highlight-sexp-mode "sexp" :toggle t)
    ("p" show-paren-mode "matching parens" :toggle t)
    ("h" global-highlight-changes-mode "highlight changes (global)" :toggle t))
   "Coding"
   (("f" flycheck-mode "flycheck" :toggle t)
    ("s" flyspell-mode "spellcheck" :toggle t)
    ("c" company-mode "company" :toggle t)
    ("P" electric-pair-mode "automatic parens pairing" :toggle t))
   "UI"
   (("e" treemacs "file explorer sidebar" :toggle t)
    ("t" tab-line-mode "tab-line" :toggle t)
    ("m" hide-mode-line-mode "modeline" :toggle t))
   "Emacs"
   (("D" toggle-debug-on-error "debug on error" :toggle (default-value 'debug-on-error))
    ("X" toggle-debug-on-quit "debug on quit" :toggle (default-value 'debug-on-quit)))))

#+end_src

**** Hydra: open

#+begin_src emacs-lisp :tangle yes

(pretty-hydra-define hydra-open
  (:color teal :quit-key "q"  :title "Open/Utilities Hydra")
  ("Dashboard"
   (("d" my/open-dashboard "dashboard"))
   "Agenda"
   (("a" org-agenda "open agenda menu"))
   "Scratch"
   (("s" my/open-scratch-buffer "open scratch buffer"))
   ))

#+end_src

**** Hydra: search

#+begin_src emacs-lisp :tangle yes

(pretty-hydra-define hydra-search
  (:color teal :quit-key "q" :title "Search Hydra")
  ("String in buffer (regex)"
   (("b" swiper "search in current buffer")
    ("d" rg-search-current-dir "search in current directory")
    ("D" rg "search and choose directory"))
   "String in filenames (glob)"
   (("f" fd-dired "locate files"))
   "Project"
   (("p"  counsel-projectile-rg "search text")
    ("r"  projectile-replace "replace text (literal)"))
   ))

#+end_src

**** Hydra: version control

#+begin_src emacs-lisp :tangle yes

(pretty-hydra-define hydra-git
  (:color teal :quit-key "q" :title "Git Hydra")
  ("Magit"
   (("g" magit-status "show git status")
    )))

#+end_src

**** Hydra: package manager

#+begin_src emacs-lisp :tangle yes

(pretty-hydra-define hydra-packages
  (:color teal :quit-key "q" :title "Packages Hydra")
  ("Package Manager"
   (("i" straight-use-package "install package (for this session only)")
    ("u" straight-rebuild-all "update all packages")
    )))

#+end_src

**** Hydra: indentation

#+begin_src emacs-lisp :tangle yes

(pretty-hydra-define hydra-indentation
  (:color teal :quit-key "q" :title "Indentation Hydra")
  ("Switch"
   (("t" my/switch-indentation-use-tabs "indent with tabs")
    ("s" my/switch-indentation-use-spaces "indent with spaces"))
   "Convert"
   (("cT" my/tabify-whole-buffer "convert indentation (in whole buffer) to tabs")
    ("cS" my/untabify-whole-buffer "convert indentation (in whole buffer) to spaces")
    ("ct" tabify "convert indentation (in active region) to tabs")
    ("cs" untabify "convert indentation (in active region) to spaces"))
   "Resize"
   (("w" my/switch-indentation-width-buffer "set indentation width"))
   ))

#+end_src

**** Hydra: spellcheck

#+begin_src emacs-lisp :tangle yes

(pretty-hydra-define hydra-spellcheck
  (:color teal :quit-key "q" :title "Spellcheck Hydra")
  ("Dictionary"
   (("d" ispell-change-dictionary "change dictionary language"))
   ))

#+end_src

**** Hydra: bookmarks

#+begin_src emacs-lisp :tangle yes

(pretty-hydra-define hydra-bookmarks
  (:color teal :quit-key "q" :title "Bookmarks Hydra")
  ("Bookmarks"
   (("o" counsel-bookmark "open bookmark")
    ("c" bookmark-set "create bookmark (current file)")
    ("r" bookmark-rename "rename bookmark")
    ("d" bookmark-remove "delete bookmark"))
   ))

#+end_src

**** Hydra: file

#+begin_src emacs-lisp :tangle yes

(pretty-hydra-define hydra-file
  (:color teal :quit-key "q" :title "Files Hydra")
  ("Open"
   (("f" counsel-find-file "find file")
    ("p" my/open-init-file "open private config")
    ("r" recentf-open-files "Recent files")
    ("u" sudo-edit-find-file "Sudo find file")
    ("U" sudo-edit "Sudo this file"))
   "Rename"
   (("R" my/rename-current-buffer-file "Rename/move file"))
   "Delete"
   (("D" delete-file "Delete file"))
   "Save"
   (("s" save-buffer "Save file")
    ("S" write-file "Save file as..."))
   "Filename"
   (("y" my/show-buffer-name "Yank filename")
    ("Y" my/show-buffer-file-name "Yank filename with full path"))
   ))

#+end_src

**** Hydra: insert

#+begin_src emacs-lisp :tangle yes

(pretty-hydra-define hydra-insert
  (:color teal :quit-key "q" :title "Insert Hydra")
  ("Unicode"
   (("u" counsel-unicode-char "insert unicode character"))
   "Clipboard"
   (("y" counsel-yank-pop "select from clipboard history"))
   ))

#+end_src

**** Hydra: quit/session

#+begin_src emacs-lisp :tangle yes

(pretty-hydra-define hydra-quit
  (:color teal :quit-key "q" :title "Quit/Session Hydra")
  ("Emacs"
   (("Q" my/kill-emacs "Quit Emacs")
    ("r" restart-emacs "Restart emacs"))
   "Session"
   (("l" my/desktop-enable "Restore last session")
    ("L" desktop-read "Restore session from file")
    ("s" desktop-save-in-desktop-dir "Quick save current session")
    ("S" desktop-save "Save session to file"))
   ))

#+end_src

**** Hydra: buffer

#+begin_src emacs-lisp :tangle yes

(pretty-hydra-define hydra-buffer
  (:color teal :quit-key "q" :title "Buffer Hydra")
  ("Save"
   (("s" save-some-buffers "Save all buffers"))
   "Switch"
   (("b" bufler "Show all buffers and workspaces"))
   ))

#+end_src

**** Font fix

Depending on the font, the line below the hydra title can be too long or too short.
Here, we are replacing the font, only targeting the unicode symbol used to draw the line.

#+begin_src emacs-lisp :tangle yes

(set-fontset-font "fontset-default"
                  '(#x2500 . #x250F) (font-spec :name "SourceCodePro"))

#+end_src

**** Usage notes

The color of a hydra is used to define how a hydra exits after executing.
The default color is red.

Behavior by color:

| color    | toggle                     |
|----------+----------------------------|
| red      |                            |
| blue     | :exit t                    |
| amaranth | :foreign-keys warn         |
| teal     | :foreign-keys warn :exit t |
| pink     | :foreign-keys run          |

*** PDF viewer
**** Package: pdf-tools

#+begin_src emacs-lisp :tangle yes

(use-package pdf-tools
   :config
   (pdf-tools-install)
   (setq-default pdf-view-display-size 'fit-page)
   (define-key pdf-view-mode-map (kbd "C-f") 'isearch-forward)
   :custom
   (pdf-annot-activate-created-annotations t "automatically annotate highlights"))

#+end_src

**** define a minor mode to fix M-<pg up/down> behaviour

This needs to be added to the end of any org file that is being used to create a LaTeX pdf.

#+begin_example
# Local Variables:
# eval: (my/scroll-other-window-pdf-tools-mode 1)
# End:
#+end_example

#+begin_src emacs-lisp :tangle yes

(defun my/scroll-other-window-down ()
  "Scroll other window down, with support for pdf-view-mode."
  (interactive)
  (let* ((wind (other-window-for-scrolling))
         (mode (with-selected-window wind major-mode)))
    (if (eq mode 'pdf-view-mode)
        (with-selected-window wind
      (pdf-view-next-line-or-next-page 2))
      (scroll-other-window 2))))

(defun my/scroll-other-window ()
  "Scroll other window up, with support for pdf-view-mode."
  (interactive)
  (let* ((wind (other-window-for-scrolling))
         (mode (with-selected-window wind major-mode)))
    (if (eq mode 'pdf-view-mode)
    (with-selected-window wind
      (progn
        (pdf-view-previous-line-or-previous-page 2)
        (other-window 1)))
    (scroll-other-window-down 2))))

#+end_src

#+begin_src emacs-lisp :tangle yes
;; my/scroll-other-window-pdf-tools-mode.el
;; Temporary minor mode
;; Main use is to enable it only in specific buffers to achieve the goal of buffer-specific keymaps

(defvar my/scroll-other-window-pdf-tools-mode-map (make-sparse-keymap)
  "Keymap while my/scroll-other-window-pdf-tools-mode is active.")

;;;###autoload
(define-minor-mode my/scroll-other-window-pdf-tools-mode
  "A temporary minor mode to be activated only specific to a buffer."
  nil
  :lighter " Temp"
  my/scroll-other-window-pdf-tools-mode-map)

(define-key my/scroll-other-window-pdf-tools-mode-map (kbd "M-<next>") 'my/scroll-other-window-down)
(define-key my/scroll-other-window-pdf-tools-mode-map (kbd "M-<prior>") 'my/scroll-other-window)
#+end_src

*** Code Linter
**** Package: flycheck

Code syntax checking.

Not sure, but this might have to load after flyspell package

# see "flycheck-select-checker" function

#+begin_src emacs-lisp :tangle yes

(use-package flycheck
  :hook
  ((prog-mode . flycheck-mode)))

#+end_src


#+begin_src emacs-lisp :tangle yes

(use-package flycheck-aspell
  :config
  (add-to-list 'flycheck-checkers 'tex-aspell-dynamic))

#+end_src

*** Spacemacs-like menu
**** Package: general

This should be one of the last packages to be loaded.
The other packages first have to create their hydras and only after that should we create a menu using those hydras.

Note: dont forget to update which-key with the descriptions when creating new hydras.

#+begin_src emacs-lisp :tangle yes

(use-package general
  :config
  (unbind-key "<menu>")
  (general-define-key
   :prefix "<menu>"
   "s" 'hydra-search/body
   "o" 'hydra-open/body
   "f" 'hydra-file/body
   "b" 'hydra-buffer/body
   "B" 'hydra-bookmarks/body
   "p" 'projectile-hydra/body
   "g" 'hydra-git/body
   "i" 'hydra-insert/body
   "t" 'hydra-toggles/body
   "P" 'hydra-packages/body
   "I" 'hydra-indentation/body
   "S" 'hydra-spellcheck/body
   "q" 'hydra-quit/body
   "m" 'major-mode-hydra
   ))

#+end_src

*** Other additions
**** Package: undo-tree

Change undo/redo behaviour

#+begin_src emacs-lisp :tangle yes

(use-package undo-tree
  :config
  (global-undo-tree-mode)
  :bind
  (:map wakib-keys-overriding-map
        ("C-z" . undo-tree-undo)
        ("C-y" . undo-tree-redo)))

#+end_src

**** Package: sudo-edit

Edit files with elevated permissions

#+begin_src emacs-lisp :tangle yes

(use-package sudo-edit)

#+end_src

**** Package: bind-key

 Key Rebinding utility. Will be used in the keybinds section

#+begin_src emacs-lisp :tangle yes

(use-package bind-key)

#+end_src

**** Package: which-key

Display available keybindings in popup after a prefix key is pressed

#+begin_src emacs-lisp :tangle yes

(use-package which-key
  :config
  (which-key-add-key-based-replacements
    "<menu> s" "+search"
    "<menu> o" "+open"
    "<menu> f" "+file"
    "<menu> b" "+buffer"
    "<menu> B" "+bookmarks"
    "<menu> p" "+project"
    "<menu> g" "+git"
    "<menu> i" "+insert"
    "<menu> t" "+toggles"
    "<menu> P" "+packages"
    "<menu> I" "+indentation"
    "<menu> S" "+spellcheck"
    "<menu> q" "+quit/session"
    "<menu> m" "+major-mode")
  (which-key-mode))

#+end_src

**** Package: recentf

Save a list of most recently edited files.
We exclude elpa folder from recent files to prevent autoload files filling it up.

#+begin_src emacs-lisp :tangle yes

(use-package recentf
  :config
  (recentf-mode)
  (setq recentf-max-saved-items 100
        recentf-exclude '("COMMIT_EDITMSG\\'"
                          "[/\\]elpa/\\.*"
                          "[/\\]var/\\.*")))

#+end_src

**** Package: restart-emacs

Add an easy way to restart emacs

#+begin_src emacs-lisp :tangle yes

(use-package restart-emacs
  :commands (restart-emacs))

#+end_src

**** Package: expand-region

Expand region in logical increments.

#+begin_src emacs-lisp :tangle yes

(use-package expand-region
  :bind ("M-A" . er/expand-region))

#+end_src

**** Package: switch-window

#+begin_src emacs-lisp :tangle yes

(use-package switch-window
  :bind
  (:map wakib-keys-overriding-map
        ("M-H" . switch-window)))    ;; for some reason writing it as M-S-h doesn't work

#+end_src

**** Package: avy

quickly go to any character on screen.

#+begin_src emacs-lisp :tangle yes

(use-package avy
  :bind ("M-m" . avy-goto-char))

#+end_src

**** Package: ibuffer-vc

#+begin_src emacs-lisp :tangle no

(use-package ibuffer-vc)

#+end_src

**** Package: symbolword-mode

#+begin_src emacs-lisp :tangle no

(use-package symbolword-mode
  :init
  (symbolword-mode 1))

#+end_src

**** Package: comment-dwim-2

#+begin_src emacs-lisp :tangle yes

(use-package comment-dwim-2
  :init
  (unbind-key "C--")
  (unbind-key "C--" wakib-keys-overriding-map)

  :config
  (defun my/comment-dwim-2 (arg)
    (interactive "*P")
    (if (use-region-p)
        (my/extend-region-to-whole-lines))
    (comment-dwim-2 arg))

  (defun my/org-comment-dwim-2 (arg)
    (interactive "*P")
    (if (use-region-p)
        (my/extend-region-to-whole-lines))
    (org-comment-dwim-2 arg))

  :bind
  ("C--" . my/comment-dwim-2)
  (:map org-mode-map
        ("C--" . my/org-comment-dwim-2)))

#+end_src

**** Package: whole-line-or-region

cut/copy whole line or region

when C-x or C-c are pressed with no active selection, cut/copy the line instead
default behaviour is to do the operation between the cursor and the mark, which is hidden

#+begin_src emacs-lisp :tangle yes

(use-package whole-line-or-region
  :config
  (defun my/whole-line-or-region-delete-region (prefix)
    (interactive "*p")
    (if (use-region-p)
        (my/extend-region-to-whole-lines))
    (whole-line-or-region-delete-region prefix))

  :bind (:map wakib-keys-overriding-map
              ("C-c" . whole-line-or-region-kill-ring-save)
              ("C-x" . whole-line-or-region-kill-region)
              ("C-k" . my/whole-line-or-region-delete-region)))

;; Comment code lines, command reacts based on the major mode.
;; (bind-key "C-«" 'whole-line-or-region-comment-dwim wakib-keys-overriding-map)

#+end_src

**** Package: ssh-agency

Use this so magit can actually access the host system's ssh keys.

#+begin_src emacs-lisp :tangle yes

(use-package ssh-agency)

#+end_src

**** Package: ansi-color

mostly helps by adding support for terminal colors.

Deals with terminal escape codes in compilation-mode.
This should make compilation buffers handle ANSI escape sequences instead of displaying them as raw strings.

#+begin_src emacs-lisp :tangle yes

(use-package ansi-color
  :config
  (setq compilation-scroll-output t) ;; the compilation buffer always scrolls to follow output as it comes in

  (defun my/ansi-colorize-buffer ()
    (let ((buffer-read-only nil))
      (ansi-color-apply-on-region (point-min) (point-max))))

  :hook (compilation-filter . my/ansi-colorize-buffer))

#+end_src

**** Package: yascroll

Show a buffer position indicator on the right fringe

#+begin_src emacs-lisp :tangle yes

(use-package yascroll
  :config
  (global-yascroll-bar-mode 1))

#+end_src

**** Package: annotate

#+begin_src emacs-lisp :tangle no

(use-package annotate
  :hook
  (org-mode . annotate-mode)
  (save-buffer . annotate-save-annotations))

#+end_src

**** Package: modern-fringes

Replace the default fringe icons with more modern looking ones

#+begin_src emacs-lisp :tangle yes

(use-package modern-fringes
  :config
  (modern-fringes-mode 1))

#+end_src

**** Package: scroll-on-jump

#+begin_src emacs-lisp :tangle no

(use-package scroll-on-jump
  :config
  (setq scroll-on-jump-duration 0.6)
  :straight
  (scroll-on-jump
    :type git
    :host gitlab
    :repo "ideasman42/emacs-scroll-on-jump")
  :bind
  ("<prior>" . (scroll-on-jump-interactive 'scroll-down-command))
  ("<next>" . (scroll-on-jump-interactive 'scroll-up-command)))

#+end_src

**** Package: helpful

Better formatting for help buffers

#+begin_src emacs-lisp :tangle yes

(use-package helpful
  :config
  (setq counsel-describe-function-function #'helpful-callable
        counsel-describe-variable-function #'helpful-variable))

#+end_src

**** Package: exec-path-from-shell

#+begin_src emacs-lisp :tangle yes

(use-package exec-path-from-shell
  :config
  (exec-path-from-shell-initialize))

#+end_src

**** Package: golden-ratio

This doesnt work well with which-key
https://github.com/roman/golden-ratio.el/issues/82

#+begin_src emacs-lisp :tangle no

(use-package golden-ratio
  :config
  (add-to-list 'golden-ratio-exclude-buffer-names " *which-key*")
  (golden-ratio-mode t))

#+end_src

**** Package: shackle

rules for popup windows

#+begin_src emacs-lisp :tangle yes

(use-package shackle
  :init
  (setq shackle-default-alignment    'right
        shackle-rules                '(("*Bufler*" :regexp t :align below)))
  :config
  (shackle-mode 1))

#+end_src

**** Package: fd-dired

#+begin_src emacs-lisp :tangle yes

(use-package fd-dired)

#+end_src

**** Package: fzf

note:
do not hide project files in .gitignore
use ~/.config/fd/ignore to ignore files


face used is from term-mode

#+begin_src emacs-lisp :tangle yes

(use-package fzf
  :ensure-system-package (fd fzf)
  :init
  (setenv "FZF_DEFAULT_COMMAND" (concat "fd"
                                        " --type 'file'"
                                        " --hidden"
                                        " --ignore-case"
                                        " --exclude '.git/*'"
                                        ;; " --no-ignore-vcs"
                                        )))

#+end_src

**** Package: rainbow-mode

#+begin_src emacs-lisp :tangle yes

(use-package rainbow-mode)

#+end_src

**** Package: visual-fill-column

#+begin_src emacs-lisp :tangle yes

(use-package visual-fill-column
  :defer t
  :config
  (defun my/org-mode-visual-fill ()
    (setq visual-fill-column-width          180
          visual-fill-column-center-text    nil)
    (visual-fill-column-mode 1))

  :hook (org-mode . my/org-mode-visual-fill))

#+end_src

**** Package: highlight-quoted-vars

#+begin_src emacs-lisp :tangle no

(use-package init-shell-highlighting
  :straight (init-shell-highlighting
             :type git
             :host github
             :repo "czipperz/highlight-quoted-vars.el"
             :local-repo "highlight-quoted-vars"))

#+end_src

** Programming languages
*** C#
**** Information

Adds:
  - syntax highlighting

**** Package: csharp-mode

#+begin_src emacs-lisp :tangle yes

(use-package csharp-mode
   :mode ("\\.cs\\'" . csharp-mode)
   :interpreter ("csharp" . csharp-mode))

#+end_src

*** Dockerfile
**** Information

Adds:
  - syntax highlighting
  - image building

**** Package: dockerfile-mode

#+begin_src emacs-lisp :tangle yes

(use-package dockerfile-mode
  :mode "Dockerfile\\'")

(put 'dockerfile-image-name 'safe-local-variable #'stringp)

#+end_src

**** Basic usage

To build a docker image with emacs, use C-d C-b (normally C-c C-b), and add the following to the top of a Dockerfile:

#+begin_example
## -*- dockerfile-image-name: "your-image-name-here" -*-
#+end_example

This variable is declared as safe with the following code, so you aren't asked if it's safe every time you load a Dockerfile.

#+begin_example
(put 'dockerfile-image-name 'safe-local-variable #'stringp)
#+end_example

*** HCL (Hashicorp Configuration Language)
**** Information

Adds:
  - syntax highlighting

**** Package: hcl-mode

#+begin_src emacs-lisp :tangle no

(use-package hcl-mode
  :mode "\\.tf.json\\'")

#+end_src

*** TODO Latex
**** Package: org-ref

#+begin_src emacs-lisp :tangle yes

(use-package org-ref
  :after org)

#+end_src


#+begin_src emacs-lisp :tangle yes

(setq org-latex-listings          'minted
      org-latex-packages-alist    '(("" "minted"))
      org-latex-pdf-process       '("%latex -shell-escape -interaction nonstopmode -output-directory %o %f"
                                    "%latex -shell-escape -interaction nonstopmode -output-directory %o %f"
                                    "%latex -shell-escape -interaction nonstopmode -output-directory %o %f"))

#+end_src

*** TODO Lisp
*** REVIEW Markdown
**** Information

Adds:
  - syntax highlighting

**** Package: markdown-mode

For markdown, you need to customize the command to run the markdown parser if you use something else.

#+begin_src emacs-lisp :tangle yes

;; (use-package markdown-mode
;;   :mode "\\.\\(m\\(ark\\)?down\\|md\\)$")

(use-package markdown-mode
  :ensure-system-package (pandoc)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "pandoc --css $HOME/.emacs.d/markdown-css/github.css"))

#+end_src

#+begin_src emacs-lisp :tangle yes

;; (use-package markdown-preview-mode)

;; Fast GitHub-flavored live preview
(use-package vmd-mode
  :ensure-system-package (python))

;; ;; Or using hooks
;; (use-package grip-mode
;;   :config
;;   (setq grip-preview-use-webkit t)
;;   :bind (:map markdown-mode-command-map
;;          ("g" . grip-mode)))

#+end_src

*** Terraform
**** Information

Adds:
  - syntax highlighting

**** Package: terraform-mode

#+begin_src emacs-lisp :tangle yes

(use-package terraform-mode
  :mode "\\.tf\\'")

#+end_src

*** YAML
**** Information

Adds:
  - syntax highlighting

**** Package: yaml-mode

#+begin_src emacs-lisp :tangle yes

(use-package yaml-mode
  :mode "\\.y\\(a\\)?ml\\'")

#+end_src

** Personal Settings

Load personal settings file if it exists.
This is where you put sensitive information like emails and credentials.
Remember to add this file to =.gitignore=.

#+begin_src emacs-lisp :tangle yes

(let ((personal-settings (expand-file-name "personal.el" user-emacs-directory)))
 (when (file-exists-p personal-settings)
   (load-file personal-settings)))

#+end_src

** Experimentation Area

This section has random code snippets and unfinished ideas.
None of these is exported to the config file. Eventually, these ideas should be finished and implemented or deleted.
They are in the end of the config file to allow most of the config to be loaded even if there's an error.

*** navigate words by only moving to the first character, backward and forward

#+begin_src emacs-lisp :tangle no

(progn
  (defun boundary ()
    (and      (= (char-syntax (char-after))  ?w)
         (not (= (char-syntax (char-before)) ?w))))
  (defun my-forward-word ()
    (interactive)
    (while (progn (forward-char)  (not (boundary)))))
  (defun my-backward-word ()
    (interactive)
    (while (progn (backward-char) (not (boundary)))))
  (global-set-key [M-right] 'my-forward-word)
  (global-set-key [M-left]  'my-backward-word)
  )

(bind-key "M-<left>" 'my-backward-word wakib-keys-overriding-map)
(bind-key "M-<right>" 'my-forward-word wakib-keys-overriding-map)

#+end_src

*** Stuff I need to try that might improve scrolling.

#+begin_src emacs-lisp :tangle no

(use-package emacs
  :custom
  ;; https://www.masteringemacs.org/article/improving-performance-emacs-display-engine
  ;; https://www.reddit.com/r/emacs/comments/8sw3r0/finally_scrolling_over_large_images_with_pixel/
  ;; https://www.reddit.com/r/emacs/comments/9rwb4h/why_does_fast_scrolling_freeze_the_screen/
  ;; https://emacs.stackexchange.com/questions/10354/smooth-mouse-scroll-for-inline-images
  ;; https://emacs.stackexchange.com/questions/28736/emacs-pointcursor-movement-lag
  (redisplay-dont-pause            t) ;; Fully redraw the display before it processes queued input events.
  (next-screen-context-lines       2) ;; Number of lines of continuity to retain when scrolling by full screens
  (scroll-conservatively       10000) ;; only 'jump' when moving this far off the screen
  (scroll-step                     1) ;; Keyboard scroll one line at a time
  (mouse-wheel-progressive-speed nil) ;; Don't accelerate scrolling
  (mouse-wheel-follow-mouse        t) ;; Scroll window under mouse
  (fast-but-imprecise-scrolling    t) ;; No (less) lag while scrolling lots.
  (auto-window-vscroll           nil) ;; Cursor move faster
  )

;; Inertial Scrolling - Better than progressive-speed
(use-package inertial-scroll
  :straight t
  :custom
  (inertias-friction 110)
  :bind
  (("<mouse-4>"     . inertias-down-wheel) ;; Replace mwheel-scroll
   ("<mouse-5>"     . inertias-up-wheel  ) ;; Replace mwheel-scroll
   ("<wheel-up>"    . inertias-down-wheel)
   ("<wheel-down>"  . inertias-up-wheel  )))

;; Pixel-scroll alternative
(use-package good-scroll
  :straight (good-scroll :type git :host github :repo "io12/good-scroll.el")
  :hook (after-init . good-scroll-mode))

#+end_src

*** org agenda custom commands

#+begin_src emacs-lisp :tangle no

(setq org-agenda-custom-commands
      '(("cm" "Custom: This month"
         ((org-ql-block '(ts-active :from today :to (format-time-string "%Y-%m-%d" (org-read-date nil t "+30d")))
                        ((org-ql-block-header "This month")))
          (agenda)))))

#+end_src

*** make tab-line empty

#+begin_src emacs-lisp :tangle no

;; use this next snippet to add blank space at the top of the window
;; note: the background should be set to the same as the buffer
(setq header-line-format " ")

;; another option is to use the tab-line. Just give the function responsible for tab names an error and the tab line will be empty.

#+end_src

** File Footer

#+begin_src emacs-lisp :tangle yes

;;; config.el ends here
#+end_src
